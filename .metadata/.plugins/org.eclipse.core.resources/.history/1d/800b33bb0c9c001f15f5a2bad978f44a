
3_Instrumentation_Trace_Microcell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000194  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000358  08000358  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000358  08000358  00002014  2**0
                  CONTENTS
  4 .ARM          00000008  08000358  08000358  00001358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000360  08000360  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000360  08000360  00001360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000364  08000364  00001364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08000368  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000014  0800037c  00002014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  0800037c  00002030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003df  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001ae  00000000  00000000  00002423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  000025d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000032  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193e8  00000000  00000000  0000265a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000920  00000000  00000000  0001ba42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd43  00000000  00000000  0001c362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa0a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000084  00000000  00000000  000aa0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a0  00000000  00000000  000aa16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000340 	.word	0x08000340

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08000340 	.word	0x08000340

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800021c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000220:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000224:	f003 0301 	and.w	r3, r3, #1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d013      	beq.n	8000254 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800022c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000230:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000234:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000238:	2b00      	cmp	r3, #0
 800023a:	d00b      	beq.n	8000254 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800023c:	e000      	b.n	8000240 <ITM_SendChar+0x2c>
    {
      __NOP();
 800023e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000240:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d0f9      	beq.n	800023e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800024a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	b2d2      	uxtb	r2, r2
 8000252:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000254:	687b      	ldr	r3, [r7, #4]
}
 8000256:	4618      	mov	r0, r3
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
	...

08000264 <main>:

char hello[] ={"Hello! World..."};
char *pt_hello = hello;

int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
	for(int i=0; i<strlen(hello); i++)
 800026a:	2300      	movs	r3, #0
 800026c:	607b      	str	r3, [r7, #4]
 800026e:	e00b      	b.n	8000288 <main+0x24>
	{
		ITM_SendChar(*pt_hello++);
 8000270:	4b0a      	ldr	r3, [pc, #40]	@ (800029c <main+0x38>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	1c5a      	adds	r2, r3, #1
 8000276:	4909      	ldr	r1, [pc, #36]	@ (800029c <main+0x38>)
 8000278:	600a      	str	r2, [r1, #0]
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	4618      	mov	r0, r3
 800027e:	f7ff ffc9 	bl	8000214 <ITM_SendChar>
	for(int i=0; i<strlen(hello); i++)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	3301      	adds	r3, #1
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	4805      	ldr	r0, [pc, #20]	@ (80002a0 <main+0x3c>)
 800028a:	f7ff ffbb 	bl	8000204 <strlen>
 800028e:	4602      	mov	r2, r0
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	429a      	cmp	r2, r3
 8000294:	d8ec      	bhi.n	8000270 <main+0xc>
	}
	while(1)
 8000296:	bf00      	nop
 8000298:	e7fd      	b.n	8000296 <main+0x32>
 800029a:	bf00      	nop
 800029c:	20000010 	.word	0x20000010
 80002a0:	20000000 	.word	0x20000000

080002a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a4:	480d      	ldr	r0, [pc, #52]	@ (80002dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ac:	480c      	ldr	r0, [pc, #48]	@ (80002e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ae:	490d      	ldr	r1, [pc, #52]	@ (80002e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b0:	4a0d      	ldr	r2, [pc, #52]	@ (80002e8 <LoopForever+0xe>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b4:	e002      	b.n	80002bc <LoopCopyDataInit>

080002b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ba:	3304      	adds	r3, #4

080002bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c0:	d3f9      	bcc.n	80002b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c2:	4a0a      	ldr	r2, [pc, #40]	@ (80002ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c4:	4c0a      	ldr	r4, [pc, #40]	@ (80002f0 <LoopForever+0x16>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c8:	e001      	b.n	80002ce <LoopFillZerobss>

080002ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002cc:	3204      	adds	r2, #4

080002ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d0:	d3fb      	bcc.n	80002ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d2:	f000 f811 	bl	80002f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d6:	f7ff ffc5 	bl	8000264 <main>

080002da <LoopForever>:

LoopForever:
  b LoopForever
 80002da:	e7fe      	b.n	80002da <LoopForever>
  ldr   r0, =_estack
 80002dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80002e8:	08000368 	.word	0x08000368
  ldr r2, =_sbss
 80002ec:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80002f0:	20000030 	.word	0x20000030

080002f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f4:	e7fe      	b.n	80002f4 <ADC_IRQHandler>
	...

080002f8 <__libc_init_array>:
 80002f8:	b570      	push	{r4, r5, r6, lr}
 80002fa:	4d0d      	ldr	r5, [pc, #52]	@ (8000330 <__libc_init_array+0x38>)
 80002fc:	4c0d      	ldr	r4, [pc, #52]	@ (8000334 <__libc_init_array+0x3c>)
 80002fe:	1b64      	subs	r4, r4, r5
 8000300:	10a4      	asrs	r4, r4, #2
 8000302:	2600      	movs	r6, #0
 8000304:	42a6      	cmp	r6, r4
 8000306:	d109      	bne.n	800031c <__libc_init_array+0x24>
 8000308:	4d0b      	ldr	r5, [pc, #44]	@ (8000338 <__libc_init_array+0x40>)
 800030a:	4c0c      	ldr	r4, [pc, #48]	@ (800033c <__libc_init_array+0x44>)
 800030c:	f000 f818 	bl	8000340 <_init>
 8000310:	1b64      	subs	r4, r4, r5
 8000312:	10a4      	asrs	r4, r4, #2
 8000314:	2600      	movs	r6, #0
 8000316:	42a6      	cmp	r6, r4
 8000318:	d105      	bne.n	8000326 <__libc_init_array+0x2e>
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000320:	4798      	blx	r3
 8000322:	3601      	adds	r6, #1
 8000324:	e7ee      	b.n	8000304 <__libc_init_array+0xc>
 8000326:	f855 3b04 	ldr.w	r3, [r5], #4
 800032a:	4798      	blx	r3
 800032c:	3601      	adds	r6, #1
 800032e:	e7f2      	b.n	8000316 <__libc_init_array+0x1e>
 8000330:	08000360 	.word	0x08000360
 8000334:	08000360 	.word	0x08000360
 8000338:	08000360 	.word	0x08000360
 800033c:	08000364 	.word	0x08000364

08000340 <_init>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	bf00      	nop
 8000344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000346:	bc08      	pop	{r3}
 8000348:	469e      	mov	lr, r3
 800034a:	4770      	bx	lr

0800034c <_fini>:
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034e:	bf00      	nop
 8000350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000352:	bc08      	pop	{r3}
 8000354:	469e      	mov	lr, r3
 8000356:	4770      	bx	lr
