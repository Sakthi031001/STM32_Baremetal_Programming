#include "adc_dma.h"

#define GPIOAEN			(1U<<0)
#define ADC1EN			(1U<<8)
#define CR1_SCAN		(1U<<8)
#define CR2_DMA			(1U<<8)

void adc_dma_init(void)
{
	/******************************************************* GPIO CONFIGURATION *******************************************************/
	// Enable Clock access to the ADC GPIO pin's port
	RCC->AHB1ENR |= GPIOAEN;

	// Set PA0 and PA1 mode to analog mode
	GPIOA->MODER = GPIOA->MODER | (1U<<0) | (1U<<1);	//PIN 0
	GPIOA->MODER = GPIOA->MODER | (1U<<2) | (1U<<3);	//PIN 1

	/******************************************************* ADC CONFIGURATION *******************************************************/
	// Enable Clock access to the ADC
	RCC->APB2ENR |= ADC1EN;

	// Set sequence length
	ADC1->SQR1 |= (1U<<20);
	ADC1->SQR1  = ADC1->SQR1 & ~(1U<<21) & ~(1U<<22) & ~(1U<<23);

	// Set sequence
	ADC1->SQR3 = ADC1->SQR3 | (0U<<0) | (1U<<5);

	// Enable scan mode
	ADC1->CR1 |= CR1_SCAN;

	// Select to use DMA
	ADC1->CR2 |= CR2_DMA;

	/******************************************************* DMA CONFIGURATION *******************************************************/
	// Enable clock access to DMA
	// Disable DMA
	// Wait till DMA is disabled
	// Enable Circular mode
	// Set transfer size
	// Enable memory increment
	// Set Memory transfer size
	// Set Peripheral transfer size

	// Enable Memory increment
	// Set peripheral address
	// Set Memory address
	// Set number of transfer
	// Enable DMA Stream

	/******************************************************* ADC CONFIGURATION *******************************************************/
	// Enable ADC
	// Start ADC
}
