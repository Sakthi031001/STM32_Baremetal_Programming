
10_UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000eec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080010bc  080010bc  000020bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001124  08001124  00003050  2**0
                  CONTENTS
  4 .ARM          00000008  08001124  08001124  00002124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800112c  0800112c  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800112c  0800112c  0000212c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001130  08001130  00002130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001134  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000050  08001184  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08001184  00003238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cb2  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000397  00000000  00000000  00003d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  000040d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000008c  00000000  00000000  000041a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000011a4  00000000  00000000  0000422c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001774  00000000  00000000  000053d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f1d8  00000000  00000000  00006b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00095d1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000728  00000000  00000000  00095d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  00096488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000050 	.word	0x20000050
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080010a4 	.word	0x080010a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000054 	.word	0x20000054
 800020c:	080010a4 	.word	0x080010a4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <main>:
extern char uart_data_buffer[UART_DATA_BUFFER_SIZE];

char msg_buff[120] = {'\0'};

int main()
{
 80002c0:	b598      	push	{r3, r4, r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	uart2_dma_rx_tx_init();
 80002c4:	f000 f896 	bl	80003f4 <uart2_dma_rx_tx_init>
	dma1_init();
 80002c8:	f000 f8fc 	bl	80004c4 <dma1_init>
	dma1_stream5_uart_rx_config();
 80002cc:	f000 f90a 	bl	80004e4 <dma1_stream5_uart_rx_config>
	sprintf(msg_buff, "Initialization...complete\n\r");
 80002d0:	4917      	ldr	r1, [pc, #92]	@ (8000330 <main+0x70>)
 80002d2:	4818      	ldr	r0, [pc, #96]	@ (8000334 <main+0x74>)
 80002d4:	f000 fa4e 	bl	8000774 <siprintf>
	dma1_stream6_uart_tx_config((uint32_t)msg_buff,strlen(msg_buff));
 80002d8:	4c16      	ldr	r4, [pc, #88]	@ (8000334 <main+0x74>)
 80002da:	4816      	ldr	r0, [pc, #88]	@ (8000334 <main+0x74>)
 80002dc:	f7ff ff98 	bl	8000210 <strlen>
 80002e0:	4603      	mov	r3, r0
 80002e2:	4619      	mov	r1, r3
 80002e4:	4620      	mov	r0, r4
 80002e6:	f000 f953 	bl	8000590 <dma1_stream6_uart_tx_config>

	while(!g_tx_cmplt){}
 80002ea:	bf00      	nop
 80002ec:	4b12      	ldr	r3, [pc, #72]	@ (8000338 <main+0x78>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0fb      	beq.n	80002ec <main+0x2c>

	while(1)
	{
		if(g_rx_complete)
 80002f4:	4b11      	ldr	r3, [pc, #68]	@ (800033c <main+0x7c>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d0fb      	beq.n	80002f4 <main+0x34>
		{
			sprintf(msg_buff, "Message Received : %s \n\r", uart_data_buffer);
 80002fc:	4a10      	ldr	r2, [pc, #64]	@ (8000340 <main+0x80>)
 80002fe:	4911      	ldr	r1, [pc, #68]	@ (8000344 <main+0x84>)
 8000300:	480c      	ldr	r0, [pc, #48]	@ (8000334 <main+0x74>)
 8000302:	f000 fa37 	bl	8000774 <siprintf>
			g_rx_complete = 0;
 8000306:	4b0d      	ldr	r3, [pc, #52]	@ (800033c <main+0x7c>)
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]
			g_uart_complete = 0;
 800030c:	4b0e      	ldr	r3, [pc, #56]	@ (8000348 <main+0x88>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
			dma1_stream6_uart_tx_config((uint32_t)msg_buff,strlen(msg_buff));
 8000312:	4c08      	ldr	r4, [pc, #32]	@ (8000334 <main+0x74>)
 8000314:	4807      	ldr	r0, [pc, #28]	@ (8000334 <main+0x74>)
 8000316:	f7ff ff7b 	bl	8000210 <strlen>
 800031a:	4603      	mov	r3, r0
 800031c:	4619      	mov	r1, r3
 800031e:	4620      	mov	r0, r4
 8000320:	f000 f936 	bl	8000590 <dma1_stream6_uart_tx_config>

			while(!g_tx_cmplt){}
 8000324:	bf00      	nop
 8000326:	4b04      	ldr	r3, [pc, #16]	@ (8000338 <main+0x78>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0fb      	beq.n	8000326 <main+0x66>
		if(g_rx_complete)
 800032e:	e7e1      	b.n	80002f4 <main+0x34>
 8000330:	080010bc 	.word	0x080010bc
 8000334:	2000006c 	.word	0x2000006c
 8000338:	200000ee 	.word	0x200000ee
 800033c:	200000ed 	.word	0x200000ed
 8000340:	200000e8 	.word	0x200000e8
 8000344:	080010d8 	.word	0x080010d8
 8000348:	200000ef 	.word	0x200000ef

0800034c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b086      	sub	sp, #24
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000354:	4a14      	ldr	r2, [pc, #80]	@ (80003a8 <_sbrk+0x5c>)
 8000356:	4b15      	ldr	r3, [pc, #84]	@ (80003ac <_sbrk+0x60>)
 8000358:	1ad3      	subs	r3, r2, r3
 800035a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000360:	4b13      	ldr	r3, [pc, #76]	@ (80003b0 <_sbrk+0x64>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d102      	bne.n	800036e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000368:	4b11      	ldr	r3, [pc, #68]	@ (80003b0 <_sbrk+0x64>)
 800036a:	4a12      	ldr	r2, [pc, #72]	@ (80003b4 <_sbrk+0x68>)
 800036c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800036e:	4b10      	ldr	r3, [pc, #64]	@ (80003b0 <_sbrk+0x64>)
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4413      	add	r3, r2
 8000376:	693a      	ldr	r2, [r7, #16]
 8000378:	429a      	cmp	r2, r3
 800037a:	d207      	bcs.n	800038c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800037c:	f000 fa1a 	bl	80007b4 <__errno>
 8000380:	4603      	mov	r3, r0
 8000382:	220c      	movs	r2, #12
 8000384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000386:	f04f 33ff 	mov.w	r3, #4294967295
 800038a:	e009      	b.n	80003a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800038c:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <_sbrk+0x64>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000392:	4b07      	ldr	r3, [pc, #28]	@ (80003b0 <_sbrk+0x64>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4413      	add	r3, r2
 800039a:	4a05      	ldr	r2, [pc, #20]	@ (80003b0 <_sbrk+0x64>)
 800039c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800039e:	68fb      	ldr	r3, [r7, #12]
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	3718      	adds	r7, #24
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20020000 	.word	0x20020000
 80003ac:	00000400 	.word	0x00000400
 80003b0:	200000e4 	.word	0x200000e4
 80003b4:	20000238 	.word	0x20000238

080003b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	db0b      	blt.n	80003e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	f003 021f 	and.w	r2, r3, #31
 80003d0:	4907      	ldr	r1, [pc, #28]	@ (80003f0 <__NVIC_EnableIRQ+0x38>)
 80003d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d6:	095b      	lsrs	r3, r3, #5
 80003d8:	2001      	movs	r0, #1
 80003da:	fa00 f202 	lsl.w	r2, r0, r2
 80003de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	e000e100 	.word	0xe000e100

080003f4 <uart2_dma_rx_tx_init>:
uint8_t g_tx_cmplt;

uint8_t g_uart_complete;

void uart2_dma_rx_tx_init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	/************Configure UART GPIO pin************/
	// 1. Enable clock access
	RCC->AHB1ENR |= GPIOAEN;
 80003f8:	4b2e      	ldr	r3, [pc, #184]	@ (80004b4 <uart2_dma_rx_tx_init+0xc0>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003fc:	4a2d      	ldr	r2, [pc, #180]	@ (80004b4 <uart2_dma_rx_tx_init+0xc0>)
 80003fe:	f043 0301 	orr.w	r3, r3, #1
 8000402:	6313      	str	r3, [r2, #48]	@ 0x30

	// 2. Set PA2 mode to Alternate Function mode
	GPIOA->MODER &= ~(1U<<4);
 8000404:	4b2c      	ldr	r3, [pc, #176]	@ (80004b8 <uart2_dma_rx_tx_init+0xc4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a2b      	ldr	r2, [pc, #172]	@ (80004b8 <uart2_dma_rx_tx_init+0xc4>)
 800040a:	f023 0310 	bic.w	r3, r3, #16
 800040e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000410:	4b29      	ldr	r3, [pc, #164]	@ (80004b8 <uart2_dma_rx_tx_init+0xc4>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a28      	ldr	r2, [pc, #160]	@ (80004b8 <uart2_dma_rx_tx_init+0xc4>)
 8000416:	f043 0320 	orr.w	r3, r3, #32
 800041a:	6013      	str	r3, [r2, #0]

	// 3. Set PA3 mode to Alternate Function mode
	GPIOA->MODER &= ~(1U<<6);
 800041c:	4b26      	ldr	r3, [pc, #152]	@ (80004b8 <uart2_dma_rx_tx_init+0xc4>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a25      	ldr	r2, [pc, #148]	@ (80004b8 <uart2_dma_rx_tx_init+0xc4>)
 8000422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000426:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<7);
 8000428:	4b23      	ldr	r3, [pc, #140]	@ (80004b8 <uart2_dma_rx_tx_init+0xc4>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a22      	ldr	r2, [pc, #136]	@ (80004b8 <uart2_dma_rx_tx_init+0xc4>)
 800042e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000432:	6013      	str	r3, [r2, #0]

	// 4. Set PA2 Alternate Function type to AF7 (UART_TX)
	GPIOA->AFR[0] |=  (1U<<8) | (1U<<9) | (1U<<10);
 8000434:	4b20      	ldr	r3, [pc, #128]	@ (80004b8 <uart2_dma_rx_tx_init+0xc4>)
 8000436:	6a1b      	ldr	r3, [r3, #32]
 8000438:	4a1f      	ldr	r2, [pc, #124]	@ (80004b8 <uart2_dma_rx_tx_init+0xc4>)
 800043a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800043e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000440:	4b1d      	ldr	r3, [pc, #116]	@ (80004b8 <uart2_dma_rx_tx_init+0xc4>)
 8000442:	6a1b      	ldr	r3, [r3, #32]
 8000444:	4a1c      	ldr	r2, [pc, #112]	@ (80004b8 <uart2_dma_rx_tx_init+0xc4>)
 8000446:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800044a:	6213      	str	r3, [r2, #32]

	// 5. Set PA3 Alternate Function type to AF7 (UART_TX)
	GPIOA->AFR[0] |=  (1U<<12) | (1U<<13) | (1U<<14);
 800044c:	4b1a      	ldr	r3, [pc, #104]	@ (80004b8 <uart2_dma_rx_tx_init+0xc4>)
 800044e:	6a1b      	ldr	r3, [r3, #32]
 8000450:	4a19      	ldr	r2, [pc, #100]	@ (80004b8 <uart2_dma_rx_tx_init+0xc4>)
 8000452:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000456:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 8000458:	4b17      	ldr	r3, [pc, #92]	@ (80004b8 <uart2_dma_rx_tx_init+0xc4>)
 800045a:	6a1b      	ldr	r3, [r3, #32]
 800045c:	4a16      	ldr	r2, [pc, #88]	@ (80004b8 <uart2_dma_rx_tx_init+0xc4>)
 800045e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000462:	6213      	str	r3, [r2, #32]


	/************CONFIGURE UART MODULE************/
	// 6. ENABLE CLOCK ACCESS TO UART2
	RCC->APB1ENR |= UART2EN;
 8000464:	4b13      	ldr	r3, [pc, #76]	@ (80004b4 <uart2_dma_rx_tx_init+0xc0>)
 8000466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000468:	4a12      	ldr	r2, [pc, #72]	@ (80004b4 <uart2_dma_rx_tx_init+0xc0>)
 800046a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800046e:	6413      	str	r3, [r2, #64]	@ 0x40

	// 7. Set Baudrate
	uart_set_baudrate(CLK, UART_BAUDRATE);
 8000470:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000474:	4811      	ldr	r0, [pc, #68]	@ (80004bc <uart2_dma_rx_tx_init+0xc8>)
 8000476:	f000 f8f7 	bl	8000668 <uart_set_baudrate>

	// 8. Select to use DMA
	USART2->CR3 |= CR3DMAT | CR3DMAR;
 800047a:	4b11      	ldr	r3, [pc, #68]	@ (80004c0 <uart2_dma_rx_tx_init+0xcc>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a10      	ldr	r2, [pc, #64]	@ (80004c0 <uart2_dma_rx_tx_init+0xcc>)
 8000480:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000484:	6153      	str	r3, [r2, #20]

	// 9. Set transfer direction
	USART2->CR1 = CR1_TE | CR1_RE;
 8000486:	4b0e      	ldr	r3, [pc, #56]	@ (80004c0 <uart2_dma_rx_tx_init+0xcc>)
 8000488:	220c      	movs	r2, #12
 800048a:	60da      	str	r2, [r3, #12]

	// 10. Clear TC flag
	USART2->SR &= ~SR_TC;
 800048c:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <uart2_dma_rx_tx_init+0xcc>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a0b      	ldr	r2, [pc, #44]	@ (80004c0 <uart2_dma_rx_tx_init+0xcc>)
 8000492:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000496:	6013      	str	r3, [r2, #0]

	// 11. Enable TCIE
	USART2->CR1 |= CR1_TCIE;
 8000498:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <uart2_dma_rx_tx_init+0xcc>)
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	4a08      	ldr	r2, [pc, #32]	@ (80004c0 <uart2_dma_rx_tx_init+0xcc>)
 800049e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004a2:	60d3      	str	r3, [r2, #12]

	// 12. Enable UART module
	USART2->CR1 |= CR1_UE;
 80004a4:	4b06      	ldr	r3, [pc, #24]	@ (80004c0 <uart2_dma_rx_tx_init+0xcc>)
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	4a05      	ldr	r2, [pc, #20]	@ (80004c0 <uart2_dma_rx_tx_init+0xcc>)
 80004aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004ae:	60d3      	str	r3, [r2, #12]
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40023800 	.word	0x40023800
 80004b8:	40020000 	.word	0x40020000
 80004bc:	00f42400 	.word	0x00f42400
 80004c0:	40004400 	.word	0x40004400

080004c4 <dma1_init>:

void dma1_init()
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	// Enable clock access to dma1
	RCC->AHB1ENR |= DMA1EN;
 80004c8:	4b05      	ldr	r3, [pc, #20]	@ (80004e0 <dma1_init+0x1c>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004cc:	4a04      	ldr	r2, [pc, #16]	@ (80004e0 <dma1_init+0x1c>)
 80004ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004d2:	6313      	str	r3, [r2, #48]	@ 0x30

	// Enable DMA Stream6 Interrupting NVIC
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80004d4:	2011      	movs	r0, #17
 80004d6:	f7ff ff6f 	bl	80003b8 <__NVIC_EnableIRQ>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40023800 	.word	0x40023800

080004e4 <dma1_stream5_uart_rx_config>:

void dma1_stream5_uart_rx_config()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	// Disable DMA Stream
	DMA1_Stream5->CR &= ~DMA_SCR_EN;
 80004e8:	4b25      	ldr	r3, [pc, #148]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a24      	ldr	r2, [pc, #144]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 80004ee:	f023 0301 	bic.w	r3, r3, #1
 80004f2:	6013      	str	r3, [r2, #0]

	// Wait till DMA is disabled
	while((DMA1_Stream5->CR & DMA_SCR_EN)){}
 80004f4:	bf00      	nop
 80004f6:	4b22      	ldr	r3, [pc, #136]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d1f9      	bne.n	80004f6 <dma1_stream5_uart_rx_config+0x12>

	// Clear interrupt flags for Stream5
	DMA1->HIFCR |= HIFCR_CDMEIF5 | HIFCR_CTEIF5 | HIFCR_CTCIF5;
 8000502:	4b20      	ldr	r3, [pc, #128]	@ (8000584 <dma1_stream5_uart_rx_config+0xa0>)
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	4a1f      	ldr	r2, [pc, #124]	@ (8000584 <dma1_stream5_uart_rx_config+0xa0>)
 8000508:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 800050c:	60d3      	str	r3, [r2, #12]

	// Set peripheral address
	DMA1_Stream5->PAR = (uint32_t)(&(USART2->DR));
 800050e:	4b1c      	ldr	r3, [pc, #112]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 8000510:	4a1d      	ldr	r2, [pc, #116]	@ (8000588 <dma1_stream5_uart_rx_config+0xa4>)
 8000512:	609a      	str	r2, [r3, #8]

	// Set memory address
	DMA1_Stream5->M0AR = (uint32_t)(&uart_data_buffer);
 8000514:	4b1a      	ldr	r3, [pc, #104]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 8000516:	4a1d      	ldr	r2, [pc, #116]	@ (800058c <dma1_stream5_uart_rx_config+0xa8>)
 8000518:	60da      	str	r2, [r3, #12]

	// Set number of transfer
	DMA1_Stream5->NDTR  = (uint16_t)(UART_DATA_BUFFER_SIZE);
 800051a:	4b19      	ldr	r3, [pc, #100]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 800051c:	2205      	movs	r2, #5
 800051e:	605a      	str	r2, [r3, #4]

	// Select channel 4
	DMA1_Stream5->CR |= (1U<<27);
 8000520:	4b17      	ldr	r3, [pc, #92]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a16      	ldr	r2, [pc, #88]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 8000526:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800052a:	6013      	str	r3, [r2, #0]
	DMA1_Stream5->CR &= (~(1U<<26)) & (~(1U<<25));
 800052c:	4b14      	ldr	r3, [pc, #80]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a13      	ldr	r2, [pc, #76]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 8000532:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8000536:	6013      	str	r3, [r2, #0]

	//Enable Memory address increment
	DMA1_Stream5->CR |= DMA_SCR_MINC;
 8000538:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a10      	ldr	r2, [pc, #64]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 800053e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000542:	6013      	str	r3, [r2, #0]

	//Enabling Transfer Complete Interrupt
	DMA1_Stream5->CR |= DMA_SCR_TCIE;
 8000544:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a0d      	ldr	r2, [pc, #52]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 800054a:	f043 0310 	orr.w	r3, r3, #16
 800054e:	6013      	str	r3, [r2, #0]

	// Enable Circular mode
	DMA1_Stream5->CR |= DMA_SCR_CIRC;
 8000550:	4b0b      	ldr	r3, [pc, #44]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a0a      	ldr	r2, [pc, #40]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 8000556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800055a:	6013      	str	r3, [r2, #0]

	// Set transfer direction periph - mem
	DMA1_Stream5->CR &= (~(1U<<6)) & (~(1U<<7));
 800055c:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a07      	ldr	r2, [pc, #28]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 8000562:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000566:	6013      	str	r3, [r2, #0]

	// Enable DMA Stream
	DMA1_Stream5->CR |= DMA_SCR_EN;
 8000568:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a04      	ldr	r2, [pc, #16]	@ (8000580 <dma1_stream5_uart_rx_config+0x9c>)
 800056e:	f043 0301 	orr.w	r3, r3, #1
 8000572:	6013      	str	r3, [r2, #0]

	// Enable DMA Stream5 interrupt in NVIC
	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000574:	2010      	movs	r0, #16
 8000576:	f7ff ff1f 	bl	80003b8 <__NVIC_EnableIRQ>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40026088 	.word	0x40026088
 8000584:	40026000 	.word	0x40026000
 8000588:	40004404 	.word	0x40004404
 800058c:	200000e8 	.word	0x200000e8

08000590 <dma1_stream6_uart_tx_config>:

void dma1_stream6_uart_tx_config(uint32_t msg_to_send, uint32_t msg_len)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
	// Disable DMA Stream
	DMA1_Stream6->CR &= ~DMA_SCR_EN;
 800059a:	4b26      	ldr	r3, [pc, #152]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a25      	ldr	r2, [pc, #148]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 80005a0:	f023 0301 	bic.w	r3, r3, #1
 80005a4:	6013      	str	r3, [r2, #0]

	// Wait till DMA is disabled
	while((DMA1_Stream6->CR & DMA_SCR_EN)){}
 80005a6:	bf00      	nop
 80005a8:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f9      	bne.n	80005a8 <dma1_stream6_uart_tx_config+0x18>

	// Clear interrupt flags for Stream6
	DMA1->HIFCR |= HIFCR_CDMEIF6 | HIFCR_CTEIF6 | HIFCR_CTCIF6;
 80005b4:	4b20      	ldr	r3, [pc, #128]	@ (8000638 <dma1_stream6_uart_tx_config+0xa8>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	4a1f      	ldr	r2, [pc, #124]	@ (8000638 <dma1_stream6_uart_tx_config+0xa8>)
 80005ba:	f443 1330 	orr.w	r3, r3, #2883584	@ 0x2c0000
 80005be:	60d3      	str	r3, [r2, #12]

	// Set peripheral address
	DMA1_Stream6->PAR = (uint32_t)(&(USART2->DR));
 80005c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 80005c2:	4a1e      	ldr	r2, [pc, #120]	@ (800063c <dma1_stream6_uart_tx_config+0xac>)
 80005c4:	609a      	str	r2, [r3, #8]

	// Set memory address
	DMA1_Stream6->M0AR = msg_to_send;
 80005c6:	4a1b      	ldr	r2, [pc, #108]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	60d3      	str	r3, [r2, #12]

	// Set number of transfer
	DMA1_Stream6->NDTR  = msg_len;
 80005cc:	4a19      	ldr	r2, [pc, #100]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	6053      	str	r3, [r2, #4]

	// Select channel 4
	DMA1_Stream6->CR |= (1U<<27);
 80005d2:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a17      	ldr	r2, [pc, #92]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 80005d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80005dc:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR &= (~(1U<<26)) & (~(1U<<25));
 80005de:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a14      	ldr	r2, [pc, #80]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 80005e4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80005e8:	6013      	str	r3, [r2, #0]

	//Enable Memory address increment
	DMA1_Stream6->CR |= DMA_SCR_MINC;
 80005ea:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a11      	ldr	r2, [pc, #68]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 80005f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005f4:	6013      	str	r3, [r2, #0]

	// Set transfer direction mem - periph
	DMA1_Stream6->CR &= (~(1U<<7));
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 80005fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000600:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR |= (1U<<6);
 8000602:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a0b      	ldr	r2, [pc, #44]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 8000608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800060c:	6013      	str	r3, [r2, #0]

	//Enabling Transfer Complete Interrupt
	DMA1_Stream6->CR |= DMA_SCR_TCIE;
 800060e:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a08      	ldr	r2, [pc, #32]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 8000614:	f043 0310 	orr.w	r3, r3, #16
 8000618:	6013      	str	r3, [r2, #0]

	// Enable DMA Stream
	DMA1_Stream6->CR |= DMA_SCR_EN;
 800061a:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a05      	ldr	r2, [pc, #20]	@ (8000634 <dma1_stream6_uart_tx_config+0xa4>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6013      	str	r3, [r2, #0]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	400260a0 	.word	0x400260a0
 8000638:	40026000 	.word	0x40026000
 800063c:	40004404 	.word	0x40004404

08000640 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
	return ((periph_clk +(baudrate/2U))/baudrate);
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	085a      	lsrs	r2, r3, #1
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	441a      	add	r2, r3
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	fbb2 f3f3 	udiv	r3, r2, r3
 8000658:	b29b      	uxth	r3, r3
}
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
	...

08000668 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 8000672:	6839      	ldr	r1, [r7, #0]
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff ffe3 	bl	8000640 <compute_uart_bd>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	4b03      	ldr	r3, [pc, #12]	@ (800068c <uart_set_baudrate+0x24>)
 8000680:	609a      	str	r2, [r3, #8]
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40004400 	.word	0x40004400

08000690 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
	if((DMA1->HISR) & HIFSR_TCIF5)
 8000694:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <DMA1_Stream5_IRQHandler+0x2c>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800069c:	2b00      	cmp	r3, #0
 800069e:	d008      	beq.n	80006b2 <DMA1_Stream5_IRQHandler+0x22>
	{
		g_rx_complete = 1;
 80006a0:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <DMA1_Stream5_IRQHandler+0x30>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]

		/*{operation to be performed
		*
		*}*/
		// Clear the flag
		DMA1->HIFCR |= HIFCR_CTCIF5;
 80006a6:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <DMA1_Stream5_IRQHandler+0x2c>)
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	4a04      	ldr	r2, [pc, #16]	@ (80006bc <DMA1_Stream5_IRQHandler+0x2c>)
 80006ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80006b0:	60d3      	str	r3, [r2, #12]
	}
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	40026000 	.word	0x40026000
 80006c0:	200000ed 	.word	0x200000ed

080006c4 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	if((DMA1->HISR) & HIFSR_TCIF6)
 80006c8:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <DMA1_Stream6_IRQHandler+0x2c>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d008      	beq.n	80006e6 <DMA1_Stream6_IRQHandler+0x22>
	{
		// Operation to be performed
		g_tx_cmplt = 1;
 80006d4:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <DMA1_Stream6_IRQHandler+0x30>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	701a      	strb	r2, [r3, #0]

		// Clear the flag
		DMA1->HIFCR |= HIFCR_CTCIF6;
 80006da:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <DMA1_Stream6_IRQHandler+0x2c>)
 80006dc:	68db      	ldr	r3, [r3, #12]
 80006de:	4a04      	ldr	r2, [pc, #16]	@ (80006f0 <DMA1_Stream6_IRQHandler+0x2c>)
 80006e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006e4:	60d3      	str	r3, [r2, #12]
	}
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	40026000 	.word	0x40026000
 80006f4:	200000ee 	.word	0x200000ee

080006f8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
	g_uart_complete = 1;
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <USART2_IRQHandler+0x20>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]

	// Clear TC flag interrupt
	USART2->SR &= ~SR_TC;
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <USART2_IRQHandler+0x24>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a05      	ldr	r2, [pc, #20]	@ (800071c <USART2_IRQHandler+0x24>)
 8000708:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800070c:	6013      	str	r3, [r2, #0]

}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	200000ef 	.word	0x200000ef
 800071c:	40004400 	.word	0x40004400

08000720 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000720:	480d      	ldr	r0, [pc, #52]	@ (8000758 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000722:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000724:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000728:	480c      	ldr	r0, [pc, #48]	@ (800075c <LoopForever+0x6>)
  ldr r1, =_edata
 800072a:	490d      	ldr	r1, [pc, #52]	@ (8000760 <LoopForever+0xa>)
  ldr r2, =_sidata
 800072c:	4a0d      	ldr	r2, [pc, #52]	@ (8000764 <LoopForever+0xe>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000730:	e002      	b.n	8000738 <LoopCopyDataInit>

08000732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000736:	3304      	adds	r3, #4

08000738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800073c:	d3f9      	bcc.n	8000732 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073e:	4a0a      	ldr	r2, [pc, #40]	@ (8000768 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000740:	4c0a      	ldr	r4, [pc, #40]	@ (800076c <LoopForever+0x16>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000744:	e001      	b.n	800074a <LoopFillZerobss>

08000746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000748:	3204      	adds	r2, #4

0800074a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800074c:	d3fb      	bcc.n	8000746 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800074e:	f000 f837 	bl	80007c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000752:	f7ff fdb5 	bl	80002c0 <main>

08000756 <LoopForever>:

LoopForever:
  b LoopForever
 8000756:	e7fe      	b.n	8000756 <LoopForever>
  ldr   r0, =_estack
 8000758:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800075c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000760:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000764:	08001134 	.word	0x08001134
  ldr r2, =_sbss
 8000768:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 800076c:	20000238 	.word	0x20000238

08000770 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000770:	e7fe      	b.n	8000770 <ADC_IRQHandler>
	...

08000774 <siprintf>:
 8000774:	b40e      	push	{r1, r2, r3}
 8000776:	b500      	push	{lr}
 8000778:	b09c      	sub	sp, #112	@ 0x70
 800077a:	ab1d      	add	r3, sp, #116	@ 0x74
 800077c:	9002      	str	r0, [sp, #8]
 800077e:	9006      	str	r0, [sp, #24]
 8000780:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000784:	4809      	ldr	r0, [pc, #36]	@ (80007ac <siprintf+0x38>)
 8000786:	9107      	str	r1, [sp, #28]
 8000788:	9104      	str	r1, [sp, #16]
 800078a:	4909      	ldr	r1, [pc, #36]	@ (80007b0 <siprintf+0x3c>)
 800078c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000790:	9105      	str	r1, [sp, #20]
 8000792:	6800      	ldr	r0, [r0, #0]
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	a902      	add	r1, sp, #8
 8000798:	f000 f98c 	bl	8000ab4 <_svfiprintf_r>
 800079c:	9b02      	ldr	r3, [sp, #8]
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	b01c      	add	sp, #112	@ 0x70
 80007a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80007a8:	b003      	add	sp, #12
 80007aa:	4770      	bx	lr
 80007ac:	20000000 	.word	0x20000000
 80007b0:	ffff0208 	.word	0xffff0208

080007b4 <__errno>:
 80007b4:	4b01      	ldr	r3, [pc, #4]	@ (80007bc <__errno+0x8>)
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	20000000 	.word	0x20000000

080007c0 <__libc_init_array>:
 80007c0:	b570      	push	{r4, r5, r6, lr}
 80007c2:	4d0d      	ldr	r5, [pc, #52]	@ (80007f8 <__libc_init_array+0x38>)
 80007c4:	4c0d      	ldr	r4, [pc, #52]	@ (80007fc <__libc_init_array+0x3c>)
 80007c6:	1b64      	subs	r4, r4, r5
 80007c8:	10a4      	asrs	r4, r4, #2
 80007ca:	2600      	movs	r6, #0
 80007cc:	42a6      	cmp	r6, r4
 80007ce:	d109      	bne.n	80007e4 <__libc_init_array+0x24>
 80007d0:	4d0b      	ldr	r5, [pc, #44]	@ (8000800 <__libc_init_array+0x40>)
 80007d2:	4c0c      	ldr	r4, [pc, #48]	@ (8000804 <__libc_init_array+0x44>)
 80007d4:	f000 fc66 	bl	80010a4 <_init>
 80007d8:	1b64      	subs	r4, r4, r5
 80007da:	10a4      	asrs	r4, r4, #2
 80007dc:	2600      	movs	r6, #0
 80007de:	42a6      	cmp	r6, r4
 80007e0:	d105      	bne.n	80007ee <__libc_init_array+0x2e>
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e8:	4798      	blx	r3
 80007ea:	3601      	adds	r6, #1
 80007ec:	e7ee      	b.n	80007cc <__libc_init_array+0xc>
 80007ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80007f2:	4798      	blx	r3
 80007f4:	3601      	adds	r6, #1
 80007f6:	e7f2      	b.n	80007de <__libc_init_array+0x1e>
 80007f8:	0800112c 	.word	0x0800112c
 80007fc:	0800112c 	.word	0x0800112c
 8000800:	0800112c 	.word	0x0800112c
 8000804:	08001130 	.word	0x08001130

08000808 <__retarget_lock_acquire_recursive>:
 8000808:	4770      	bx	lr

0800080a <__retarget_lock_release_recursive>:
 800080a:	4770      	bx	lr

0800080c <_free_r>:
 800080c:	b538      	push	{r3, r4, r5, lr}
 800080e:	4605      	mov	r5, r0
 8000810:	2900      	cmp	r1, #0
 8000812:	d041      	beq.n	8000898 <_free_r+0x8c>
 8000814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000818:	1f0c      	subs	r4, r1, #4
 800081a:	2b00      	cmp	r3, #0
 800081c:	bfb8      	it	lt
 800081e:	18e4      	addlt	r4, r4, r3
 8000820:	f000 f8e0 	bl	80009e4 <__malloc_lock>
 8000824:	4a1d      	ldr	r2, [pc, #116]	@ (800089c <_free_r+0x90>)
 8000826:	6813      	ldr	r3, [r2, #0]
 8000828:	b933      	cbnz	r3, 8000838 <_free_r+0x2c>
 800082a:	6063      	str	r3, [r4, #4]
 800082c:	6014      	str	r4, [r2, #0]
 800082e:	4628      	mov	r0, r5
 8000830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000834:	f000 b8dc 	b.w	80009f0 <__malloc_unlock>
 8000838:	42a3      	cmp	r3, r4
 800083a:	d908      	bls.n	800084e <_free_r+0x42>
 800083c:	6820      	ldr	r0, [r4, #0]
 800083e:	1821      	adds	r1, r4, r0
 8000840:	428b      	cmp	r3, r1
 8000842:	bf01      	itttt	eq
 8000844:	6819      	ldreq	r1, [r3, #0]
 8000846:	685b      	ldreq	r3, [r3, #4]
 8000848:	1809      	addeq	r1, r1, r0
 800084a:	6021      	streq	r1, [r4, #0]
 800084c:	e7ed      	b.n	800082a <_free_r+0x1e>
 800084e:	461a      	mov	r2, r3
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	b10b      	cbz	r3, 8000858 <_free_r+0x4c>
 8000854:	42a3      	cmp	r3, r4
 8000856:	d9fa      	bls.n	800084e <_free_r+0x42>
 8000858:	6811      	ldr	r1, [r2, #0]
 800085a:	1850      	adds	r0, r2, r1
 800085c:	42a0      	cmp	r0, r4
 800085e:	d10b      	bne.n	8000878 <_free_r+0x6c>
 8000860:	6820      	ldr	r0, [r4, #0]
 8000862:	4401      	add	r1, r0
 8000864:	1850      	adds	r0, r2, r1
 8000866:	4283      	cmp	r3, r0
 8000868:	6011      	str	r1, [r2, #0]
 800086a:	d1e0      	bne.n	800082e <_free_r+0x22>
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	6053      	str	r3, [r2, #4]
 8000872:	4408      	add	r0, r1
 8000874:	6010      	str	r0, [r2, #0]
 8000876:	e7da      	b.n	800082e <_free_r+0x22>
 8000878:	d902      	bls.n	8000880 <_free_r+0x74>
 800087a:	230c      	movs	r3, #12
 800087c:	602b      	str	r3, [r5, #0]
 800087e:	e7d6      	b.n	800082e <_free_r+0x22>
 8000880:	6820      	ldr	r0, [r4, #0]
 8000882:	1821      	adds	r1, r4, r0
 8000884:	428b      	cmp	r3, r1
 8000886:	bf04      	itt	eq
 8000888:	6819      	ldreq	r1, [r3, #0]
 800088a:	685b      	ldreq	r3, [r3, #4]
 800088c:	6063      	str	r3, [r4, #4]
 800088e:	bf04      	itt	eq
 8000890:	1809      	addeq	r1, r1, r0
 8000892:	6021      	streq	r1, [r4, #0]
 8000894:	6054      	str	r4, [r2, #4]
 8000896:	e7ca      	b.n	800082e <_free_r+0x22>
 8000898:	bd38      	pop	{r3, r4, r5, pc}
 800089a:	bf00      	nop
 800089c:	20000234 	.word	0x20000234

080008a0 <sbrk_aligned>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	4e0f      	ldr	r6, [pc, #60]	@ (80008e0 <sbrk_aligned+0x40>)
 80008a4:	460c      	mov	r4, r1
 80008a6:	6831      	ldr	r1, [r6, #0]
 80008a8:	4605      	mov	r5, r0
 80008aa:	b911      	cbnz	r1, 80008b2 <sbrk_aligned+0x12>
 80008ac:	f000 fba6 	bl	8000ffc <_sbrk_r>
 80008b0:	6030      	str	r0, [r6, #0]
 80008b2:	4621      	mov	r1, r4
 80008b4:	4628      	mov	r0, r5
 80008b6:	f000 fba1 	bl	8000ffc <_sbrk_r>
 80008ba:	1c43      	adds	r3, r0, #1
 80008bc:	d103      	bne.n	80008c6 <sbrk_aligned+0x26>
 80008be:	f04f 34ff 	mov.w	r4, #4294967295
 80008c2:	4620      	mov	r0, r4
 80008c4:	bd70      	pop	{r4, r5, r6, pc}
 80008c6:	1cc4      	adds	r4, r0, #3
 80008c8:	f024 0403 	bic.w	r4, r4, #3
 80008cc:	42a0      	cmp	r0, r4
 80008ce:	d0f8      	beq.n	80008c2 <sbrk_aligned+0x22>
 80008d0:	1a21      	subs	r1, r4, r0
 80008d2:	4628      	mov	r0, r5
 80008d4:	f000 fb92 	bl	8000ffc <_sbrk_r>
 80008d8:	3001      	adds	r0, #1
 80008da:	d1f2      	bne.n	80008c2 <sbrk_aligned+0x22>
 80008dc:	e7ef      	b.n	80008be <sbrk_aligned+0x1e>
 80008de:	bf00      	nop
 80008e0:	20000230 	.word	0x20000230

080008e4 <_malloc_r>:
 80008e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008e8:	1ccd      	adds	r5, r1, #3
 80008ea:	f025 0503 	bic.w	r5, r5, #3
 80008ee:	3508      	adds	r5, #8
 80008f0:	2d0c      	cmp	r5, #12
 80008f2:	bf38      	it	cc
 80008f4:	250c      	movcc	r5, #12
 80008f6:	2d00      	cmp	r5, #0
 80008f8:	4606      	mov	r6, r0
 80008fa:	db01      	blt.n	8000900 <_malloc_r+0x1c>
 80008fc:	42a9      	cmp	r1, r5
 80008fe:	d904      	bls.n	800090a <_malloc_r+0x26>
 8000900:	230c      	movs	r3, #12
 8000902:	6033      	str	r3, [r6, #0]
 8000904:	2000      	movs	r0, #0
 8000906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800090a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80009e0 <_malloc_r+0xfc>
 800090e:	f000 f869 	bl	80009e4 <__malloc_lock>
 8000912:	f8d8 3000 	ldr.w	r3, [r8]
 8000916:	461c      	mov	r4, r3
 8000918:	bb44      	cbnz	r4, 800096c <_malloc_r+0x88>
 800091a:	4629      	mov	r1, r5
 800091c:	4630      	mov	r0, r6
 800091e:	f7ff ffbf 	bl	80008a0 <sbrk_aligned>
 8000922:	1c43      	adds	r3, r0, #1
 8000924:	4604      	mov	r4, r0
 8000926:	d158      	bne.n	80009da <_malloc_r+0xf6>
 8000928:	f8d8 4000 	ldr.w	r4, [r8]
 800092c:	4627      	mov	r7, r4
 800092e:	2f00      	cmp	r7, #0
 8000930:	d143      	bne.n	80009ba <_malloc_r+0xd6>
 8000932:	2c00      	cmp	r4, #0
 8000934:	d04b      	beq.n	80009ce <_malloc_r+0xea>
 8000936:	6823      	ldr	r3, [r4, #0]
 8000938:	4639      	mov	r1, r7
 800093a:	4630      	mov	r0, r6
 800093c:	eb04 0903 	add.w	r9, r4, r3
 8000940:	f000 fb5c 	bl	8000ffc <_sbrk_r>
 8000944:	4581      	cmp	r9, r0
 8000946:	d142      	bne.n	80009ce <_malloc_r+0xea>
 8000948:	6821      	ldr	r1, [r4, #0]
 800094a:	1a6d      	subs	r5, r5, r1
 800094c:	4629      	mov	r1, r5
 800094e:	4630      	mov	r0, r6
 8000950:	f7ff ffa6 	bl	80008a0 <sbrk_aligned>
 8000954:	3001      	adds	r0, #1
 8000956:	d03a      	beq.n	80009ce <_malloc_r+0xea>
 8000958:	6823      	ldr	r3, [r4, #0]
 800095a:	442b      	add	r3, r5
 800095c:	6023      	str	r3, [r4, #0]
 800095e:	f8d8 3000 	ldr.w	r3, [r8]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	bb62      	cbnz	r2, 80009c0 <_malloc_r+0xdc>
 8000966:	f8c8 7000 	str.w	r7, [r8]
 800096a:	e00f      	b.n	800098c <_malloc_r+0xa8>
 800096c:	6822      	ldr	r2, [r4, #0]
 800096e:	1b52      	subs	r2, r2, r5
 8000970:	d420      	bmi.n	80009b4 <_malloc_r+0xd0>
 8000972:	2a0b      	cmp	r2, #11
 8000974:	d917      	bls.n	80009a6 <_malloc_r+0xc2>
 8000976:	1961      	adds	r1, r4, r5
 8000978:	42a3      	cmp	r3, r4
 800097a:	6025      	str	r5, [r4, #0]
 800097c:	bf18      	it	ne
 800097e:	6059      	strne	r1, [r3, #4]
 8000980:	6863      	ldr	r3, [r4, #4]
 8000982:	bf08      	it	eq
 8000984:	f8c8 1000 	streq.w	r1, [r8]
 8000988:	5162      	str	r2, [r4, r5]
 800098a:	604b      	str	r3, [r1, #4]
 800098c:	4630      	mov	r0, r6
 800098e:	f000 f82f 	bl	80009f0 <__malloc_unlock>
 8000992:	f104 000b 	add.w	r0, r4, #11
 8000996:	1d23      	adds	r3, r4, #4
 8000998:	f020 0007 	bic.w	r0, r0, #7
 800099c:	1ac2      	subs	r2, r0, r3
 800099e:	bf1c      	itt	ne
 80009a0:	1a1b      	subne	r3, r3, r0
 80009a2:	50a3      	strne	r3, [r4, r2]
 80009a4:	e7af      	b.n	8000906 <_malloc_r+0x22>
 80009a6:	6862      	ldr	r2, [r4, #4]
 80009a8:	42a3      	cmp	r3, r4
 80009aa:	bf0c      	ite	eq
 80009ac:	f8c8 2000 	streq.w	r2, [r8]
 80009b0:	605a      	strne	r2, [r3, #4]
 80009b2:	e7eb      	b.n	800098c <_malloc_r+0xa8>
 80009b4:	4623      	mov	r3, r4
 80009b6:	6864      	ldr	r4, [r4, #4]
 80009b8:	e7ae      	b.n	8000918 <_malloc_r+0x34>
 80009ba:	463c      	mov	r4, r7
 80009bc:	687f      	ldr	r7, [r7, #4]
 80009be:	e7b6      	b.n	800092e <_malloc_r+0x4a>
 80009c0:	461a      	mov	r2, r3
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	42a3      	cmp	r3, r4
 80009c6:	d1fb      	bne.n	80009c0 <_malloc_r+0xdc>
 80009c8:	2300      	movs	r3, #0
 80009ca:	6053      	str	r3, [r2, #4]
 80009cc:	e7de      	b.n	800098c <_malloc_r+0xa8>
 80009ce:	230c      	movs	r3, #12
 80009d0:	6033      	str	r3, [r6, #0]
 80009d2:	4630      	mov	r0, r6
 80009d4:	f000 f80c 	bl	80009f0 <__malloc_unlock>
 80009d8:	e794      	b.n	8000904 <_malloc_r+0x20>
 80009da:	6005      	str	r5, [r0, #0]
 80009dc:	e7d6      	b.n	800098c <_malloc_r+0xa8>
 80009de:	bf00      	nop
 80009e0:	20000234 	.word	0x20000234

080009e4 <__malloc_lock>:
 80009e4:	4801      	ldr	r0, [pc, #4]	@ (80009ec <__malloc_lock+0x8>)
 80009e6:	f7ff bf0f 	b.w	8000808 <__retarget_lock_acquire_recursive>
 80009ea:	bf00      	nop
 80009ec:	2000022c 	.word	0x2000022c

080009f0 <__malloc_unlock>:
 80009f0:	4801      	ldr	r0, [pc, #4]	@ (80009f8 <__malloc_unlock+0x8>)
 80009f2:	f7ff bf0a 	b.w	800080a <__retarget_lock_release_recursive>
 80009f6:	bf00      	nop
 80009f8:	2000022c 	.word	0x2000022c

080009fc <__ssputs_r>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	688e      	ldr	r6, [r1, #8]
 8000a02:	461f      	mov	r7, r3
 8000a04:	42be      	cmp	r6, r7
 8000a06:	680b      	ldr	r3, [r1, #0]
 8000a08:	4682      	mov	sl, r0
 8000a0a:	460c      	mov	r4, r1
 8000a0c:	4690      	mov	r8, r2
 8000a0e:	d82d      	bhi.n	8000a6c <__ssputs_r+0x70>
 8000a10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000a14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000a18:	d026      	beq.n	8000a68 <__ssputs_r+0x6c>
 8000a1a:	6965      	ldr	r5, [r4, #20]
 8000a1c:	6909      	ldr	r1, [r1, #16]
 8000a1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a22:	eba3 0901 	sub.w	r9, r3, r1
 8000a26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000a2a:	1c7b      	adds	r3, r7, #1
 8000a2c:	444b      	add	r3, r9
 8000a2e:	106d      	asrs	r5, r5, #1
 8000a30:	429d      	cmp	r5, r3
 8000a32:	bf38      	it	cc
 8000a34:	461d      	movcc	r5, r3
 8000a36:	0553      	lsls	r3, r2, #21
 8000a38:	d527      	bpl.n	8000a8a <__ssputs_r+0x8e>
 8000a3a:	4629      	mov	r1, r5
 8000a3c:	f7ff ff52 	bl	80008e4 <_malloc_r>
 8000a40:	4606      	mov	r6, r0
 8000a42:	b360      	cbz	r0, 8000a9e <__ssputs_r+0xa2>
 8000a44:	6921      	ldr	r1, [r4, #16]
 8000a46:	464a      	mov	r2, r9
 8000a48:	f000 fae8 	bl	800101c <memcpy>
 8000a4c:	89a3      	ldrh	r3, [r4, #12]
 8000a4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a56:	81a3      	strh	r3, [r4, #12]
 8000a58:	6126      	str	r6, [r4, #16]
 8000a5a:	6165      	str	r5, [r4, #20]
 8000a5c:	444e      	add	r6, r9
 8000a5e:	eba5 0509 	sub.w	r5, r5, r9
 8000a62:	6026      	str	r6, [r4, #0]
 8000a64:	60a5      	str	r5, [r4, #8]
 8000a66:	463e      	mov	r6, r7
 8000a68:	42be      	cmp	r6, r7
 8000a6a:	d900      	bls.n	8000a6e <__ssputs_r+0x72>
 8000a6c:	463e      	mov	r6, r7
 8000a6e:	6820      	ldr	r0, [r4, #0]
 8000a70:	4632      	mov	r2, r6
 8000a72:	4641      	mov	r1, r8
 8000a74:	f000 faa8 	bl	8000fc8 <memmove>
 8000a78:	68a3      	ldr	r3, [r4, #8]
 8000a7a:	1b9b      	subs	r3, r3, r6
 8000a7c:	60a3      	str	r3, [r4, #8]
 8000a7e:	6823      	ldr	r3, [r4, #0]
 8000a80:	4433      	add	r3, r6
 8000a82:	6023      	str	r3, [r4, #0]
 8000a84:	2000      	movs	r0, #0
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	462a      	mov	r2, r5
 8000a8c:	f000 fad4 	bl	8001038 <_realloc_r>
 8000a90:	4606      	mov	r6, r0
 8000a92:	2800      	cmp	r0, #0
 8000a94:	d1e0      	bne.n	8000a58 <__ssputs_r+0x5c>
 8000a96:	6921      	ldr	r1, [r4, #16]
 8000a98:	4650      	mov	r0, sl
 8000a9a:	f7ff feb7 	bl	800080c <_free_r>
 8000a9e:	230c      	movs	r3, #12
 8000aa0:	f8ca 3000 	str.w	r3, [sl]
 8000aa4:	89a3      	ldrh	r3, [r4, #12]
 8000aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aaa:	81a3      	strh	r3, [r4, #12]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	e7e9      	b.n	8000a86 <__ssputs_r+0x8a>
	...

08000ab4 <_svfiprintf_r>:
 8000ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ab8:	4698      	mov	r8, r3
 8000aba:	898b      	ldrh	r3, [r1, #12]
 8000abc:	061b      	lsls	r3, r3, #24
 8000abe:	b09d      	sub	sp, #116	@ 0x74
 8000ac0:	4607      	mov	r7, r0
 8000ac2:	460d      	mov	r5, r1
 8000ac4:	4614      	mov	r4, r2
 8000ac6:	d510      	bpl.n	8000aea <_svfiprintf_r+0x36>
 8000ac8:	690b      	ldr	r3, [r1, #16]
 8000aca:	b973      	cbnz	r3, 8000aea <_svfiprintf_r+0x36>
 8000acc:	2140      	movs	r1, #64	@ 0x40
 8000ace:	f7ff ff09 	bl	80008e4 <_malloc_r>
 8000ad2:	6028      	str	r0, [r5, #0]
 8000ad4:	6128      	str	r0, [r5, #16]
 8000ad6:	b930      	cbnz	r0, 8000ae6 <_svfiprintf_r+0x32>
 8000ad8:	230c      	movs	r3, #12
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	b01d      	add	sp, #116	@ 0x74
 8000ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ae6:	2340      	movs	r3, #64	@ 0x40
 8000ae8:	616b      	str	r3, [r5, #20]
 8000aea:	2300      	movs	r3, #0
 8000aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8000aee:	2320      	movs	r3, #32
 8000af0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000af4:	f8cd 800c 	str.w	r8, [sp, #12]
 8000af8:	2330      	movs	r3, #48	@ 0x30
 8000afa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000c98 <_svfiprintf_r+0x1e4>
 8000afe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000b02:	f04f 0901 	mov.w	r9, #1
 8000b06:	4623      	mov	r3, r4
 8000b08:	469a      	mov	sl, r3
 8000b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b0e:	b10a      	cbz	r2, 8000b14 <_svfiprintf_r+0x60>
 8000b10:	2a25      	cmp	r2, #37	@ 0x25
 8000b12:	d1f9      	bne.n	8000b08 <_svfiprintf_r+0x54>
 8000b14:	ebba 0b04 	subs.w	fp, sl, r4
 8000b18:	d00b      	beq.n	8000b32 <_svfiprintf_r+0x7e>
 8000b1a:	465b      	mov	r3, fp
 8000b1c:	4622      	mov	r2, r4
 8000b1e:	4629      	mov	r1, r5
 8000b20:	4638      	mov	r0, r7
 8000b22:	f7ff ff6b 	bl	80009fc <__ssputs_r>
 8000b26:	3001      	adds	r0, #1
 8000b28:	f000 80a7 	beq.w	8000c7a <_svfiprintf_r+0x1c6>
 8000b2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000b2e:	445a      	add	r2, fp
 8000b30:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b32:	f89a 3000 	ldrb.w	r3, [sl]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f000 809f 	beq.w	8000c7a <_svfiprintf_r+0x1c6>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b46:	f10a 0a01 	add.w	sl, sl, #1
 8000b4a:	9304      	str	r3, [sp, #16]
 8000b4c:	9307      	str	r3, [sp, #28]
 8000b4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000b52:	931a      	str	r3, [sp, #104]	@ 0x68
 8000b54:	4654      	mov	r4, sl
 8000b56:	2205      	movs	r2, #5
 8000b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b5c:	484e      	ldr	r0, [pc, #312]	@ (8000c98 <_svfiprintf_r+0x1e4>)
 8000b5e:	f7ff fb5f 	bl	8000220 <memchr>
 8000b62:	9a04      	ldr	r2, [sp, #16]
 8000b64:	b9d8      	cbnz	r0, 8000b9e <_svfiprintf_r+0xea>
 8000b66:	06d0      	lsls	r0, r2, #27
 8000b68:	bf44      	itt	mi
 8000b6a:	2320      	movmi	r3, #32
 8000b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b70:	0711      	lsls	r1, r2, #28
 8000b72:	bf44      	itt	mi
 8000b74:	232b      	movmi	r3, #43	@ 0x2b
 8000b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8000b7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b80:	d015      	beq.n	8000bae <_svfiprintf_r+0xfa>
 8000b82:	9a07      	ldr	r2, [sp, #28]
 8000b84:	4654      	mov	r4, sl
 8000b86:	2000      	movs	r0, #0
 8000b88:	f04f 0c0a 	mov.w	ip, #10
 8000b8c:	4621      	mov	r1, r4
 8000b8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b92:	3b30      	subs	r3, #48	@ 0x30
 8000b94:	2b09      	cmp	r3, #9
 8000b96:	d94b      	bls.n	8000c30 <_svfiprintf_r+0x17c>
 8000b98:	b1b0      	cbz	r0, 8000bc8 <_svfiprintf_r+0x114>
 8000b9a:	9207      	str	r2, [sp, #28]
 8000b9c:	e014      	b.n	8000bc8 <_svfiprintf_r+0x114>
 8000b9e:	eba0 0308 	sub.w	r3, r0, r8
 8000ba2:	fa09 f303 	lsl.w	r3, r9, r3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	9304      	str	r3, [sp, #16]
 8000baa:	46a2      	mov	sl, r4
 8000bac:	e7d2      	b.n	8000b54 <_svfiprintf_r+0xa0>
 8000bae:	9b03      	ldr	r3, [sp, #12]
 8000bb0:	1d19      	adds	r1, r3, #4
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	9103      	str	r1, [sp, #12]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	bfbb      	ittet	lt
 8000bba:	425b      	neglt	r3, r3
 8000bbc:	f042 0202 	orrlt.w	r2, r2, #2
 8000bc0:	9307      	strge	r3, [sp, #28]
 8000bc2:	9307      	strlt	r3, [sp, #28]
 8000bc4:	bfb8      	it	lt
 8000bc6:	9204      	strlt	r2, [sp, #16]
 8000bc8:	7823      	ldrb	r3, [r4, #0]
 8000bca:	2b2e      	cmp	r3, #46	@ 0x2e
 8000bcc:	d10a      	bne.n	8000be4 <_svfiprintf_r+0x130>
 8000bce:	7863      	ldrb	r3, [r4, #1]
 8000bd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bd2:	d132      	bne.n	8000c3a <_svfiprintf_r+0x186>
 8000bd4:	9b03      	ldr	r3, [sp, #12]
 8000bd6:	1d1a      	adds	r2, r3, #4
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	9203      	str	r2, [sp, #12]
 8000bdc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000be0:	3402      	adds	r4, #2
 8000be2:	9305      	str	r3, [sp, #20]
 8000be4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000ca8 <_svfiprintf_r+0x1f4>
 8000be8:	7821      	ldrb	r1, [r4, #0]
 8000bea:	2203      	movs	r2, #3
 8000bec:	4650      	mov	r0, sl
 8000bee:	f7ff fb17 	bl	8000220 <memchr>
 8000bf2:	b138      	cbz	r0, 8000c04 <_svfiprintf_r+0x150>
 8000bf4:	9b04      	ldr	r3, [sp, #16]
 8000bf6:	eba0 000a 	sub.w	r0, r0, sl
 8000bfa:	2240      	movs	r2, #64	@ 0x40
 8000bfc:	4082      	lsls	r2, r0
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	3401      	adds	r4, #1
 8000c02:	9304      	str	r3, [sp, #16]
 8000c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c08:	4824      	ldr	r0, [pc, #144]	@ (8000c9c <_svfiprintf_r+0x1e8>)
 8000c0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000c0e:	2206      	movs	r2, #6
 8000c10:	f7ff fb06 	bl	8000220 <memchr>
 8000c14:	2800      	cmp	r0, #0
 8000c16:	d036      	beq.n	8000c86 <_svfiprintf_r+0x1d2>
 8000c18:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <_svfiprintf_r+0x1ec>)
 8000c1a:	bb1b      	cbnz	r3, 8000c64 <_svfiprintf_r+0x1b0>
 8000c1c:	9b03      	ldr	r3, [sp, #12]
 8000c1e:	3307      	adds	r3, #7
 8000c20:	f023 0307 	bic.w	r3, r3, #7
 8000c24:	3308      	adds	r3, #8
 8000c26:	9303      	str	r3, [sp, #12]
 8000c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c2a:	4433      	add	r3, r6
 8000c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c2e:	e76a      	b.n	8000b06 <_svfiprintf_r+0x52>
 8000c30:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c34:	460c      	mov	r4, r1
 8000c36:	2001      	movs	r0, #1
 8000c38:	e7a8      	b.n	8000b8c <_svfiprintf_r+0xd8>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	3401      	adds	r4, #1
 8000c3e:	9305      	str	r3, [sp, #20]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f04f 0c0a 	mov.w	ip, #10
 8000c46:	4620      	mov	r0, r4
 8000c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c4c:	3a30      	subs	r2, #48	@ 0x30
 8000c4e:	2a09      	cmp	r2, #9
 8000c50:	d903      	bls.n	8000c5a <_svfiprintf_r+0x1a6>
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0c6      	beq.n	8000be4 <_svfiprintf_r+0x130>
 8000c56:	9105      	str	r1, [sp, #20]
 8000c58:	e7c4      	b.n	8000be4 <_svfiprintf_r+0x130>
 8000c5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c5e:	4604      	mov	r4, r0
 8000c60:	2301      	movs	r3, #1
 8000c62:	e7f0      	b.n	8000c46 <_svfiprintf_r+0x192>
 8000c64:	ab03      	add	r3, sp, #12
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	462a      	mov	r2, r5
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <_svfiprintf_r+0x1f0>)
 8000c6c:	a904      	add	r1, sp, #16
 8000c6e:	4638      	mov	r0, r7
 8000c70:	f3af 8000 	nop.w
 8000c74:	1c42      	adds	r2, r0, #1
 8000c76:	4606      	mov	r6, r0
 8000c78:	d1d6      	bne.n	8000c28 <_svfiprintf_r+0x174>
 8000c7a:	89ab      	ldrh	r3, [r5, #12]
 8000c7c:	065b      	lsls	r3, r3, #25
 8000c7e:	f53f af2d 	bmi.w	8000adc <_svfiprintf_r+0x28>
 8000c82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c84:	e72c      	b.n	8000ae0 <_svfiprintf_r+0x2c>
 8000c86:	ab03      	add	r3, sp, #12
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	462a      	mov	r2, r5
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <_svfiprintf_r+0x1f0>)
 8000c8e:	a904      	add	r1, sp, #16
 8000c90:	4638      	mov	r0, r7
 8000c92:	f000 f879 	bl	8000d88 <_printf_i>
 8000c96:	e7ed      	b.n	8000c74 <_svfiprintf_r+0x1c0>
 8000c98:	080010f1 	.word	0x080010f1
 8000c9c:	080010fb 	.word	0x080010fb
 8000ca0:	00000000 	.word	0x00000000
 8000ca4:	080009fd 	.word	0x080009fd
 8000ca8:	080010f7 	.word	0x080010f7

08000cac <_printf_common>:
 8000cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb0:	4616      	mov	r6, r2
 8000cb2:	4698      	mov	r8, r3
 8000cb4:	688a      	ldr	r2, [r1, #8]
 8000cb6:	690b      	ldr	r3, [r1, #16]
 8000cb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	bfb8      	it	lt
 8000cc0:	4613      	movlt	r3, r2
 8000cc2:	6033      	str	r3, [r6, #0]
 8000cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000cc8:	4607      	mov	r7, r0
 8000cca:	460c      	mov	r4, r1
 8000ccc:	b10a      	cbz	r2, 8000cd2 <_printf_common+0x26>
 8000cce:	3301      	adds	r3, #1
 8000cd0:	6033      	str	r3, [r6, #0]
 8000cd2:	6823      	ldr	r3, [r4, #0]
 8000cd4:	0699      	lsls	r1, r3, #26
 8000cd6:	bf42      	ittt	mi
 8000cd8:	6833      	ldrmi	r3, [r6, #0]
 8000cda:	3302      	addmi	r3, #2
 8000cdc:	6033      	strmi	r3, [r6, #0]
 8000cde:	6825      	ldr	r5, [r4, #0]
 8000ce0:	f015 0506 	ands.w	r5, r5, #6
 8000ce4:	d106      	bne.n	8000cf4 <_printf_common+0x48>
 8000ce6:	f104 0a19 	add.w	sl, r4, #25
 8000cea:	68e3      	ldr	r3, [r4, #12]
 8000cec:	6832      	ldr	r2, [r6, #0]
 8000cee:	1a9b      	subs	r3, r3, r2
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	dc26      	bgt.n	8000d42 <_printf_common+0x96>
 8000cf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000cf8:	6822      	ldr	r2, [r4, #0]
 8000cfa:	3b00      	subs	r3, #0
 8000cfc:	bf18      	it	ne
 8000cfe:	2301      	movne	r3, #1
 8000d00:	0692      	lsls	r2, r2, #26
 8000d02:	d42b      	bmi.n	8000d5c <_printf_common+0xb0>
 8000d04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d08:	4641      	mov	r1, r8
 8000d0a:	4638      	mov	r0, r7
 8000d0c:	47c8      	blx	r9
 8000d0e:	3001      	adds	r0, #1
 8000d10:	d01e      	beq.n	8000d50 <_printf_common+0xa4>
 8000d12:	6823      	ldr	r3, [r4, #0]
 8000d14:	6922      	ldr	r2, [r4, #16]
 8000d16:	f003 0306 	and.w	r3, r3, #6
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf02      	ittt	eq
 8000d1e:	68e5      	ldreq	r5, [r4, #12]
 8000d20:	6833      	ldreq	r3, [r6, #0]
 8000d22:	1aed      	subeq	r5, r5, r3
 8000d24:	68a3      	ldr	r3, [r4, #8]
 8000d26:	bf0c      	ite	eq
 8000d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d2c:	2500      	movne	r5, #0
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	bfc4      	itt	gt
 8000d32:	1a9b      	subgt	r3, r3, r2
 8000d34:	18ed      	addgt	r5, r5, r3
 8000d36:	2600      	movs	r6, #0
 8000d38:	341a      	adds	r4, #26
 8000d3a:	42b5      	cmp	r5, r6
 8000d3c:	d11a      	bne.n	8000d74 <_printf_common+0xc8>
 8000d3e:	2000      	movs	r0, #0
 8000d40:	e008      	b.n	8000d54 <_printf_common+0xa8>
 8000d42:	2301      	movs	r3, #1
 8000d44:	4652      	mov	r2, sl
 8000d46:	4641      	mov	r1, r8
 8000d48:	4638      	mov	r0, r7
 8000d4a:	47c8      	blx	r9
 8000d4c:	3001      	adds	r0, #1
 8000d4e:	d103      	bne.n	8000d58 <_printf_common+0xac>
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d58:	3501      	adds	r5, #1
 8000d5a:	e7c6      	b.n	8000cea <_printf_common+0x3e>
 8000d5c:	18e1      	adds	r1, r4, r3
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	2030      	movs	r0, #48	@ 0x30
 8000d62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d66:	4422      	add	r2, r4
 8000d68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d70:	3302      	adds	r3, #2
 8000d72:	e7c7      	b.n	8000d04 <_printf_common+0x58>
 8000d74:	2301      	movs	r3, #1
 8000d76:	4622      	mov	r2, r4
 8000d78:	4641      	mov	r1, r8
 8000d7a:	4638      	mov	r0, r7
 8000d7c:	47c8      	blx	r9
 8000d7e:	3001      	adds	r0, #1
 8000d80:	d0e6      	beq.n	8000d50 <_printf_common+0xa4>
 8000d82:	3601      	adds	r6, #1
 8000d84:	e7d9      	b.n	8000d3a <_printf_common+0x8e>
	...

08000d88 <_printf_i>:
 8000d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d8c:	7e0f      	ldrb	r7, [r1, #24]
 8000d8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d90:	2f78      	cmp	r7, #120	@ 0x78
 8000d92:	4691      	mov	r9, r2
 8000d94:	4680      	mov	r8, r0
 8000d96:	460c      	mov	r4, r1
 8000d98:	469a      	mov	sl, r3
 8000d9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000d9e:	d807      	bhi.n	8000db0 <_printf_i+0x28>
 8000da0:	2f62      	cmp	r7, #98	@ 0x62
 8000da2:	d80a      	bhi.n	8000dba <_printf_i+0x32>
 8000da4:	2f00      	cmp	r7, #0
 8000da6:	f000 80d2 	beq.w	8000f4e <_printf_i+0x1c6>
 8000daa:	2f58      	cmp	r7, #88	@ 0x58
 8000dac:	f000 80b9 	beq.w	8000f22 <_printf_i+0x19a>
 8000db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000db4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000db8:	e03a      	b.n	8000e30 <_printf_i+0xa8>
 8000dba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000dbe:	2b15      	cmp	r3, #21
 8000dc0:	d8f6      	bhi.n	8000db0 <_printf_i+0x28>
 8000dc2:	a101      	add	r1, pc, #4	@ (adr r1, 8000dc8 <_printf_i+0x40>)
 8000dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000dc8:	08000e21 	.word	0x08000e21
 8000dcc:	08000e35 	.word	0x08000e35
 8000dd0:	08000db1 	.word	0x08000db1
 8000dd4:	08000db1 	.word	0x08000db1
 8000dd8:	08000db1 	.word	0x08000db1
 8000ddc:	08000db1 	.word	0x08000db1
 8000de0:	08000e35 	.word	0x08000e35
 8000de4:	08000db1 	.word	0x08000db1
 8000de8:	08000db1 	.word	0x08000db1
 8000dec:	08000db1 	.word	0x08000db1
 8000df0:	08000db1 	.word	0x08000db1
 8000df4:	08000f35 	.word	0x08000f35
 8000df8:	08000e5f 	.word	0x08000e5f
 8000dfc:	08000eef 	.word	0x08000eef
 8000e00:	08000db1 	.word	0x08000db1
 8000e04:	08000db1 	.word	0x08000db1
 8000e08:	08000f57 	.word	0x08000f57
 8000e0c:	08000db1 	.word	0x08000db1
 8000e10:	08000e5f 	.word	0x08000e5f
 8000e14:	08000db1 	.word	0x08000db1
 8000e18:	08000db1 	.word	0x08000db1
 8000e1c:	08000ef7 	.word	0x08000ef7
 8000e20:	6833      	ldr	r3, [r6, #0]
 8000e22:	1d1a      	adds	r2, r3, #4
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6032      	str	r2, [r6, #0]
 8000e28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e30:	2301      	movs	r3, #1
 8000e32:	e09d      	b.n	8000f70 <_printf_i+0x1e8>
 8000e34:	6833      	ldr	r3, [r6, #0]
 8000e36:	6820      	ldr	r0, [r4, #0]
 8000e38:	1d19      	adds	r1, r3, #4
 8000e3a:	6031      	str	r1, [r6, #0]
 8000e3c:	0606      	lsls	r6, r0, #24
 8000e3e:	d501      	bpl.n	8000e44 <_printf_i+0xbc>
 8000e40:	681d      	ldr	r5, [r3, #0]
 8000e42:	e003      	b.n	8000e4c <_printf_i+0xc4>
 8000e44:	0645      	lsls	r5, r0, #25
 8000e46:	d5fb      	bpl.n	8000e40 <_printf_i+0xb8>
 8000e48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e4c:	2d00      	cmp	r5, #0
 8000e4e:	da03      	bge.n	8000e58 <_printf_i+0xd0>
 8000e50:	232d      	movs	r3, #45	@ 0x2d
 8000e52:	426d      	negs	r5, r5
 8000e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e58:	4859      	ldr	r0, [pc, #356]	@ (8000fc0 <_printf_i+0x238>)
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	e011      	b.n	8000e82 <_printf_i+0xfa>
 8000e5e:	6821      	ldr	r1, [r4, #0]
 8000e60:	6833      	ldr	r3, [r6, #0]
 8000e62:	0608      	lsls	r0, r1, #24
 8000e64:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e68:	d402      	bmi.n	8000e70 <_printf_i+0xe8>
 8000e6a:	0649      	lsls	r1, r1, #25
 8000e6c:	bf48      	it	mi
 8000e6e:	b2ad      	uxthmi	r5, r5
 8000e70:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e72:	4853      	ldr	r0, [pc, #332]	@ (8000fc0 <_printf_i+0x238>)
 8000e74:	6033      	str	r3, [r6, #0]
 8000e76:	bf14      	ite	ne
 8000e78:	230a      	movne	r3, #10
 8000e7a:	2308      	moveq	r3, #8
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000e82:	6866      	ldr	r6, [r4, #4]
 8000e84:	60a6      	str	r6, [r4, #8]
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	bfa2      	ittt	ge
 8000e8a:	6821      	ldrge	r1, [r4, #0]
 8000e8c:	f021 0104 	bicge.w	r1, r1, #4
 8000e90:	6021      	strge	r1, [r4, #0]
 8000e92:	b90d      	cbnz	r5, 8000e98 <_printf_i+0x110>
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d04b      	beq.n	8000f30 <_printf_i+0x1a8>
 8000e98:	4616      	mov	r6, r2
 8000e9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e9e:	fb03 5711 	mls	r7, r3, r1, r5
 8000ea2:	5dc7      	ldrb	r7, [r0, r7]
 8000ea4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000ea8:	462f      	mov	r7, r5
 8000eaa:	42bb      	cmp	r3, r7
 8000eac:	460d      	mov	r5, r1
 8000eae:	d9f4      	bls.n	8000e9a <_printf_i+0x112>
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d10b      	bne.n	8000ecc <_printf_i+0x144>
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	07df      	lsls	r7, r3, #31
 8000eb8:	d508      	bpl.n	8000ecc <_printf_i+0x144>
 8000eba:	6923      	ldr	r3, [r4, #16]
 8000ebc:	6861      	ldr	r1, [r4, #4]
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	bfde      	ittt	le
 8000ec2:	2330      	movle	r3, #48	@ 0x30
 8000ec4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000ec8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000ecc:	1b92      	subs	r2, r2, r6
 8000ece:	6122      	str	r2, [r4, #16]
 8000ed0:	f8cd a000 	str.w	sl, [sp]
 8000ed4:	464b      	mov	r3, r9
 8000ed6:	aa03      	add	r2, sp, #12
 8000ed8:	4621      	mov	r1, r4
 8000eda:	4640      	mov	r0, r8
 8000edc:	f7ff fee6 	bl	8000cac <_printf_common>
 8000ee0:	3001      	adds	r0, #1
 8000ee2:	d14a      	bne.n	8000f7a <_printf_i+0x1f2>
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	b004      	add	sp, #16
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	6823      	ldr	r3, [r4, #0]
 8000ef0:	f043 0320 	orr.w	r3, r3, #32
 8000ef4:	6023      	str	r3, [r4, #0]
 8000ef6:	4833      	ldr	r0, [pc, #204]	@ (8000fc4 <_printf_i+0x23c>)
 8000ef8:	2778      	movs	r7, #120	@ 0x78
 8000efa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	6831      	ldr	r1, [r6, #0]
 8000f02:	061f      	lsls	r7, r3, #24
 8000f04:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f08:	d402      	bmi.n	8000f10 <_printf_i+0x188>
 8000f0a:	065f      	lsls	r7, r3, #25
 8000f0c:	bf48      	it	mi
 8000f0e:	b2ad      	uxthmi	r5, r5
 8000f10:	6031      	str	r1, [r6, #0]
 8000f12:	07d9      	lsls	r1, r3, #31
 8000f14:	bf44      	itt	mi
 8000f16:	f043 0320 	orrmi.w	r3, r3, #32
 8000f1a:	6023      	strmi	r3, [r4, #0]
 8000f1c:	b11d      	cbz	r5, 8000f26 <_printf_i+0x19e>
 8000f1e:	2310      	movs	r3, #16
 8000f20:	e7ac      	b.n	8000e7c <_printf_i+0xf4>
 8000f22:	4827      	ldr	r0, [pc, #156]	@ (8000fc0 <_printf_i+0x238>)
 8000f24:	e7e9      	b.n	8000efa <_printf_i+0x172>
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	f023 0320 	bic.w	r3, r3, #32
 8000f2c:	6023      	str	r3, [r4, #0]
 8000f2e:	e7f6      	b.n	8000f1e <_printf_i+0x196>
 8000f30:	4616      	mov	r6, r2
 8000f32:	e7bd      	b.n	8000eb0 <_printf_i+0x128>
 8000f34:	6833      	ldr	r3, [r6, #0]
 8000f36:	6825      	ldr	r5, [r4, #0]
 8000f38:	6961      	ldr	r1, [r4, #20]
 8000f3a:	1d18      	adds	r0, r3, #4
 8000f3c:	6030      	str	r0, [r6, #0]
 8000f3e:	062e      	lsls	r6, r5, #24
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	d501      	bpl.n	8000f48 <_printf_i+0x1c0>
 8000f44:	6019      	str	r1, [r3, #0]
 8000f46:	e002      	b.n	8000f4e <_printf_i+0x1c6>
 8000f48:	0668      	lsls	r0, r5, #25
 8000f4a:	d5fb      	bpl.n	8000f44 <_printf_i+0x1bc>
 8000f4c:	8019      	strh	r1, [r3, #0]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	6123      	str	r3, [r4, #16]
 8000f52:	4616      	mov	r6, r2
 8000f54:	e7bc      	b.n	8000ed0 <_printf_i+0x148>
 8000f56:	6833      	ldr	r3, [r6, #0]
 8000f58:	1d1a      	adds	r2, r3, #4
 8000f5a:	6032      	str	r2, [r6, #0]
 8000f5c:	681e      	ldr	r6, [r3, #0]
 8000f5e:	6862      	ldr	r2, [r4, #4]
 8000f60:	2100      	movs	r1, #0
 8000f62:	4630      	mov	r0, r6
 8000f64:	f7ff f95c 	bl	8000220 <memchr>
 8000f68:	b108      	cbz	r0, 8000f6e <_printf_i+0x1e6>
 8000f6a:	1b80      	subs	r0, r0, r6
 8000f6c:	6060      	str	r0, [r4, #4]
 8000f6e:	6863      	ldr	r3, [r4, #4]
 8000f70:	6123      	str	r3, [r4, #16]
 8000f72:	2300      	movs	r3, #0
 8000f74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f78:	e7aa      	b.n	8000ed0 <_printf_i+0x148>
 8000f7a:	6923      	ldr	r3, [r4, #16]
 8000f7c:	4632      	mov	r2, r6
 8000f7e:	4649      	mov	r1, r9
 8000f80:	4640      	mov	r0, r8
 8000f82:	47d0      	blx	sl
 8000f84:	3001      	adds	r0, #1
 8000f86:	d0ad      	beq.n	8000ee4 <_printf_i+0x15c>
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	079b      	lsls	r3, r3, #30
 8000f8c:	d413      	bmi.n	8000fb6 <_printf_i+0x22e>
 8000f8e:	68e0      	ldr	r0, [r4, #12]
 8000f90:	9b03      	ldr	r3, [sp, #12]
 8000f92:	4298      	cmp	r0, r3
 8000f94:	bfb8      	it	lt
 8000f96:	4618      	movlt	r0, r3
 8000f98:	e7a6      	b.n	8000ee8 <_printf_i+0x160>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	4632      	mov	r2, r6
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	47d0      	blx	sl
 8000fa4:	3001      	adds	r0, #1
 8000fa6:	d09d      	beq.n	8000ee4 <_printf_i+0x15c>
 8000fa8:	3501      	adds	r5, #1
 8000faa:	68e3      	ldr	r3, [r4, #12]
 8000fac:	9903      	ldr	r1, [sp, #12]
 8000fae:	1a5b      	subs	r3, r3, r1
 8000fb0:	42ab      	cmp	r3, r5
 8000fb2:	dcf2      	bgt.n	8000f9a <_printf_i+0x212>
 8000fb4:	e7eb      	b.n	8000f8e <_printf_i+0x206>
 8000fb6:	2500      	movs	r5, #0
 8000fb8:	f104 0619 	add.w	r6, r4, #25
 8000fbc:	e7f5      	b.n	8000faa <_printf_i+0x222>
 8000fbe:	bf00      	nop
 8000fc0:	08001102 	.word	0x08001102
 8000fc4:	08001113 	.word	0x08001113

08000fc8 <memmove>:
 8000fc8:	4288      	cmp	r0, r1
 8000fca:	b510      	push	{r4, lr}
 8000fcc:	eb01 0402 	add.w	r4, r1, r2
 8000fd0:	d902      	bls.n	8000fd8 <memmove+0x10>
 8000fd2:	4284      	cmp	r4, r0
 8000fd4:	4623      	mov	r3, r4
 8000fd6:	d807      	bhi.n	8000fe8 <memmove+0x20>
 8000fd8:	1e43      	subs	r3, r0, #1
 8000fda:	42a1      	cmp	r1, r4
 8000fdc:	d008      	beq.n	8000ff0 <memmove+0x28>
 8000fde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000fe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000fe6:	e7f8      	b.n	8000fda <memmove+0x12>
 8000fe8:	4402      	add	r2, r0
 8000fea:	4601      	mov	r1, r0
 8000fec:	428a      	cmp	r2, r1
 8000fee:	d100      	bne.n	8000ff2 <memmove+0x2a>
 8000ff0:	bd10      	pop	{r4, pc}
 8000ff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000ff6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000ffa:	e7f7      	b.n	8000fec <memmove+0x24>

08000ffc <_sbrk_r>:
 8000ffc:	b538      	push	{r3, r4, r5, lr}
 8000ffe:	4d06      	ldr	r5, [pc, #24]	@ (8001018 <_sbrk_r+0x1c>)
 8001000:	2300      	movs	r3, #0
 8001002:	4604      	mov	r4, r0
 8001004:	4608      	mov	r0, r1
 8001006:	602b      	str	r3, [r5, #0]
 8001008:	f7ff f9a0 	bl	800034c <_sbrk>
 800100c:	1c43      	adds	r3, r0, #1
 800100e:	d102      	bne.n	8001016 <_sbrk_r+0x1a>
 8001010:	682b      	ldr	r3, [r5, #0]
 8001012:	b103      	cbz	r3, 8001016 <_sbrk_r+0x1a>
 8001014:	6023      	str	r3, [r4, #0]
 8001016:	bd38      	pop	{r3, r4, r5, pc}
 8001018:	20000228 	.word	0x20000228

0800101c <memcpy>:
 800101c:	440a      	add	r2, r1
 800101e:	4291      	cmp	r1, r2
 8001020:	f100 33ff 	add.w	r3, r0, #4294967295
 8001024:	d100      	bne.n	8001028 <memcpy+0xc>
 8001026:	4770      	bx	lr
 8001028:	b510      	push	{r4, lr}
 800102a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800102e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001032:	4291      	cmp	r1, r2
 8001034:	d1f9      	bne.n	800102a <memcpy+0xe>
 8001036:	bd10      	pop	{r4, pc}

08001038 <_realloc_r>:
 8001038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800103c:	4680      	mov	r8, r0
 800103e:	4615      	mov	r5, r2
 8001040:	460c      	mov	r4, r1
 8001042:	b921      	cbnz	r1, 800104e <_realloc_r+0x16>
 8001044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001048:	4611      	mov	r1, r2
 800104a:	f7ff bc4b 	b.w	80008e4 <_malloc_r>
 800104e:	b92a      	cbnz	r2, 800105c <_realloc_r+0x24>
 8001050:	f7ff fbdc 	bl	800080c <_free_r>
 8001054:	2400      	movs	r4, #0
 8001056:	4620      	mov	r0, r4
 8001058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800105c:	f000 f81a 	bl	8001094 <_malloc_usable_size_r>
 8001060:	4285      	cmp	r5, r0
 8001062:	4606      	mov	r6, r0
 8001064:	d802      	bhi.n	800106c <_realloc_r+0x34>
 8001066:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800106a:	d8f4      	bhi.n	8001056 <_realloc_r+0x1e>
 800106c:	4629      	mov	r1, r5
 800106e:	4640      	mov	r0, r8
 8001070:	f7ff fc38 	bl	80008e4 <_malloc_r>
 8001074:	4607      	mov	r7, r0
 8001076:	2800      	cmp	r0, #0
 8001078:	d0ec      	beq.n	8001054 <_realloc_r+0x1c>
 800107a:	42b5      	cmp	r5, r6
 800107c:	462a      	mov	r2, r5
 800107e:	4621      	mov	r1, r4
 8001080:	bf28      	it	cs
 8001082:	4632      	movcs	r2, r6
 8001084:	f7ff ffca 	bl	800101c <memcpy>
 8001088:	4621      	mov	r1, r4
 800108a:	4640      	mov	r0, r8
 800108c:	f7ff fbbe 	bl	800080c <_free_r>
 8001090:	463c      	mov	r4, r7
 8001092:	e7e0      	b.n	8001056 <_realloc_r+0x1e>

08001094 <_malloc_usable_size_r>:
 8001094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001098:	1f18      	subs	r0, r3, #4
 800109a:	2b00      	cmp	r3, #0
 800109c:	bfbc      	itt	lt
 800109e:	580b      	ldrlt	r3, [r1, r0]
 80010a0:	18c0      	addlt	r0, r0, r3
 80010a2:	4770      	bx	lr

080010a4 <_init>:
 80010a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a6:	bf00      	nop
 80010a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010aa:	bc08      	pop	{r3}
 80010ac:	469e      	mov	lr, r3
 80010ae:	4770      	bx	lr

080010b0 <_fini>:
 80010b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b2:	bf00      	nop
 80010b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010b6:	bc08      	pop	{r3}
 80010b8:	469e      	mov	lr, r3
 80010ba:	4770      	bx	lr
