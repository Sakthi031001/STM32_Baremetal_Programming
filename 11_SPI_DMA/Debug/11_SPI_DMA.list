
11_SPI_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f04  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080010c8  080010d0  000020d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080010c8  080010c8  000020d0  2**0
                  CONTENTS
  4 .ARM          00000000  080010c8  080010c8  000020d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010c8  080010d0  000020d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010c8  080010c8  000020c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080010cc  080010cc  000020cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000020d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000000  080010d0  00003000  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  080010d0  00003040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000020d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000010ec  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000436  00000000  00000000  000031ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000100  00000000  00000000  00003628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000b1  00000000  00000000  00003728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cff  00000000  00000000  000037d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000015bc  00000000  00000000  0001c4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b5a2  00000000  00000000  0001da94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9036  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003c0  00000000  00000000  000a907c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  000a943c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080010b0 	.word	0x080010b0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080010b0 	.word	0x080010b0

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	@ 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2f>:
 80009a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009a8:	bf24      	itt	cs
 80009aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b2:	d90d      	bls.n	80009d0 <__aeabi_d2f+0x30>
 80009b4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c8:	bf08      	it	eq
 80009ca:	f020 0001 	biceq.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d4:	d121      	bne.n	8000a1a <__aeabi_d2f+0x7a>
 80009d6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009da:	bfbc      	itt	lt
 80009dc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e0:	4770      	bxlt	lr
 80009e2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ea:	f1c2 0218 	rsb	r2, r2, #24
 80009ee:	f1c2 0c20 	rsb	ip, r2, #32
 80009f2:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f6:	fa20 f002 	lsr.w	r0, r0, r2
 80009fa:	bf18      	it	ne
 80009fc:	f040 0001 	orrne.w	r0, r0, #1
 8000a00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a0c:	ea40 000c 	orr.w	r0, r0, ip
 8000a10:	fa23 f302 	lsr.w	r3, r3, r2
 8000a14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a18:	e7cc      	b.n	80009b4 <__aeabi_d2f+0x14>
 8000a1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1e:	d107      	bne.n	8000a30 <__aeabi_d2f+0x90>
 8000a20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a24:	bf1e      	ittt	ne
 8000a26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a2e:	4770      	bxne	lr
 8000a30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <axdl345_cs_pin_config>:
uint8_t g_rx_cmplt;
uint8_t dummy_buff[MAX_TRANSFER_LEN+1];
uint8_t accel_buff[MAX_TRANSFER_LEN+1];

void axdl345_cs_pin_config(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= GPIOAEN;
 8000a44:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <axdl345_cs_pin_config+0x34>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a48:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <axdl345_cs_pin_config+0x34>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA0 as output pin
    GPIOA->MODER |= (1U<<0);
 8000a50:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <axdl345_cs_pin_config+0x38>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <axdl345_cs_pin_config+0x38>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U<<1);
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <axdl345_cs_pin_config+0x38>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a05      	ldr	r2, [pc, #20]	@ (8000a78 <axdl345_cs_pin_config+0x38>)
 8000a62:	f023 0302 	bic.w	r3, r3, #2
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020000 	.word	0x40020000

08000a7c <axdl345_cs_pin_set>:

void axdl345_cs_pin_set(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
    GPIOA->ODR |= (1U<<0);
 8000a80:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <axdl345_cs_pin_set+0x1c>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	4a04      	ldr	r2, [pc, #16]	@ (8000a98 <axdl345_cs_pin_set+0x1c>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6153      	str	r3, [r2, #20]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40020000 	.word	0x40020000

08000a9c <axdl345_cs_pin_reset>:

void axdl345_cs_pin_reset(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(1U<<0);
 8000aa0:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <axdl345_cs_pin_reset+0x1c>)
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <axdl345_cs_pin_reset+0x1c>)
 8000aa6:	f023 0301 	bic.w	r3, r3, #1
 8000aaa:	6153      	str	r3, [r2, #20]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40020000 	.word	0x40020000

08000abc <axdl345_range_config>:


void axdl345_range_config(uint8_t mode)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
    switch(mode)
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b03      	cmp	r3, #3
 8000aca:	d828      	bhi.n	8000b1e <axdl345_range_config+0x62>
 8000acc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ad4 <axdl345_range_config+0x18>)
 8000ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad2:	bf00      	nop
 8000ad4:	08000ae5 	.word	0x08000ae5
 8000ad8:	08000af5 	.word	0x08000af5
 8000adc:	08000b03 	.word	0x08000b03
 8000ae0:	08000b11 	.word	0x08000b11
    {
        case ADXL345_G_RANGE_2G:
            g_range = 2.0;
 8000ae4:	4921      	ldr	r1, [pc, #132]	@ (8000b6c <axdl345_range_config+0xb0>)
 8000ae6:	f04f 0200 	mov.w	r2, #0
 8000aea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000aee:	e9c1 2300 	strd	r2, r3, [r1]
            break;
 8000af2:	e015      	b.n	8000b20 <axdl345_range_config+0x64>
        
        case ADXL345_G_RANGE_4G:
            g_range = 4.0;
 8000af4:	491d      	ldr	r1, [pc, #116]	@ (8000b6c <axdl345_range_config+0xb0>)
 8000af6:	f04f 0200 	mov.w	r2, #0
 8000afa:	4b1d      	ldr	r3, [pc, #116]	@ (8000b70 <axdl345_range_config+0xb4>)
 8000afc:	e9c1 2300 	strd	r2, r3, [r1]
            break;
 8000b00:	e00e      	b.n	8000b20 <axdl345_range_config+0x64>

        case ADXL345_G_RANGE_8G:
            g_range = 8.0;
 8000b02:	491a      	ldr	r1, [pc, #104]	@ (8000b6c <axdl345_range_config+0xb0>)
 8000b04:	f04f 0200 	mov.w	r2, #0
 8000b08:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <axdl345_range_config+0xb8>)
 8000b0a:	e9c1 2300 	strd	r2, r3, [r1]
            break;
 8000b0e:	e007      	b.n	8000b20 <axdl345_range_config+0x64>
        
        case ADXL345_G_RANGE_16G:
            g_range = 16.0;
 8000b10:	4916      	ldr	r1, [pc, #88]	@ (8000b6c <axdl345_range_config+0xb0>)
 8000b12:	f04f 0200 	mov.w	r2, #0
 8000b16:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <axdl345_range_config+0xbc>)
 8000b18:	e9c1 2300 	strd	r2, r3, [r1]
            break;
 8000b1c:	e000      	b.n	8000b20 <axdl345_range_config+0x64>
        
        default:
            break;
 8000b1e:	bf00      	nop
    }

    // Set to SPI mode
    spi_data_buff[0] = ADXL345_ADDR_DATA_FORMAT;
 8000b20:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <axdl345_range_config+0xc0>)
 8000b22:	2231      	movs	r2, #49	@ 0x31
 8000b24:	701a      	strb	r2, [r3, #0]

    dma2_stream3_spi_transfer((uint32_t) spi_data_buff[0], (uint32_t) SPI_DATA_BUFF_LEN);
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <axdl345_range_config+0xc0>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 fa4b 	bl	8000fc8 <dma2_stream3_spi_transfer>

    // Wait for transfer completion
    while(!g_tx_cmplt){}
 8000b32:	bf00      	nop
 8000b34:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <axdl345_range_config+0xc4>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0fb      	beq.n	8000b34 <axdl345_range_config+0x78>

    // Reset flag
    g_tx_cmplt = 0;
 8000b3c:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <axdl345_range_config+0xc4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]

    // Configure the RANGE
    spi_data_buff[0] = ADXL345_ADDR_DATA_FORMAT;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <axdl345_range_config+0xc0>)
 8000b44:	2231      	movs	r2, #49	@ 0x31
 8000b46:	701a      	strb	r2, [r3, #0]

    dma2_stream3_spi_transfer((uint32_t) spi_data_buff[0], (uint32_t) SPI_DATA_BUFF_LEN);
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <axdl345_range_config+0xc0>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fa3a 	bl	8000fc8 <dma2_stream3_spi_transfer>

    // Wait for transfer completion
    while(!g_tx_cmplt){}
 8000b54:	bf00      	nop
 8000b56:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <axdl345_range_config+0xc4>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0fb      	beq.n	8000b56 <axdl345_range_config+0x9a>

    // Reset flag
    g_tx_cmplt = 0;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <axdl345_range_config+0xc4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]

}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000020 	.word	0x20000020
 8000b70:	40100000 	.word	0x40100000
 8000b74:	40200000 	.word	0x40200000
 8000b78:	40300000 	.word	0x40300000
 8000b7c:	20000028 	.word	0x20000028
 8000b80:	2000002a 	.word	0x2000002a

08000b84 <adxl345_accel_get>:
    // Reset flag
    g_rx_cmplt = 0;
}

float adxl345_accel_get(uint8_t high_idx, uint8_t low_idx)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	460a      	mov	r2, r1
 8000b8e:	71fb      	strb	r3, [r7, #7]
 8000b90:	4613      	mov	r3, r2
 8000b92:	71bb      	strb	r3, [r7, #6]
    int16_t rslt;
    rslt = accel_buff[high_idx]<<8 | accel_buff[low_idx];
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	4a1c      	ldr	r2, [pc, #112]	@ (8000c08 <adxl345_accel_get+0x84>)
 8000b98:	5cd3      	ldrb	r3, [r2, r3]
 8000b9a:	021b      	lsls	r3, r3, #8
 8000b9c:	b21a      	sxth	r2, r3
 8000b9e:	79bb      	ldrb	r3, [r7, #6]
 8000ba0:	4919      	ldr	r1, [pc, #100]	@ (8000c08 <adxl345_accel_get+0x84>)
 8000ba2:	5ccb      	ldrb	r3, [r1, r3]
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	81fb      	strh	r3, [r7, #14]
    if(rslt)
 8000baa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d020      	beq.n	8000bf4 <adxl345_accel_get+0x70>
    {
        return((float)- rslt) * g_range/ (float) 0x8000;
 8000bb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	ee07 3a90 	vmov	s15, r3
 8000bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bc0:	ee17 0a90 	vmov	r0, s15
 8000bc4:	f7ff fc82 	bl	80004cc <__aeabi_f2d>
 8000bc8:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <adxl345_accel_get+0x88>)
 8000bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bce:	f7ff fcd5 	bl	800057c <__aeabi_dmul>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	4610      	mov	r0, r2
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f04f 0200 	mov.w	r2, #0
 8000bde:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <adxl345_accel_get+0x8c>)
 8000be0:	f7ff fdf6 	bl	80007d0 <__aeabi_ddiv>
 8000be4:	4602      	mov	r2, r0
 8000be6:	460b      	mov	r3, r1
 8000be8:	4610      	mov	r0, r2
 8000bea:	4619      	mov	r1, r3
 8000bec:	f7ff fed8 	bl	80009a0 <__aeabi_d2f>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	e001      	b.n	8000bf8 <adxl345_accel_get+0x74>
    }
    else{
        return 0.0;
 8000bf4:	f04f 0300 	mov.w	r3, #0
    }
}
 8000bf8:	ee07 3a90 	vmov	s15, r3
 8000bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	2000002c 	.word	0x2000002c
 8000c0c:	20000020 	.word	0x20000020
 8000c10:	40e00000 	.word	0x40e00000

08000c14 <adxl345_get_x>:

float adxl345_get_x(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
    adxl345_accel_get(1, 2);
 8000c18:	2102      	movs	r1, #2
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f7ff ffb2 	bl	8000b84 <adxl345_accel_get>
    return 0.0;
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	ee07 3a90 	vmov	s15, r3
}
 8000c28:	eeb0 0a67 	vmov.f32	s0, s15
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <adxl345_get_y>:

float adxl345_get_y(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
    adxl345_accel_get(3, 4);
 8000c32:	2104      	movs	r1, #4
 8000c34:	2003      	movs	r0, #3
 8000c36:	f7ff ffa5 	bl	8000b84 <adxl345_accel_get>
    return 0.0;
 8000c3a:	f04f 0300 	mov.w	r3, #0
 8000c3e:	ee07 3a90 	vmov	s15, r3
}
 8000c42:	eeb0 0a67 	vmov.f32	s0, s15
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <adxl345_get_z>:

float adxl345_get_z(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
    adxl345_accel_get(5, 6);
 8000c4c:	2106      	movs	r1, #6
 8000c4e:	2005      	movs	r0, #5
 8000c50:	f7ff ff98 	bl	8000b84 <adxl345_accel_get>
    return 0.0;
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	ee07 3a90 	vmov	s15, r3
}
 8000c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
    if(DMA2->LISR & LISR_TCIF3)
 8000c68:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <DMA2_Stream3_IRQHandler+0x48>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d009      	beq.n	8000c88 <DMA2_Stream3_IRQHandler+0x24>
    {
        // Operation to be performed
        g_tx_cmplt = 1;
 8000c74:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <DMA2_Stream3_IRQHandler+0x4c>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]

        // Clear the flag
        DMA1->LIFCR |= LIFCR_CTCIF3;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <DMA2_Stream3_IRQHandler+0x50>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <DMA2_Stream3_IRQHandler+0x50>)
 8000c80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000c84:	6093      	str	r3, [r2, #8]
        // Operation to be performed

        // Clear the flag
        DMA1->LIFCR |= LIFCR_CTEIF3;
    }
}
 8000c86:	e00b      	b.n	8000ca0 <DMA2_Stream3_IRQHandler+0x3c>
    else if(DMA2->LISR & LISR_TEIF3)
 8000c88:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <DMA2_Stream3_IRQHandler+0x48>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d005      	beq.n	8000ca0 <DMA2_Stream3_IRQHandler+0x3c>
        DMA1->LIFCR |= LIFCR_CTEIF3;
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <DMA2_Stream3_IRQHandler+0x50>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	4a06      	ldr	r2, [pc, #24]	@ (8000cb4 <DMA2_Stream3_IRQHandler+0x50>)
 8000c9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c9e:	6093      	str	r3, [r2, #8]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40026400 	.word	0x40026400
 8000cb0:	2000002a 	.word	0x2000002a
 8000cb4:	40026000 	.word	0x40026000

08000cb8 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
    if(DMA2->LISR & LISR_TCIF2)
 8000cbc:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <DMA2_Stream2_IRQHandler+0x48>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d009      	beq.n	8000cdc <DMA2_Stream2_IRQHandler+0x24>
    {
        // Operation to be performed
        g_rx_cmplt = 1;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <DMA2_Stream2_IRQHandler+0x4c>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]

        // Clear the flag
        DMA1->LIFCR |= LIFCR_CTCIF2;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <DMA2_Stream2_IRQHandler+0x50>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <DMA2_Stream2_IRQHandler+0x50>)
 8000cd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cd8:	6093      	str	r3, [r2, #8]
        // Operation to be performed

        // Clear the flag
        DMA1->LIFCR |= LIFCR_CTEIF2;
    }
}
 8000cda:	e00b      	b.n	8000cf4 <DMA2_Stream2_IRQHandler+0x3c>
    else if(DMA2->LISR & LISR_TEIF2)
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <DMA2_Stream2_IRQHandler+0x48>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <DMA2_Stream2_IRQHandler+0x3c>
        DMA1->LIFCR |= LIFCR_CTEIF2;
 8000ce8:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <DMA2_Stream2_IRQHandler+0x50>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	4a06      	ldr	r2, [pc, #24]	@ (8000d08 <DMA2_Stream2_IRQHandler+0x50>)
 8000cee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000cf2:	6093      	str	r3, [r2, #8]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40026400 	.word	0x40026400
 8000d04:	2000002b 	.word	0x2000002b
 8000d08:	40026000 	.word	0x40026000

08000d0c <main>:

float acc_x, acc_y, acc_z;


int main ()
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0

	// Enable SPI
	spi1_dma_init();
 8000d10:	f000 f854 	bl	8000dbc <spi1_dma_init>

	// Config cs pin
	axdl345_cs_pin_config();
 8000d14:	f7ff fe94 	bl	8000a40 <axdl345_cs_pin_config>

	// Enable floating point unit
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));
 8000d18:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <main+0x64>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1e:	4a14      	ldr	r2, [pc, #80]	@ (8000d70 <main+0x64>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	// Enable tx stream
	dma2_stream3_spi_tx_init();
 8000d28:	f000 f8bc 	bl	8000ea4 <dma2_stream3_spi_tx_init>

	// Enable rx stream
	dma2_stream2_spi_rx_init();
 8000d2c:	f000 f906 	bl	8000f3c <dma2_stream2_spi_rx_init>

	// Reset cs pin
	axdl345_cs_pin_reset();
 8000d30:	f7ff feb4 	bl	8000a9c <axdl345_cs_pin_reset>

	// Config accel
	axdl345_range_config(ADXL345_G_RANGE_2G);
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff fec1 	bl	8000abc <axdl345_range_config>

	while(1)
	{
		// Reset CS pin
		axdl345_cs_pin_reset();
 8000d3a:	f7ff feaf 	bl	8000a9c <axdl345_cs_pin_reset>

		// Get Accel data
		acc_x = adxl345_get_x();
 8000d3e:	f7ff ff69 	bl	8000c14 <adxl345_get_x>
 8000d42:	eef0 7a40 	vmov.f32	s15, s0
 8000d46:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <main+0x68>)
 8000d48:	edc3 7a00 	vstr	s15, [r3]
		acc_y = adxl345_get_y();
 8000d4c:	f7ff ff6f 	bl	8000c2e <adxl345_get_y>
 8000d50:	eef0 7a40 	vmov.f32	s15, s0
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <main+0x6c>)
 8000d56:	edc3 7a00 	vstr	s15, [r3]
		acc_z = adxl345_get_z();
 8000d5a:	f7ff ff75 	bl	8000c48 <adxl345_get_z>
 8000d5e:	eef0 7a40 	vmov.f32	s15, s0
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <main+0x70>)
 8000d64:	edc3 7a00 	vstr	s15, [r3]

		// Set NCS pin
		axdl345_cs_pin_set();
 8000d68:	f7ff fe88 	bl	8000a7c <axdl345_cs_pin_set>
		axdl345_cs_pin_reset();
 8000d6c:	bf00      	nop
 8000d6e:	e7e4      	b.n	8000d3a <main+0x2e>
 8000d70:	e000ed00 	.word	0xe000ed00
 8000d74:	20000034 	.word	0x20000034
 8000d78:	20000038 	.word	0x20000038
 8000d7c:	2000003c 	.word	0x2000003c

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	@ (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <spi1_dma_init>:

#define LISR_TCIF3	    (1U<<27)
#define LISR_TCIF2	    (1U<<21)

void spi1_dma_init(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
    /************************GPIO CONFIGURATION************************/
    // Enable clock to port of SPI Pins
    RCC->AHB1ENR |= GPIOAEN;
 8000dc0:	4b35      	ldr	r3, [pc, #212]	@ (8000e98 <spi1_dma_init+0xdc>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc4:	4a34      	ldr	r2, [pc, #208]	@ (8000e98 <spi1_dma_init+0xdc>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6313      	str	r3, [r2, #48]	@ 0x30
    /*  pin 5 ->    11  10
        pin 6 ->    13  12
        pin 7 ->    15  14
        1   0 ->    Alternate function mode*/
        
    GPIOA->MODER |= (1U<<11)    | (1U<<13)    | (1U<<15); // Setting 1 for MODER 11, 13, 15
 8000dcc:	4b33      	ldr	r3, [pc, #204]	@ (8000e9c <spi1_dma_init+0xe0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a32      	ldr	r2, [pc, #200]	@ (8000e9c <spi1_dma_init+0xe0>)
 8000dd2:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000dd6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= (~(1U<<10)) & (~(1U<<12)) & (~(1U<<14)); // Setting 0 for MODER 10, 12, 14
 8000dd8:	4b30      	ldr	r3, [pc, #192]	@ (8000e9c <spi1_dma_init+0xe0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a2f      	ldr	r2, [pc, #188]	@ (8000e9c <spi1_dma_init+0xe0>)
 8000dde:	f423 43a8 	bic.w	r3, r3, #21504	@ 0x5400
 8000de2:	6013      	str	r3, [r2, #0]
        pin 6 ->    27  26  25  24
        pin 7 ->    31  30  29  28

        AF5   ->    0   1   0   1*/
    // Pin 5
    GPIOA->AFR[0] &= (~(1U<<23)) & (~(1U<<21));
 8000de4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e9c <spi1_dma_init+0xe0>)
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	4a2c      	ldr	r2, [pc, #176]	@ (8000e9c <spi1_dma_init+0xe0>)
 8000dea:	f423 0320 	bic.w	r3, r3, #10485760	@ 0xa00000
 8000dee:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1U<<22) | (1U<<20);
 8000df0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e9c <spi1_dma_init+0xe0>)
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	4a29      	ldr	r2, [pc, #164]	@ (8000e9c <spi1_dma_init+0xe0>)
 8000df6:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000dfa:	6213      	str	r3, [r2, #32]
    // Pin 6
    GPIOA->AFR[0] &= (~(1U<<27)) & (~(1U<<25));
 8000dfc:	4b27      	ldr	r3, [pc, #156]	@ (8000e9c <spi1_dma_init+0xe0>)
 8000dfe:	6a1b      	ldr	r3, [r3, #32]
 8000e00:	4a26      	ldr	r2, [pc, #152]	@ (8000e9c <spi1_dma_init+0xe0>)
 8000e02:	f023 6320 	bic.w	r3, r3, #167772160	@ 0xa000000
 8000e06:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1U<<26) | (1U<<24);
 8000e08:	4b24      	ldr	r3, [pc, #144]	@ (8000e9c <spi1_dma_init+0xe0>)
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	4a23      	ldr	r2, [pc, #140]	@ (8000e9c <spi1_dma_init+0xe0>)
 8000e0e:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 8000e12:	6213      	str	r3, [r2, #32]
    // Pin 7
    GPIOA->AFR[0] &= (~(1U<<31)) & (~(1U<<29));
 8000e14:	4b21      	ldr	r3, [pc, #132]	@ (8000e9c <spi1_dma_init+0xe0>)
 8000e16:	6a1b      	ldr	r3, [r3, #32]
 8000e18:	4a20      	ldr	r2, [pc, #128]	@ (8000e9c <spi1_dma_init+0xe0>)
 8000e1a:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000e1e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1U<<30) | (1U<<28);
 8000e20:	4b1e      	ldr	r3, [pc, #120]	@ (8000e9c <spi1_dma_init+0xe0>)
 8000e22:	6a1b      	ldr	r3, [r3, #32]
 8000e24:	4a1d      	ldr	r2, [pc, #116]	@ (8000e9c <spi1_dma_init+0xe0>)
 8000e26:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8000e2a:	6213      	str	r3, [r2, #32]
    

    /************************SPI CONFIGURATION************************/
    // Enable clock access to SPI1 modulde
    RCC->AHB2ENR |= SPI1EN;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e98 <spi1_dma_init+0xdc>)
 8000e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e30:	4a19      	ldr	r2, [pc, #100]	@ (8000e98 <spi1_dma_init+0xdc>)
 8000e32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e36:	6353      	str	r3, [r2, #52]	@ 0x34

    // Set software slave management
    SPI1->CR1 |= CR1SSM | CR1SSI;
 8000e38:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <spi1_dma_init+0xe4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a18      	ldr	r2, [pc, #96]	@ (8000ea0 <spi1_dma_init+0xe4>)
 8000e3e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000e42:	6013      	str	r3, [r2, #0]

    // Set SPI to master mode
    SPI1->CR1 |= CR1MSTR;
 8000e44:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <spi1_dma_init+0xe4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a15      	ldr	r2, [pc, #84]	@ (8000ea0 <spi1_dma_init+0xe4>)
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	6013      	str	r3, [r2, #0]

    // Set clock phase(CPHA) and clock polarity(CPOL)
    SPI1->CR1 |= SPI_CR1_BR_0 | CR1CPHA | CR1CPOL;
 8000e50:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <spi1_dma_init+0xe4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a12      	ldr	r2, [pc, #72]	@ (8000ea0 <spi1_dma_init+0xe4>)
 8000e56:	f043 030b 	orr.w	r3, r3, #11
 8000e5a:	6013      	str	r3, [r2, #0]

    // Set Clock devider : fpclk/4
    /*Baudrate control  ->  5   4   3
    for fpclk/4         ->  0   0   1*/
    SPI1->CR1 &= (~(1U<<5)) & (~(1U<<4));
 8000e5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <spi1_dma_init+0xe4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea0 <spi1_dma_init+0xe4>)
 8000e62:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000e66:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (1U<<3);
 8000e68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <spi1_dma_init+0xe4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea0 <spi1_dma_init+0xe4>)
 8000e6e:	f043 0308 	orr.w	r3, r3, #8
 8000e72:	6013      	str	r3, [r2, #0]

    // Select to use DMA
    SPI1->CR2 |= CR2RXDMAEN | CR2TXDMAEN;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <spi1_dma_init+0xe4>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	4a09      	ldr	r2, [pc, #36]	@ (8000ea0 <spi1_dma_init+0xe4>)
 8000e7a:	f043 0303 	orr.w	r3, r3, #3
 8000e7e:	6053      	str	r3, [r2, #4]

    // Enable SPI
    SPI1->CR1 |= CR1SPE;
 8000e80:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <spi1_dma_init+0xe4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a06      	ldr	r2, [pc, #24]	@ (8000ea0 <spi1_dma_init+0xe4>)
 8000e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40013000 	.word	0x40013000

08000ea4 <dma2_stream3_spi_tx_init>:

void dma2_stream3_spi_tx_init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    /******************************************************* DMA CONFIGURATION *******************************************************/
	// Enable clock access to DMA
    RCC->AHB1ENR |= DMA2EN;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	@ (8000f34 <dma2_stream3_spi_tx_init+0x90>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eac:	4a21      	ldr	r2, [pc, #132]	@ (8000f34 <dma2_stream3_spi_tx_init+0x90>)
 8000eae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000eb2:	6313      	str	r3, [r2, #48]	@ 0x30

    // Disable DMA Stream
    DMA2_Stream3->CR = 0;
 8000eb4:	4b20      	ldr	r3, [pc, #128]	@ (8000f38 <dma2_stream3_spi_tx_init+0x94>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]

    // Wait till DMA Stream is disabled
    while((DMA2_Stream3->CR & DMA_SCR_EN)){}
 8000eba:	bf00      	nop
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <dma2_stream3_spi_tx_init+0x94>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1f9      	bne.n	8000ebc <dma2_stream3_spi_tx_init+0x18>

    /******************************************************* Configure DMA Stram parameters *******************************************************/
    // Enable memory address increment
    DMA2_Stream3->CR |= DMA_SCR_MINC;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f38 <dma2_stream3_spi_tx_init+0x94>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8000f38 <dma2_stream3_spi_tx_init+0x94>)
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ed2:	6013      	str	r3, [r2, #0]

    // Set transfer direction : memory to peripheral -> 1   0
    DMA2_Stream3->CR &= (~(1U<<7));
 8000ed4:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <dma2_stream3_spi_tx_init+0x94>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a17      	ldr	r2, [pc, #92]	@ (8000f38 <dma2_stream3_spi_tx_init+0x94>)
 8000eda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000ede:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |=  (1U<<6);
 8000ee0:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <dma2_stream3_spi_tx_init+0x94>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a14      	ldr	r2, [pc, #80]	@ (8000f38 <dma2_stream3_spi_tx_init+0x94>)
 8000ee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eea:	6013      	str	r3, [r2, #0]

    // Enable transfer complete interrupt
    DMA2_Stream3->CR |= DMA_SCR_TCIE;
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <dma2_stream3_spi_tx_init+0x94>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a11      	ldr	r2, [pc, #68]	@ (8000f38 <dma2_stream3_spi_tx_init+0x94>)
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	6013      	str	r3, [r2, #0]

    // Enable transfer Error interrupt
    DMA2_Stream3->CR |= DMA_SCR_TEIE;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <dma2_stream3_spi_tx_init+0x94>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0e      	ldr	r2, [pc, #56]	@ (8000f38 <dma2_stream3_spi_tx_init+0x94>)
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	6013      	str	r3, [r2, #0]

    // Disable direct mode
	DMA2_Stream3->FCR |= DMA_SFCR_DMDIS;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <dma2_stream3_spi_tx_init+0x94>)
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	4a0b      	ldr	r2, [pc, #44]	@ (8000f38 <dma2_stream3_spi_tx_init+0x94>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6153      	str	r3, [r2, #20]

    // Set DMA FIFO threshold
    DMA2_Stream3->FCR |= (1U<<0);
 8000f10:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <dma2_stream3_spi_tx_init+0x94>)
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	4a08      	ldr	r2, [pc, #32]	@ (8000f38 <dma2_stream3_spi_tx_init+0x94>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6153      	str	r3, [r2, #20]
	DMA2_Stream3->FCR |= (1U<<1);
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <dma2_stream3_spi_tx_init+0x94>)
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	4a05      	ldr	r2, [pc, #20]	@ (8000f38 <dma2_stream3_spi_tx_init+0x94>)
 8000f22:	f043 0302 	orr.w	r3, r3, #2
 8000f26:	6153      	str	r3, [r2, #20]

    // Enable DMA interrupt in NVIC
    NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f28:	203b      	movs	r0, #59	@ 0x3b
 8000f2a:	f7ff ff29 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40026458 	.word	0x40026458

08000f3c <dma2_stream2_spi_rx_init>:


void dma2_stream2_spi_rx_init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
    /******************************************************* DMA CONFIGURATION *******************************************************/
	// Enable clock access to DMA
    RCC->AHB1ENR |= DMA2EN;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc0 <dma2_stream2_spi_rx_init+0x84>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f44:	4a1e      	ldr	r2, [pc, #120]	@ (8000fc0 <dma2_stream2_spi_rx_init+0x84>)
 8000f46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f4a:	6313      	str	r3, [r2, #48]	@ 0x30

    // Disable DMA Stream
    DMA2_Stream2->CR = 0;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc4 <dma2_stream2_spi_rx_init+0x88>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]

    // Wait till DMA Stream is disabled
    while((DMA2_Stream2->CR & DMA_SCR_EN)){}
 8000f52:	bf00      	nop
 8000f54:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <dma2_stream2_spi_rx_init+0x88>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f9      	bne.n	8000f54 <dma2_stream2_spi_rx_init+0x18>

    /******************************************************* Configure DMA Stram parameters *******************************************************/
    // Enable memory address increment
    DMA2_Stream2->CR |= DMA_SCR_MINC;
 8000f60:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <dma2_stream2_spi_rx_init+0x88>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a17      	ldr	r2, [pc, #92]	@ (8000fc4 <dma2_stream2_spi_rx_init+0x88>)
 8000f66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f6a:	6013      	str	r3, [r2, #0]

    // Set transfer direction : Peripheral to memory -> 0   0
    DMA2_Stream2->CR &= (~(1U<<7)) & (~(1U<<6));
 8000f6c:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <dma2_stream2_spi_rx_init+0x88>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a14      	ldr	r2, [pc, #80]	@ (8000fc4 <dma2_stream2_spi_rx_init+0x88>)
 8000f72:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000f76:	6013      	str	r3, [r2, #0]

    // Enable transfer complete interrupt
    DMA2_Stream2->CR |= DMA_SCR_TCIE;
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <dma2_stream2_spi_rx_init+0x88>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a11      	ldr	r2, [pc, #68]	@ (8000fc4 <dma2_stream2_spi_rx_init+0x88>)
 8000f7e:	f043 0310 	orr.w	r3, r3, #16
 8000f82:	6013      	str	r3, [r2, #0]

    // Enable transfer Error interrupt
    DMA2_Stream2->CR |= DMA_SCR_TEIE;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <dma2_stream2_spi_rx_init+0x88>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc4 <dma2_stream2_spi_rx_init+0x88>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	6013      	str	r3, [r2, #0]

    // Disable direct mode
    DMA2_Stream2->FCR |= DMA_SFCR_DMDIS;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <dma2_stream2_spi_rx_init+0x88>)
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc4 <dma2_stream2_spi_rx_init+0x88>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6153      	str	r3, [r2, #20]

    // Set DMA FIFO threshold
    DMA2_Stream2->FCR |= (1U<<0);
 8000f9c:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <dma2_stream2_spi_rx_init+0x88>)
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	4a08      	ldr	r2, [pc, #32]	@ (8000fc4 <dma2_stream2_spi_rx_init+0x88>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6153      	str	r3, [r2, #20]
	DMA2_Stream2->FCR |= (1U<<1);
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <dma2_stream2_spi_rx_init+0x88>)
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	4a05      	ldr	r2, [pc, #20]	@ (8000fc4 <dma2_stream2_spi_rx_init+0x88>)
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	6153      	str	r3, [r2, #20]

    // Enable DMA interrupt in NVIC
    NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000fb4:	203a      	movs	r0, #58	@ 0x3a
 8000fb6:	f7ff fee3 	bl	8000d80 <__NVIC_EnableIRQ>

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40026440 	.word	0x40026440

08000fc8 <dma2_stream3_spi_transfer>:

void dma2_stream3_spi_transfer(uint32_t msg_to_send, uint32_t msg_len)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
    // Clear Interrupt flags
    DMA2->LIFCR |= LIFCR_CTEIF3 | LIFCR_CTCIF3;
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <dma2_stream3_spi_transfer+0x40>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8001008 <dma2_stream3_spi_transfer+0x40>)
 8000fd8:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 8000fdc:	6093      	str	r3, [r2, #8]

    // Set peripheral address
    DMA2_Stream3->PAR = (uint32_t)(&(SPI1->DR));
 8000fde:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <dma2_stream3_spi_transfer+0x44>)
 8000fe0:	4a0b      	ldr	r2, [pc, #44]	@ (8001010 <dma2_stream3_spi_transfer+0x48>)
 8000fe2:	609a      	str	r2, [r3, #8]

    // Set Memory address
    DMA2_Stream3->M0AR = msg_to_send;
 8000fe4:	4a09      	ldr	r2, [pc, #36]	@ (800100c <dma2_stream3_spi_transfer+0x44>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	60d3      	str	r3, [r2, #12]

    // Set Transfer length
    DMA2_Stream3->NDTR  = msg_len;
 8000fea:	4a08      	ldr	r2, [pc, #32]	@ (800100c <dma2_stream3_spi_transfer+0x44>)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	6053      	str	r3, [r2, #4]

    // Enable DMA Stream
    DMA2_Stream3->CR |= DMA_SCR_EN;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <dma2_stream3_spi_transfer+0x44>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a05      	ldr	r2, [pc, #20]	@ (800100c <dma2_stream3_spi_transfer+0x44>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	40026400 	.word	0x40026400
 800100c:	40026458 	.word	0x40026458
 8001010:	4001300c 	.word	0x4001300c

08001014 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001014:	480d      	ldr	r0, [pc, #52]	@ (800104c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001016:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001018:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800101c:	480c      	ldr	r0, [pc, #48]	@ (8001050 <LoopForever+0x6>)
  ldr r1, =_edata
 800101e:	490d      	ldr	r1, [pc, #52]	@ (8001054 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <LoopForever+0xe>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001034:	4c0a      	ldr	r4, [pc, #40]	@ (8001060 <LoopForever+0x16>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001042:	f000 f811 	bl	8001068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001046:	f7ff fe61 	bl	8000d0c <main>

0800104a <LoopForever>:

LoopForever:
  b LoopForever
 800104a:	e7fe      	b.n	800104a <LoopForever>
  ldr   r0, =_estack
 800104c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001058:	080010d0 	.word	0x080010d0
  ldr r2, =_sbss
 800105c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001060:	20000040 	.word	0x20000040

08001064 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC_IRQHandler>
	...

08001068 <__libc_init_array>:
 8001068:	b570      	push	{r4, r5, r6, lr}
 800106a:	4d0d      	ldr	r5, [pc, #52]	@ (80010a0 <__libc_init_array+0x38>)
 800106c:	4c0d      	ldr	r4, [pc, #52]	@ (80010a4 <__libc_init_array+0x3c>)
 800106e:	1b64      	subs	r4, r4, r5
 8001070:	10a4      	asrs	r4, r4, #2
 8001072:	2600      	movs	r6, #0
 8001074:	42a6      	cmp	r6, r4
 8001076:	d109      	bne.n	800108c <__libc_init_array+0x24>
 8001078:	4d0b      	ldr	r5, [pc, #44]	@ (80010a8 <__libc_init_array+0x40>)
 800107a:	4c0c      	ldr	r4, [pc, #48]	@ (80010ac <__libc_init_array+0x44>)
 800107c:	f000 f818 	bl	80010b0 <_init>
 8001080:	1b64      	subs	r4, r4, r5
 8001082:	10a4      	asrs	r4, r4, #2
 8001084:	2600      	movs	r6, #0
 8001086:	42a6      	cmp	r6, r4
 8001088:	d105      	bne.n	8001096 <__libc_init_array+0x2e>
 800108a:	bd70      	pop	{r4, r5, r6, pc}
 800108c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001090:	4798      	blx	r3
 8001092:	3601      	adds	r6, #1
 8001094:	e7ee      	b.n	8001074 <__libc_init_array+0xc>
 8001096:	f855 3b04 	ldr.w	r3, [r5], #4
 800109a:	4798      	blx	r3
 800109c:	3601      	adds	r6, #1
 800109e:	e7f2      	b.n	8001086 <__libc_init_array+0x1e>
 80010a0:	080010c8 	.word	0x080010c8
 80010a4:	080010c8 	.word	0x080010c8
 80010a8:	080010c8 	.word	0x080010c8
 80010ac:	080010cc 	.word	0x080010cc

080010b0 <_init>:
 80010b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b2:	bf00      	nop
 80010b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010b6:	bc08      	pop	{r3}
 80010b8:	469e      	mov	lr, r3
 80010ba:	4770      	bx	lr

080010bc <_fini>:
 80010bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010be:	bf00      	nop
 80010c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010c2:	bc08      	pop	{r3}
 80010c4:	469e      	mov	lr, r3
 80010c6:	4770      	bx	lr
