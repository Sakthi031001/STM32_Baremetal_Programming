
9_ADC_TIM_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001484  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001654  08001654  00002654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016a4  080016a4  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  080016a4  080016a4  000026a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080016ac  080016ac  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016ac  080016ac  000026ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080016b0  080016b0  000026b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080016b4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000005c  08001710  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08001710  000031e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017f6  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006bd  00000000  00000000  00004882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  00004f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000010b  00000000  00000000  000050c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a99d  00000000  00000000  000051d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000283e  00000000  00000000  0001fb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090de1  00000000  00000000  000223ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b318f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c3c  00000000  00000000  000b31d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000b3e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800163c 	.word	0x0800163c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	0800163c 	.word	0x0800163c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db0b      	blt.n	80002da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4907      	ldr	r1, [pc, #28]	@ (80002e8 <__NVIC_EnableIRQ+0x38>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000e100 	.word	0xe000e100

080002ec <adc_tim_dma_init>:

//uint16_t adc_raw_data[NUM_OF_CHANNELS];
uint16_t adc_raw_data[NUM_OF_SAMPLES];

void adc_tim_dma_init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	/******************************************************* GPIO CONFIGURATION *******************************************************/
	// Enable Clock access to the ADC GPIO pin's port
	RCC->AHB1ENR |= GPIOAEN;
 80002f0:	4b59      	ldr	r3, [pc, #356]	@ (8000458 <adc_tim_dma_init+0x16c>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f4:	4a58      	ldr	r2, [pc, #352]	@ (8000458 <adc_tim_dma_init+0x16c>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6313      	str	r3, [r2, #48]	@ 0x30

	// Set PA0 and PA1 mode to analog mode
	GPIOA->MODER = GPIOA->MODER | (1U<<0) | (1U<<1);	//PIN 0
 80002fc:	4b57      	ldr	r3, [pc, #348]	@ (800045c <adc_tim_dma_init+0x170>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a56      	ldr	r2, [pc, #344]	@ (800045c <adc_tim_dma_init+0x170>)
 8000302:	f043 0303 	orr.w	r3, r3, #3
 8000306:	6013      	str	r3, [r2, #0]
	GPIOA->MODER = GPIOA->MODER | (1U<<2) | (1U<<3);	//PIN 1
 8000308:	4b54      	ldr	r3, [pc, #336]	@ (800045c <adc_tim_dma_init+0x170>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a53      	ldr	r2, [pc, #332]	@ (800045c <adc_tim_dma_init+0x170>)
 800030e:	f043 030c 	orr.w	r3, r3, #12
 8000312:	6013      	str	r3, [r2, #0]

	/******************************************************* ADC CONFIGURATION *******************************************************/
	// Enable Clock access to the ADC
	RCC->APB2ENR |= ADC1EN;
 8000314:	4b50      	ldr	r3, [pc, #320]	@ (8000458 <adc_tim_dma_init+0x16c>)
 8000316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000318:	4a4f      	ldr	r2, [pc, #316]	@ (8000458 <adc_tim_dma_init+0x16c>)
 800031a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800031e:	6453      	str	r3, [r2, #68]	@ 0x44

	// Enable scan mode
	//ADC1->CR1 |= CR1_SCAN;

	// Select to use DMA
	ADC1->CR2 = ADC1->CR2 | CR2_DMA | CR2_DDS;
 8000320:	4b4f      	ldr	r3, [pc, #316]	@ (8000460 <adc_tim_dma_init+0x174>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	4a4e      	ldr	r2, [pc, #312]	@ (8000460 <adc_tim_dma_init+0x174>)
 8000326:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800032a:	6093      	str	r3, [r2, #8]

	// Select External trigger on raising edge
	ADC1->CR2 = ADC1->CR2 | (1U<<28);
 800032c:	4b4c      	ldr	r3, [pc, #304]	@ (8000460 <adc_tim_dma_init+0x174>)
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	4a4b      	ldr	r2, [pc, #300]	@ (8000460 <adc_tim_dma_init+0x174>)
 8000332:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000336:	6093      	str	r3, [r2, #8]
	ADC1->CR2 = ADC1->CR2 & (~(1U<<29));
 8000338:	4b49      	ldr	r3, [pc, #292]	@ (8000460 <adc_tim_dma_init+0x174>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	4a48      	ldr	r2, [pc, #288]	@ (8000460 <adc_tim_dma_init+0x174>)
 800033e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000342:	6093      	str	r3, [r2, #8]

	// Select Timer 2 TRGO event

	ADC1->CR2 = ADC1->CR2 | (1U<<25) | (1U<<26);
 8000344:	4b46      	ldr	r3, [pc, #280]	@ (8000460 <adc_tim_dma_init+0x174>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	4a45      	ldr	r2, [pc, #276]	@ (8000460 <adc_tim_dma_init+0x174>)
 800034a:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 800034e:	6093      	str	r3, [r2, #8]
	ADC1->CR2 = ADC1->CR2 & (~(1U<<24)) & (~(1U<<27));
 8000350:	4b43      	ldr	r3, [pc, #268]	@ (8000460 <adc_tim_dma_init+0x174>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	4a42      	ldr	r2, [pc, #264]	@ (8000460 <adc_tim_dma_init+0x174>)
 8000356:	f023 6310 	bic.w	r3, r3, #150994944	@ 0x9000000
 800035a:	6093      	str	r3, [r2, #8]

	/******************************************************* DMA CONFIGURATION *******************************************************/
	// Enable clock access to DMA
	RCC->AHB1ENR |= DMA2EN;
 800035c:	4b3e      	ldr	r3, [pc, #248]	@ (8000458 <adc_tim_dma_init+0x16c>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000360:	4a3d      	ldr	r2, [pc, #244]	@ (8000458 <adc_tim_dma_init+0x16c>)
 8000362:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000366:	6313      	str	r3, [r2, #48]	@ 0x30

	// Disable DMA
	DMA2_Stream0->CR &= ~DMA_SCR_EN;
 8000368:	4b3e      	ldr	r3, [pc, #248]	@ (8000464 <adc_tim_dma_init+0x178>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a3d      	ldr	r2, [pc, #244]	@ (8000464 <adc_tim_dma_init+0x178>)
 800036e:	f023 0301 	bic.w	r3, r3, #1
 8000372:	6013      	str	r3, [r2, #0]

	// Wait till DMA is disabled
	while((DMA2_Stream0->CR & DMA_SCR_EN)){}
 8000374:	bf00      	nop
 8000376:	4b3b      	ldr	r3, [pc, #236]	@ (8000464 <adc_tim_dma_init+0x178>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	2b00      	cmp	r3, #0
 8000380:	d1f9      	bne.n	8000376 <adc_tim_dma_init+0x8a>

	// Enable Circular mode
	DMA2_Stream0->CR |= DMA_SCR_CIRC;
 8000382:	4b38      	ldr	r3, [pc, #224]	@ (8000464 <adc_tim_dma_init+0x178>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a37      	ldr	r2, [pc, #220]	@ (8000464 <adc_tim_dma_init+0x178>)
 8000388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800038c:	6013      	str	r3, [r2, #0]

	// Set Memory transfer size
	DMA2_Stream0->CR |=  (1U<<13);
 800038e:	4b35      	ldr	r3, [pc, #212]	@ (8000464 <adc_tim_dma_init+0x178>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a34      	ldr	r2, [pc, #208]	@ (8000464 <adc_tim_dma_init+0x178>)
 8000394:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000398:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~(1U<<14);
 800039a:	4b32      	ldr	r3, [pc, #200]	@ (8000464 <adc_tim_dma_init+0x178>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a31      	ldr	r2, [pc, #196]	@ (8000464 <adc_tim_dma_init+0x178>)
 80003a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80003a4:	6013      	str	r3, [r2, #0]

	// Set Peripheral transfer size
	DMA2_Stream0->CR |=	 (1U<<11);
 80003a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000464 <adc_tim_dma_init+0x178>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a2e      	ldr	r2, [pc, #184]	@ (8000464 <adc_tim_dma_init+0x178>)
 80003ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80003b0:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~(1U<<12);
 80003b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000464 <adc_tim_dma_init+0x178>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a2b      	ldr	r2, [pc, #172]	@ (8000464 <adc_tim_dma_init+0x178>)
 80003b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003bc:	6013      	str	r3, [r2, #0]

	// Enable Memory increment
	DMA2_Stream0->CR |= DMA_SCR_MINC;
 80003be:	4b29      	ldr	r3, [pc, #164]	@ (8000464 <adc_tim_dma_init+0x178>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a28      	ldr	r2, [pc, #160]	@ (8000464 <adc_tim_dma_init+0x178>)
 80003c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003c8:	6013      	str	r3, [r2, #0]

	// Enable transfer complete interrupt
	DMA2_Stream0->CR |= DMA_SCR_TCIE;
 80003ca:	4b26      	ldr	r3, [pc, #152]	@ (8000464 <adc_tim_dma_init+0x178>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a25      	ldr	r2, [pc, #148]	@ (8000464 <adc_tim_dma_init+0x178>)
 80003d0:	f043 0310 	orr.w	r3, r3, #16
 80003d4:	6013      	str	r3, [r2, #0]

	// Enable DMA interrupt in NVIC
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80003d6:	2038      	movs	r0, #56	@ 0x38
 80003d8:	f7ff ff6a 	bl	80002b0 <__NVIC_EnableIRQ>

	// Set peripheral address
	DMA2_Stream0->PAR = (uint32_t)(&(ADC1->DR));
 80003dc:	4b21      	ldr	r3, [pc, #132]	@ (8000464 <adc_tim_dma_init+0x178>)
 80003de:	4a22      	ldr	r2, [pc, #136]	@ (8000468 <adc_tim_dma_init+0x17c>)
 80003e0:	609a      	str	r2, [r3, #8]

	// Set Memory address
	DMA2_Stream0->M0AR = (uint32_t)(&adc_raw_data);
 80003e2:	4b20      	ldr	r3, [pc, #128]	@ (8000464 <adc_tim_dma_init+0x178>)
 80003e4:	4a21      	ldr	r2, [pc, #132]	@ (800046c <adc_tim_dma_init+0x180>)
 80003e6:	60da      	str	r2, [r3, #12]

	// Set number of transfer
	DMA2_Stream0->NDTR  = (uint16_t)(NUM_OF_SAMPLES);
 80003e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000464 <adc_tim_dma_init+0x178>)
 80003ea:	220a      	movs	r2, #10
 80003ec:	605a      	str	r2, [r3, #4]

	/******************************************************* TIMER CONFIGURATION *******************************************************/

	// Configure timer periods to 100Hz (i.e.) ADC is going to be sampling at a 100Hz rate, every 10ms.
	// Enable clock access to TIM2
	RCC->APB1ENR = RCC->APB1ENR | TIM2EN;
 80003ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000458 <adc_tim_dma_init+0x16c>)
 80003f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003f2:	4a19      	ldr	r2, [pc, #100]	@ (8000458 <adc_tim_dma_init+0x16c>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6413      	str	r3, [r2, #64]	@ 0x40

	// Set TIM pre-scalar value
	TIM2->PSC = 16000 - 1; // 16,000,000 / 16,000 = 1000
 80003fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003fe:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000402:	629a      	str	r2, [r3, #40]	@ 0x28

	// Set TIM auto-reload values
	TIM2->ARR = 10 - 1; // 1000 / 10 = 100Hz
 8000404:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000408:	2209      	movs	r2, #9
 800040a:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Configure Master mode selection bits
	TIM2->CR2 = TIM2->CR2 & (~(1U<<4)) & (~(1U<<6)); //bit 4 and 6 to zero
 800040c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000416:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 800041a:	6053      	str	r3, [r2, #4]
	TIM2->CR2 = TIM2->CR2 | (1U<<5);
 800041c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000426:	f043 0320 	orr.w	r3, r3, #32
 800042a:	6053      	str	r3, [r2, #4]

	/******************************************************* ENABLE MODULES *******************************************************/
	// Enable ADC
	ADC1->CR2 |= CR2_ADCON;
 800042c:	4b0c      	ldr	r3, [pc, #48]	@ (8000460 <adc_tim_dma_init+0x174>)
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	4a0b      	ldr	r2, [pc, #44]	@ (8000460 <adc_tim_dma_init+0x174>)
 8000432:	f043 0301 	orr.w	r3, r3, #1
 8000436:	6093      	str	r3, [r2, #8]

	// Start ADC
	//ADC1->CR2 |= CR2_SWSTART;

	// Enable DMA Stream
	DMA2_Stream0->CR |= DMA_SCR_EN;
 8000438:	4b0a      	ldr	r3, [pc, #40]	@ (8000464 <adc_tim_dma_init+0x178>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a09      	ldr	r2, [pc, #36]	@ (8000464 <adc_tim_dma_init+0x178>)
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	6013      	str	r3, [r2, #0]

	// Enable Timers
	TIM2->CR1 = TIM2->CR1 | CR1CEN;
 8000444:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	6013      	str	r3, [r2, #0]

}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40023800 	.word	0x40023800
 800045c:	40020000 	.word	0x40020000
 8000460:	40012000 	.word	0x40012000
 8000464:	40026410 	.word	0x40026410
 8000468:	4001204c 	.word	0x4001204c
 800046c:	20000078 	.word	0x20000078

08000470 <main>:
extern uint16_t adc_raw_data[NUM_OF_SAMPLES];

volatile uint8_t g_transfer_complete;

int main()
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
	g_transfer_complete = 0;
 8000476:	4b16      	ldr	r3, [pc, #88]	@ (80004d0 <main+0x60>)
 8000478:	2200      	movs	r2, #0
 800047a:	701a      	strb	r2, [r3, #0]
	uart2_tx_init();
 800047c:	f000 f8fa 	bl	8000674 <uart2_tx_init>
	adc_tim_dma_init();
 8000480:	f7ff ff34 	bl	80002ec <adc_tim_dma_init>

	while(1)
	{
		if(g_transfer_complete)
 8000484:	4b12      	ldr	r3, [pc, #72]	@ (80004d0 <main+0x60>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b00      	cmp	r3, #0
 800048c:	d014      	beq.n	80004b8 <main+0x48>
		{
			g_transfer_complete = 0;
 800048e:	4b10      	ldr	r3, [pc, #64]	@ (80004d0 <main+0x60>)
 8000490:	2200      	movs	r2, #0
 8000492:	701a      	strb	r2, [r3, #0]

			for(int i=0; i < NUM_OF_SAMPLES; i++)
 8000494:	2300      	movs	r3, #0
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	e00b      	b.n	80004b2 <main+0x42>
			{
				printf("SAMPLE NUMBER [%d] : %d\n\r", i, adc_raw_data[i]);
 800049a:	4a0e      	ldr	r2, [pc, #56]	@ (80004d4 <main+0x64>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004a2:	461a      	mov	r2, r3
 80004a4:	6879      	ldr	r1, [r7, #4]
 80004a6:	480c      	ldr	r0, [pc, #48]	@ (80004d8 <main+0x68>)
 80004a8:	f000 fa5a 	bl	8000960 <iprintf>
			for(int i=0; i < NUM_OF_SAMPLES; i++)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	3301      	adds	r3, #1
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2b09      	cmp	r3, #9
 80004b6:	ddf0      	ble.n	800049a <main+0x2a>
			}
		}

		for(int i=0; i<90000; i++){}
 80004b8:	2300      	movs	r3, #0
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	e002      	b.n	80004c4 <main+0x54>
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	3301      	adds	r3, #1
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	4a05      	ldr	r2, [pc, #20]	@ (80004dc <main+0x6c>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	ddf8      	ble.n	80004be <main+0x4e>
		if(g_transfer_complete)
 80004cc:	e7da      	b.n	8000484 <main+0x14>
 80004ce:	bf00      	nop
 80004d0:	2000008c 	.word	0x2000008c
 80004d4:	20000078 	.word	0x20000078
 80004d8:	08001654 	.word	0x08001654
 80004dc:	00015f8f 	.word	0x00015f8f

080004e0 <DMA2_Stream0_IRQHandler>:
	}
}

void DMA2_Stream0_IRQHandler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
	// Check if transfer control interrupt occurred
	if((DMA2->LISR) & LISR_TCIF0)
 80004e4:	4b09      	ldr	r3, [pc, #36]	@ (800050c <DMA2_Stream0_IRQHandler+0x2c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f003 0320 	and.w	r3, r3, #32
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d008      	beq.n	8000502 <DMA2_Stream0_IRQHandler+0x22>
	{
		g_transfer_complete =  1;
 80004f0:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <DMA2_Stream0_IRQHandler+0x30>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]

		// Clear flag
		DMA2->LIFCR |= LIFCR_CTCIF0;
 80004f6:	4b05      	ldr	r3, [pc, #20]	@ (800050c <DMA2_Stream0_IRQHandler+0x2c>)
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	4a04      	ldr	r2, [pc, #16]	@ (800050c <DMA2_Stream0_IRQHandler+0x2c>)
 80004fc:	f043 0320 	orr.w	r3, r3, #32
 8000500:	6093      	str	r3, [r2, #8]
	}
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	40026400 	.word	0x40026400
 8000510:	2000008c 	.word	0x2000008c

08000514 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e00a      	b.n	800053c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000526:	f3af 8000 	nop.w
 800052a:	4601      	mov	r1, r0
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	60ba      	str	r2, [r7, #8]
 8000532:	b2ca      	uxtb	r2, r1
 8000534:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	3301      	adds	r3, #1
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	429a      	cmp	r2, r3
 8000542:	dbf0      	blt.n	8000526 <_read+0x12>
  }

  return len;
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b086      	sub	sp, #24
 8000552:	af00      	add	r7, sp, #0
 8000554:	60f8      	str	r0, [r7, #12]
 8000556:	60b9      	str	r1, [r7, #8]
 8000558:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	e009      	b.n	8000574 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	60ba      	str	r2, [r7, #8]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f000 f877 	bl	800065c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	3301      	adds	r3, #1
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	429a      	cmp	r2, r3
 800057a:	dbf1      	blt.n	8000560 <_write+0x12>
  }
  return len;
 800057c:	687b      	ldr	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <_close>:

int _close(int file)
{
 8000586:	b480      	push	{r7}
 8000588:	b083      	sub	sp, #12
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005ae:	605a      	str	r2, [r3, #4]
  return 0;
 80005b0:	2300      	movs	r3, #0
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <_isatty>:

int _isatty(int file)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005c6:	2301      	movs	r3, #1
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f8:	4a14      	ldr	r2, [pc, #80]	@ (800064c <_sbrk+0x5c>)
 80005fa:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <_sbrk+0x60>)
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000604:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <_sbrk+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d102      	bne.n	8000612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <_sbrk+0x64>)
 800060e:	4a12      	ldr	r2, [pc, #72]	@ (8000658 <_sbrk+0x68>)
 8000610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000612:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <_sbrk+0x64>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	693a      	ldr	r2, [r7, #16]
 800061c:	429a      	cmp	r2, r3
 800061e:	d207      	bcs.n	8000630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000620:	f000 fa42 	bl	8000aa8 <__errno>
 8000624:	4603      	mov	r3, r0
 8000626:	220c      	movs	r2, #12
 8000628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	e009      	b.n	8000644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <_sbrk+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000636:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	4a05      	ldr	r2, [pc, #20]	@ (8000654 <_sbrk+0x64>)
 8000640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20020000 	.word	0x20020000
 8000650:	00000400 	.word	0x00000400
 8000654:	20000090 	.word	0x20000090
 8000658:	200001e0 	.word	0x200001e0

0800065c <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart2_write(int ch);

int __io_putchar(int ch)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f000 f84f 	bl	8000708 <uart2_write>
	return ch;
 800066a:	687b      	ldr	r3, [r7, #4]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <uart2_tx_init>:


void uart2_tx_init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

	/************Configure UART GPIO pin************/
	// 1. Enable clock access
	RCC->AHB1ENR |= GPIOAEN;
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <uart2_tx_init+0x84>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067c:	4a1e      	ldr	r2, [pc, #120]	@ (80006f8 <uart2_tx_init+0x84>)
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	6313      	str	r3, [r2, #48]	@ 0x30

	// 2. Set PA2 mode to Alternate Function mode
	GPIOA->MODER &= ~(1U<<4);
 8000684:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <uart2_tx_init+0x88>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a1c      	ldr	r2, [pc, #112]	@ (80006fc <uart2_tx_init+0x88>)
 800068a:	f023 0310 	bic.w	r3, r3, #16
 800068e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<5);
 8000690:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <uart2_tx_init+0x88>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a19      	ldr	r2, [pc, #100]	@ (80006fc <uart2_tx_init+0x88>)
 8000696:	f043 0320 	orr.w	r3, r3, #32
 800069a:	6013      	str	r3, [r2, #0]

	// 3. Set PA2 Alternate Function type to AF7 (UART_TX)
	GPIOA->AFR[0] |=  (1U<<8);
 800069c:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <uart2_tx_init+0x88>)
 800069e:	6a1b      	ldr	r3, [r3, #32]
 80006a0:	4a16      	ldr	r2, [pc, #88]	@ (80006fc <uart2_tx_init+0x88>)
 80006a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006a6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<9);
 80006a8:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <uart2_tx_init+0x88>)
 80006aa:	6a1b      	ldr	r3, [r3, #32]
 80006ac:	4a13      	ldr	r2, [pc, #76]	@ (80006fc <uart2_tx_init+0x88>)
 80006ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<10);
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <uart2_tx_init+0x88>)
 80006b6:	6a1b      	ldr	r3, [r3, #32]
 80006b8:	4a10      	ldr	r2, [pc, #64]	@ (80006fc <uart2_tx_init+0x88>)
 80006ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <uart2_tx_init+0x88>)
 80006c2:	6a1b      	ldr	r3, [r3, #32]
 80006c4:	4a0d      	ldr	r2, [pc, #52]	@ (80006fc <uart2_tx_init+0x88>)
 80006c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80006ca:	6213      	str	r3, [r2, #32]

	/************CONFIGURE UART MODULE************/
	// 4. ENABLE CLOCK ACCESS TO UART2
	RCC->APB1ENR |= UART2EN;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <uart2_tx_init+0x84>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	4a09      	ldr	r2, [pc, #36]	@ (80006f8 <uart2_tx_init+0x84>)
 80006d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006d6:	6413      	str	r3, [r2, #64]	@ 0x40

	// 5. Set Baudrate
	uart_set_baudrate(CLK, UART_BAUDRATE);
 80006d8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80006dc:	4808      	ldr	r0, [pc, #32]	@ (8000700 <uart2_tx_init+0x8c>)
 80006de:	f000 f83f 	bl	8000760 <uart_set_baudrate>

	// 6. Set transfer direction
	USART2->CR1 = CR1_TE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <uart2_tx_init+0x90>)
 80006e4:	2208      	movs	r2, #8
 80006e6:	60da      	str	r2, [r3, #12]

	// 7. Enable UART modeule
	USART2->CR1 |= CR1_UE;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <uart2_tx_init+0x90>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	4a05      	ldr	r2, [pc, #20]	@ (8000704 <uart2_tx_init+0x90>)
 80006ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006f2:	60d3      	str	r3, [r2, #12]

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40020000 	.word	0x40020000
 8000700:	00f42400 	.word	0x00f42400
 8000704:	40004400 	.word	0x40004400

08000708 <uart2_write>:

static void uart2_write(int ch)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	// make sure the transmit data register is empty
	while(!(USART2->SR & SR_TXE)){}
 8000710:	bf00      	nop
 8000712:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <uart2_write+0x2c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800071a:	2b00      	cmp	r3, #0
 800071c:	d0f9      	beq.n	8000712 <uart2_write+0xa>

	// write to transmit data register
	USART2->DR = (ch & 0xFF);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a04      	ldr	r2, [pc, #16]	@ (8000734 <uart2_write+0x2c>)
 8000722:	b2db      	uxtb	r3, r3
 8000724:	6053      	str	r3, [r2, #4]
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40004400 	.word	0x40004400

08000738 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
	return ((periph_clk +(baudrate/2U))/baudrate);
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	085a      	lsrs	r2, r3, #1
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	441a      	add	r2, r3
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000750:	b29b      	uxth	r3, r3
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
	...

08000760 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 800076a:	6839      	ldr	r1, [r7, #0]
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ffe3 	bl	8000738 <compute_uart_bd>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	4b03      	ldr	r3, [pc, #12]	@ (8000784 <uart_set_baudrate+0x24>)
 8000778:	609a      	str	r2, [r3, #8]
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40004400 	.word	0x40004400

08000788 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000788:	480d      	ldr	r0, [pc, #52]	@ (80007c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800078a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800078c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000790:	480c      	ldr	r0, [pc, #48]	@ (80007c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000792:	490d      	ldr	r1, [pc, #52]	@ (80007c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000794:	4a0d      	ldr	r2, [pc, #52]	@ (80007cc <LoopForever+0xe>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000798:	e002      	b.n	80007a0 <LoopCopyDataInit>

0800079a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800079c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079e:	3304      	adds	r3, #4

080007a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a4:	d3f9      	bcc.n	800079a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a6:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a8:	4c0a      	ldr	r4, [pc, #40]	@ (80007d4 <LoopForever+0x16>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ac:	e001      	b.n	80007b2 <LoopFillZerobss>

080007ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b0:	3204      	adds	r2, #4

080007b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b4:	d3fb      	bcc.n	80007ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007b6:	f000 f97d 	bl	8000ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ba:	f7ff fe59 	bl	8000470 <main>

080007be <LoopForever>:

LoopForever:
  b LoopForever
 80007be:	e7fe      	b.n	80007be <LoopForever>
  ldr   r0, =_estack
 80007c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80007cc:	080016b4 	.word	0x080016b4
  ldr r2, =_sbss
 80007d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007d4:	200001e0 	.word	0x200001e0

080007d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <ADC_IRQHandler>
	...

080007dc <std>:
 80007dc:	2300      	movs	r3, #0
 80007de:	b510      	push	{r4, lr}
 80007e0:	4604      	mov	r4, r0
 80007e2:	e9c0 3300 	strd	r3, r3, [r0]
 80007e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007ea:	6083      	str	r3, [r0, #8]
 80007ec:	8181      	strh	r1, [r0, #12]
 80007ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80007f0:	81c2      	strh	r2, [r0, #14]
 80007f2:	6183      	str	r3, [r0, #24]
 80007f4:	4619      	mov	r1, r3
 80007f6:	2208      	movs	r2, #8
 80007f8:	305c      	adds	r0, #92	@ 0x5c
 80007fa:	f000 f906 	bl	8000a0a <memset>
 80007fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000834 <std+0x58>)
 8000800:	6263      	str	r3, [r4, #36]	@ 0x24
 8000802:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <std+0x5c>)
 8000804:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000806:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <std+0x60>)
 8000808:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800080a:	4b0d      	ldr	r3, [pc, #52]	@ (8000840 <std+0x64>)
 800080c:	6323      	str	r3, [r4, #48]	@ 0x30
 800080e:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <std+0x68>)
 8000810:	6224      	str	r4, [r4, #32]
 8000812:	429c      	cmp	r4, r3
 8000814:	d006      	beq.n	8000824 <std+0x48>
 8000816:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800081a:	4294      	cmp	r4, r2
 800081c:	d002      	beq.n	8000824 <std+0x48>
 800081e:	33d0      	adds	r3, #208	@ 0xd0
 8000820:	429c      	cmp	r4, r3
 8000822:	d105      	bne.n	8000830 <std+0x54>
 8000824:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800082c:	f000 b966 	b.w	8000afc <__retarget_lock_init_recursive>
 8000830:	bd10      	pop	{r4, pc}
 8000832:	bf00      	nop
 8000834:	08000985 	.word	0x08000985
 8000838:	080009a7 	.word	0x080009a7
 800083c:	080009df 	.word	0x080009df
 8000840:	08000a03 	.word	0x08000a03
 8000844:	20000094 	.word	0x20000094

08000848 <stdio_exit_handler>:
 8000848:	4a02      	ldr	r2, [pc, #8]	@ (8000854 <stdio_exit_handler+0xc>)
 800084a:	4903      	ldr	r1, [pc, #12]	@ (8000858 <stdio_exit_handler+0x10>)
 800084c:	4803      	ldr	r0, [pc, #12]	@ (800085c <stdio_exit_handler+0x14>)
 800084e:	f000 b869 	b.w	8000924 <_fwalk_sglue>
 8000852:	bf00      	nop
 8000854:	20000000 	.word	0x20000000
 8000858:	0800139d 	.word	0x0800139d
 800085c:	20000010 	.word	0x20000010

08000860 <cleanup_stdio>:
 8000860:	6841      	ldr	r1, [r0, #4]
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <cleanup_stdio+0x34>)
 8000864:	4299      	cmp	r1, r3
 8000866:	b510      	push	{r4, lr}
 8000868:	4604      	mov	r4, r0
 800086a:	d001      	beq.n	8000870 <cleanup_stdio+0x10>
 800086c:	f000 fd96 	bl	800139c <_fflush_r>
 8000870:	68a1      	ldr	r1, [r4, #8]
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <cleanup_stdio+0x38>)
 8000874:	4299      	cmp	r1, r3
 8000876:	d002      	beq.n	800087e <cleanup_stdio+0x1e>
 8000878:	4620      	mov	r0, r4
 800087a:	f000 fd8f 	bl	800139c <_fflush_r>
 800087e:	68e1      	ldr	r1, [r4, #12]
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <cleanup_stdio+0x3c>)
 8000882:	4299      	cmp	r1, r3
 8000884:	d004      	beq.n	8000890 <cleanup_stdio+0x30>
 8000886:	4620      	mov	r0, r4
 8000888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800088c:	f000 bd86 	b.w	800139c <_fflush_r>
 8000890:	bd10      	pop	{r4, pc}
 8000892:	bf00      	nop
 8000894:	20000094 	.word	0x20000094
 8000898:	200000fc 	.word	0x200000fc
 800089c:	20000164 	.word	0x20000164

080008a0 <global_stdio_init.part.0>:
 80008a0:	b510      	push	{r4, lr}
 80008a2:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <global_stdio_init.part.0+0x30>)
 80008a4:	4c0b      	ldr	r4, [pc, #44]	@ (80008d4 <global_stdio_init.part.0+0x34>)
 80008a6:	4a0c      	ldr	r2, [pc, #48]	@ (80008d8 <global_stdio_init.part.0+0x38>)
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	4620      	mov	r0, r4
 80008ac:	2200      	movs	r2, #0
 80008ae:	2104      	movs	r1, #4
 80008b0:	f7ff ff94 	bl	80007dc <std>
 80008b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80008b8:	2201      	movs	r2, #1
 80008ba:	2109      	movs	r1, #9
 80008bc:	f7ff ff8e 	bl	80007dc <std>
 80008c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80008c4:	2202      	movs	r2, #2
 80008c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008ca:	2112      	movs	r1, #18
 80008cc:	f7ff bf86 	b.w	80007dc <std>
 80008d0:	200001cc 	.word	0x200001cc
 80008d4:	20000094 	.word	0x20000094
 80008d8:	08000849 	.word	0x08000849

080008dc <__sfp_lock_acquire>:
 80008dc:	4801      	ldr	r0, [pc, #4]	@ (80008e4 <__sfp_lock_acquire+0x8>)
 80008de:	f000 b90e 	b.w	8000afe <__retarget_lock_acquire_recursive>
 80008e2:	bf00      	nop
 80008e4:	200001d5 	.word	0x200001d5

080008e8 <__sfp_lock_release>:
 80008e8:	4801      	ldr	r0, [pc, #4]	@ (80008f0 <__sfp_lock_release+0x8>)
 80008ea:	f000 b909 	b.w	8000b00 <__retarget_lock_release_recursive>
 80008ee:	bf00      	nop
 80008f0:	200001d5 	.word	0x200001d5

080008f4 <__sinit>:
 80008f4:	b510      	push	{r4, lr}
 80008f6:	4604      	mov	r4, r0
 80008f8:	f7ff fff0 	bl	80008dc <__sfp_lock_acquire>
 80008fc:	6a23      	ldr	r3, [r4, #32]
 80008fe:	b11b      	cbz	r3, 8000908 <__sinit+0x14>
 8000900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000904:	f7ff bff0 	b.w	80008e8 <__sfp_lock_release>
 8000908:	4b04      	ldr	r3, [pc, #16]	@ (800091c <__sinit+0x28>)
 800090a:	6223      	str	r3, [r4, #32]
 800090c:	4b04      	ldr	r3, [pc, #16]	@ (8000920 <__sinit+0x2c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1f5      	bne.n	8000900 <__sinit+0xc>
 8000914:	f7ff ffc4 	bl	80008a0 <global_stdio_init.part.0>
 8000918:	e7f2      	b.n	8000900 <__sinit+0xc>
 800091a:	bf00      	nop
 800091c:	08000861 	.word	0x08000861
 8000920:	200001cc 	.word	0x200001cc

08000924 <_fwalk_sglue>:
 8000924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000928:	4607      	mov	r7, r0
 800092a:	4688      	mov	r8, r1
 800092c:	4614      	mov	r4, r2
 800092e:	2600      	movs	r6, #0
 8000930:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000934:	f1b9 0901 	subs.w	r9, r9, #1
 8000938:	d505      	bpl.n	8000946 <_fwalk_sglue+0x22>
 800093a:	6824      	ldr	r4, [r4, #0]
 800093c:	2c00      	cmp	r4, #0
 800093e:	d1f7      	bne.n	8000930 <_fwalk_sglue+0xc>
 8000940:	4630      	mov	r0, r6
 8000942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000946:	89ab      	ldrh	r3, [r5, #12]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d907      	bls.n	800095c <_fwalk_sglue+0x38>
 800094c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000950:	3301      	adds	r3, #1
 8000952:	d003      	beq.n	800095c <_fwalk_sglue+0x38>
 8000954:	4629      	mov	r1, r5
 8000956:	4638      	mov	r0, r7
 8000958:	47c0      	blx	r8
 800095a:	4306      	orrs	r6, r0
 800095c:	3568      	adds	r5, #104	@ 0x68
 800095e:	e7e9      	b.n	8000934 <_fwalk_sglue+0x10>

08000960 <iprintf>:
 8000960:	b40f      	push	{r0, r1, r2, r3}
 8000962:	b507      	push	{r0, r1, r2, lr}
 8000964:	4906      	ldr	r1, [pc, #24]	@ (8000980 <iprintf+0x20>)
 8000966:	ab04      	add	r3, sp, #16
 8000968:	6808      	ldr	r0, [r1, #0]
 800096a:	f853 2b04 	ldr.w	r2, [r3], #4
 800096e:	6881      	ldr	r1, [r0, #8]
 8000970:	9301      	str	r3, [sp, #4]
 8000972:	f000 f9e9 	bl	8000d48 <_vfiprintf_r>
 8000976:	b003      	add	sp, #12
 8000978:	f85d eb04 	ldr.w	lr, [sp], #4
 800097c:	b004      	add	sp, #16
 800097e:	4770      	bx	lr
 8000980:	2000000c 	.word	0x2000000c

08000984 <__sread>:
 8000984:	b510      	push	{r4, lr}
 8000986:	460c      	mov	r4, r1
 8000988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800098c:	f000 f868 	bl	8000a60 <_read_r>
 8000990:	2800      	cmp	r0, #0
 8000992:	bfab      	itete	ge
 8000994:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000996:	89a3      	ldrhlt	r3, [r4, #12]
 8000998:	181b      	addge	r3, r3, r0
 800099a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800099e:	bfac      	ite	ge
 80009a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80009a2:	81a3      	strhlt	r3, [r4, #12]
 80009a4:	bd10      	pop	{r4, pc}

080009a6 <__swrite>:
 80009a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009aa:	461f      	mov	r7, r3
 80009ac:	898b      	ldrh	r3, [r1, #12]
 80009ae:	05db      	lsls	r3, r3, #23
 80009b0:	4605      	mov	r5, r0
 80009b2:	460c      	mov	r4, r1
 80009b4:	4616      	mov	r6, r2
 80009b6:	d505      	bpl.n	80009c4 <__swrite+0x1e>
 80009b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009bc:	2302      	movs	r3, #2
 80009be:	2200      	movs	r2, #0
 80009c0:	f000 f83c 	bl	8000a3c <_lseek_r>
 80009c4:	89a3      	ldrh	r3, [r4, #12]
 80009c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80009ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80009ce:	81a3      	strh	r3, [r4, #12]
 80009d0:	4632      	mov	r2, r6
 80009d2:	463b      	mov	r3, r7
 80009d4:	4628      	mov	r0, r5
 80009d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80009da:	f000 b853 	b.w	8000a84 <_write_r>

080009de <__sseek>:
 80009de:	b510      	push	{r4, lr}
 80009e0:	460c      	mov	r4, r1
 80009e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009e6:	f000 f829 	bl	8000a3c <_lseek_r>
 80009ea:	1c43      	adds	r3, r0, #1
 80009ec:	89a3      	ldrh	r3, [r4, #12]
 80009ee:	bf15      	itete	ne
 80009f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80009f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80009f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80009fa:	81a3      	strheq	r3, [r4, #12]
 80009fc:	bf18      	it	ne
 80009fe:	81a3      	strhne	r3, [r4, #12]
 8000a00:	bd10      	pop	{r4, pc}

08000a02 <__sclose>:
 8000a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a06:	f000 b809 	b.w	8000a1c <_close_r>

08000a0a <memset>:
 8000a0a:	4402      	add	r2, r0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d100      	bne.n	8000a14 <memset+0xa>
 8000a12:	4770      	bx	lr
 8000a14:	f803 1b01 	strb.w	r1, [r3], #1
 8000a18:	e7f9      	b.n	8000a0e <memset+0x4>
	...

08000a1c <_close_r>:
 8000a1c:	b538      	push	{r3, r4, r5, lr}
 8000a1e:	4d06      	ldr	r5, [pc, #24]	@ (8000a38 <_close_r+0x1c>)
 8000a20:	2300      	movs	r3, #0
 8000a22:	4604      	mov	r4, r0
 8000a24:	4608      	mov	r0, r1
 8000a26:	602b      	str	r3, [r5, #0]
 8000a28:	f7ff fdad 	bl	8000586 <_close>
 8000a2c:	1c43      	adds	r3, r0, #1
 8000a2e:	d102      	bne.n	8000a36 <_close_r+0x1a>
 8000a30:	682b      	ldr	r3, [r5, #0]
 8000a32:	b103      	cbz	r3, 8000a36 <_close_r+0x1a>
 8000a34:	6023      	str	r3, [r4, #0]
 8000a36:	bd38      	pop	{r3, r4, r5, pc}
 8000a38:	200001d0 	.word	0x200001d0

08000a3c <_lseek_r>:
 8000a3c:	b538      	push	{r3, r4, r5, lr}
 8000a3e:	4d07      	ldr	r5, [pc, #28]	@ (8000a5c <_lseek_r+0x20>)
 8000a40:	4604      	mov	r4, r0
 8000a42:	4608      	mov	r0, r1
 8000a44:	4611      	mov	r1, r2
 8000a46:	2200      	movs	r2, #0
 8000a48:	602a      	str	r2, [r5, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	f7ff fdc2 	bl	80005d4 <_lseek>
 8000a50:	1c43      	adds	r3, r0, #1
 8000a52:	d102      	bne.n	8000a5a <_lseek_r+0x1e>
 8000a54:	682b      	ldr	r3, [r5, #0]
 8000a56:	b103      	cbz	r3, 8000a5a <_lseek_r+0x1e>
 8000a58:	6023      	str	r3, [r4, #0]
 8000a5a:	bd38      	pop	{r3, r4, r5, pc}
 8000a5c:	200001d0 	.word	0x200001d0

08000a60 <_read_r>:
 8000a60:	b538      	push	{r3, r4, r5, lr}
 8000a62:	4d07      	ldr	r5, [pc, #28]	@ (8000a80 <_read_r+0x20>)
 8000a64:	4604      	mov	r4, r0
 8000a66:	4608      	mov	r0, r1
 8000a68:	4611      	mov	r1, r2
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	602a      	str	r2, [r5, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	f7ff fd50 	bl	8000514 <_read>
 8000a74:	1c43      	adds	r3, r0, #1
 8000a76:	d102      	bne.n	8000a7e <_read_r+0x1e>
 8000a78:	682b      	ldr	r3, [r5, #0]
 8000a7a:	b103      	cbz	r3, 8000a7e <_read_r+0x1e>
 8000a7c:	6023      	str	r3, [r4, #0]
 8000a7e:	bd38      	pop	{r3, r4, r5, pc}
 8000a80:	200001d0 	.word	0x200001d0

08000a84 <_write_r>:
 8000a84:	b538      	push	{r3, r4, r5, lr}
 8000a86:	4d07      	ldr	r5, [pc, #28]	@ (8000aa4 <_write_r+0x20>)
 8000a88:	4604      	mov	r4, r0
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	2200      	movs	r2, #0
 8000a90:	602a      	str	r2, [r5, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	f7ff fd5b 	bl	800054e <_write>
 8000a98:	1c43      	adds	r3, r0, #1
 8000a9a:	d102      	bne.n	8000aa2 <_write_r+0x1e>
 8000a9c:	682b      	ldr	r3, [r5, #0]
 8000a9e:	b103      	cbz	r3, 8000aa2 <_write_r+0x1e>
 8000aa0:	6023      	str	r3, [r4, #0]
 8000aa2:	bd38      	pop	{r3, r4, r5, pc}
 8000aa4:	200001d0 	.word	0x200001d0

08000aa8 <__errno>:
 8000aa8:	4b01      	ldr	r3, [pc, #4]	@ (8000ab0 <__errno+0x8>)
 8000aaa:	6818      	ldr	r0, [r3, #0]
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	2000000c 	.word	0x2000000c

08000ab4 <__libc_init_array>:
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	4d0d      	ldr	r5, [pc, #52]	@ (8000aec <__libc_init_array+0x38>)
 8000ab8:	4c0d      	ldr	r4, [pc, #52]	@ (8000af0 <__libc_init_array+0x3c>)
 8000aba:	1b64      	subs	r4, r4, r5
 8000abc:	10a4      	asrs	r4, r4, #2
 8000abe:	2600      	movs	r6, #0
 8000ac0:	42a6      	cmp	r6, r4
 8000ac2:	d109      	bne.n	8000ad8 <__libc_init_array+0x24>
 8000ac4:	4d0b      	ldr	r5, [pc, #44]	@ (8000af4 <__libc_init_array+0x40>)
 8000ac6:	4c0c      	ldr	r4, [pc, #48]	@ (8000af8 <__libc_init_array+0x44>)
 8000ac8:	f000 fdb8 	bl	800163c <_init>
 8000acc:	1b64      	subs	r4, r4, r5
 8000ace:	10a4      	asrs	r4, r4, #2
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	42a6      	cmp	r6, r4
 8000ad4:	d105      	bne.n	8000ae2 <__libc_init_array+0x2e>
 8000ad6:	bd70      	pop	{r4, r5, r6, pc}
 8000ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000adc:	4798      	blx	r3
 8000ade:	3601      	adds	r6, #1
 8000ae0:	e7ee      	b.n	8000ac0 <__libc_init_array+0xc>
 8000ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae6:	4798      	blx	r3
 8000ae8:	3601      	adds	r6, #1
 8000aea:	e7f2      	b.n	8000ad2 <__libc_init_array+0x1e>
 8000aec:	080016ac 	.word	0x080016ac
 8000af0:	080016ac 	.word	0x080016ac
 8000af4:	080016ac 	.word	0x080016ac
 8000af8:	080016b0 	.word	0x080016b0

08000afc <__retarget_lock_init_recursive>:
 8000afc:	4770      	bx	lr

08000afe <__retarget_lock_acquire_recursive>:
 8000afe:	4770      	bx	lr

08000b00 <__retarget_lock_release_recursive>:
 8000b00:	4770      	bx	lr
	...

08000b04 <_free_r>:
 8000b04:	b538      	push	{r3, r4, r5, lr}
 8000b06:	4605      	mov	r5, r0
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	d041      	beq.n	8000b90 <_free_r+0x8c>
 8000b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b10:	1f0c      	subs	r4, r1, #4
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	bfb8      	it	lt
 8000b16:	18e4      	addlt	r4, r4, r3
 8000b18:	f000 f8e0 	bl	8000cdc <__malloc_lock>
 8000b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b94 <_free_r+0x90>)
 8000b1e:	6813      	ldr	r3, [r2, #0]
 8000b20:	b933      	cbnz	r3, 8000b30 <_free_r+0x2c>
 8000b22:	6063      	str	r3, [r4, #4]
 8000b24:	6014      	str	r4, [r2, #0]
 8000b26:	4628      	mov	r0, r5
 8000b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b2c:	f000 b8dc 	b.w	8000ce8 <__malloc_unlock>
 8000b30:	42a3      	cmp	r3, r4
 8000b32:	d908      	bls.n	8000b46 <_free_r+0x42>
 8000b34:	6820      	ldr	r0, [r4, #0]
 8000b36:	1821      	adds	r1, r4, r0
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	bf01      	itttt	eq
 8000b3c:	6819      	ldreq	r1, [r3, #0]
 8000b3e:	685b      	ldreq	r3, [r3, #4]
 8000b40:	1809      	addeq	r1, r1, r0
 8000b42:	6021      	streq	r1, [r4, #0]
 8000b44:	e7ed      	b.n	8000b22 <_free_r+0x1e>
 8000b46:	461a      	mov	r2, r3
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	b10b      	cbz	r3, 8000b50 <_free_r+0x4c>
 8000b4c:	42a3      	cmp	r3, r4
 8000b4e:	d9fa      	bls.n	8000b46 <_free_r+0x42>
 8000b50:	6811      	ldr	r1, [r2, #0]
 8000b52:	1850      	adds	r0, r2, r1
 8000b54:	42a0      	cmp	r0, r4
 8000b56:	d10b      	bne.n	8000b70 <_free_r+0x6c>
 8000b58:	6820      	ldr	r0, [r4, #0]
 8000b5a:	4401      	add	r1, r0
 8000b5c:	1850      	adds	r0, r2, r1
 8000b5e:	4283      	cmp	r3, r0
 8000b60:	6011      	str	r1, [r2, #0]
 8000b62:	d1e0      	bne.n	8000b26 <_free_r+0x22>
 8000b64:	6818      	ldr	r0, [r3, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	6053      	str	r3, [r2, #4]
 8000b6a:	4408      	add	r0, r1
 8000b6c:	6010      	str	r0, [r2, #0]
 8000b6e:	e7da      	b.n	8000b26 <_free_r+0x22>
 8000b70:	d902      	bls.n	8000b78 <_free_r+0x74>
 8000b72:	230c      	movs	r3, #12
 8000b74:	602b      	str	r3, [r5, #0]
 8000b76:	e7d6      	b.n	8000b26 <_free_r+0x22>
 8000b78:	6820      	ldr	r0, [r4, #0]
 8000b7a:	1821      	adds	r1, r4, r0
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	bf04      	itt	eq
 8000b80:	6819      	ldreq	r1, [r3, #0]
 8000b82:	685b      	ldreq	r3, [r3, #4]
 8000b84:	6063      	str	r3, [r4, #4]
 8000b86:	bf04      	itt	eq
 8000b88:	1809      	addeq	r1, r1, r0
 8000b8a:	6021      	streq	r1, [r4, #0]
 8000b8c:	6054      	str	r4, [r2, #4]
 8000b8e:	e7ca      	b.n	8000b26 <_free_r+0x22>
 8000b90:	bd38      	pop	{r3, r4, r5, pc}
 8000b92:	bf00      	nop
 8000b94:	200001dc 	.word	0x200001dc

08000b98 <sbrk_aligned>:
 8000b98:	b570      	push	{r4, r5, r6, lr}
 8000b9a:	4e0f      	ldr	r6, [pc, #60]	@ (8000bd8 <sbrk_aligned+0x40>)
 8000b9c:	460c      	mov	r4, r1
 8000b9e:	6831      	ldr	r1, [r6, #0]
 8000ba0:	4605      	mov	r5, r0
 8000ba2:	b911      	cbnz	r1, 8000baa <sbrk_aligned+0x12>
 8000ba4:	f000 fcb6 	bl	8001514 <_sbrk_r>
 8000ba8:	6030      	str	r0, [r6, #0]
 8000baa:	4621      	mov	r1, r4
 8000bac:	4628      	mov	r0, r5
 8000bae:	f000 fcb1 	bl	8001514 <_sbrk_r>
 8000bb2:	1c43      	adds	r3, r0, #1
 8000bb4:	d103      	bne.n	8000bbe <sbrk_aligned+0x26>
 8000bb6:	f04f 34ff 	mov.w	r4, #4294967295
 8000bba:	4620      	mov	r0, r4
 8000bbc:	bd70      	pop	{r4, r5, r6, pc}
 8000bbe:	1cc4      	adds	r4, r0, #3
 8000bc0:	f024 0403 	bic.w	r4, r4, #3
 8000bc4:	42a0      	cmp	r0, r4
 8000bc6:	d0f8      	beq.n	8000bba <sbrk_aligned+0x22>
 8000bc8:	1a21      	subs	r1, r4, r0
 8000bca:	4628      	mov	r0, r5
 8000bcc:	f000 fca2 	bl	8001514 <_sbrk_r>
 8000bd0:	3001      	adds	r0, #1
 8000bd2:	d1f2      	bne.n	8000bba <sbrk_aligned+0x22>
 8000bd4:	e7ef      	b.n	8000bb6 <sbrk_aligned+0x1e>
 8000bd6:	bf00      	nop
 8000bd8:	200001d8 	.word	0x200001d8

08000bdc <_malloc_r>:
 8000bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000be0:	1ccd      	adds	r5, r1, #3
 8000be2:	f025 0503 	bic.w	r5, r5, #3
 8000be6:	3508      	adds	r5, #8
 8000be8:	2d0c      	cmp	r5, #12
 8000bea:	bf38      	it	cc
 8000bec:	250c      	movcc	r5, #12
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	4606      	mov	r6, r0
 8000bf2:	db01      	blt.n	8000bf8 <_malloc_r+0x1c>
 8000bf4:	42a9      	cmp	r1, r5
 8000bf6:	d904      	bls.n	8000c02 <_malloc_r+0x26>
 8000bf8:	230c      	movs	r3, #12
 8000bfa:	6033      	str	r3, [r6, #0]
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000cd8 <_malloc_r+0xfc>
 8000c06:	f000 f869 	bl	8000cdc <__malloc_lock>
 8000c0a:	f8d8 3000 	ldr.w	r3, [r8]
 8000c0e:	461c      	mov	r4, r3
 8000c10:	bb44      	cbnz	r4, 8000c64 <_malloc_r+0x88>
 8000c12:	4629      	mov	r1, r5
 8000c14:	4630      	mov	r0, r6
 8000c16:	f7ff ffbf 	bl	8000b98 <sbrk_aligned>
 8000c1a:	1c43      	adds	r3, r0, #1
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	d158      	bne.n	8000cd2 <_malloc_r+0xf6>
 8000c20:	f8d8 4000 	ldr.w	r4, [r8]
 8000c24:	4627      	mov	r7, r4
 8000c26:	2f00      	cmp	r7, #0
 8000c28:	d143      	bne.n	8000cb2 <_malloc_r+0xd6>
 8000c2a:	2c00      	cmp	r4, #0
 8000c2c:	d04b      	beq.n	8000cc6 <_malloc_r+0xea>
 8000c2e:	6823      	ldr	r3, [r4, #0]
 8000c30:	4639      	mov	r1, r7
 8000c32:	4630      	mov	r0, r6
 8000c34:	eb04 0903 	add.w	r9, r4, r3
 8000c38:	f000 fc6c 	bl	8001514 <_sbrk_r>
 8000c3c:	4581      	cmp	r9, r0
 8000c3e:	d142      	bne.n	8000cc6 <_malloc_r+0xea>
 8000c40:	6821      	ldr	r1, [r4, #0]
 8000c42:	1a6d      	subs	r5, r5, r1
 8000c44:	4629      	mov	r1, r5
 8000c46:	4630      	mov	r0, r6
 8000c48:	f7ff ffa6 	bl	8000b98 <sbrk_aligned>
 8000c4c:	3001      	adds	r0, #1
 8000c4e:	d03a      	beq.n	8000cc6 <_malloc_r+0xea>
 8000c50:	6823      	ldr	r3, [r4, #0]
 8000c52:	442b      	add	r3, r5
 8000c54:	6023      	str	r3, [r4, #0]
 8000c56:	f8d8 3000 	ldr.w	r3, [r8]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	bb62      	cbnz	r2, 8000cb8 <_malloc_r+0xdc>
 8000c5e:	f8c8 7000 	str.w	r7, [r8]
 8000c62:	e00f      	b.n	8000c84 <_malloc_r+0xa8>
 8000c64:	6822      	ldr	r2, [r4, #0]
 8000c66:	1b52      	subs	r2, r2, r5
 8000c68:	d420      	bmi.n	8000cac <_malloc_r+0xd0>
 8000c6a:	2a0b      	cmp	r2, #11
 8000c6c:	d917      	bls.n	8000c9e <_malloc_r+0xc2>
 8000c6e:	1961      	adds	r1, r4, r5
 8000c70:	42a3      	cmp	r3, r4
 8000c72:	6025      	str	r5, [r4, #0]
 8000c74:	bf18      	it	ne
 8000c76:	6059      	strne	r1, [r3, #4]
 8000c78:	6863      	ldr	r3, [r4, #4]
 8000c7a:	bf08      	it	eq
 8000c7c:	f8c8 1000 	streq.w	r1, [r8]
 8000c80:	5162      	str	r2, [r4, r5]
 8000c82:	604b      	str	r3, [r1, #4]
 8000c84:	4630      	mov	r0, r6
 8000c86:	f000 f82f 	bl	8000ce8 <__malloc_unlock>
 8000c8a:	f104 000b 	add.w	r0, r4, #11
 8000c8e:	1d23      	adds	r3, r4, #4
 8000c90:	f020 0007 	bic.w	r0, r0, #7
 8000c94:	1ac2      	subs	r2, r0, r3
 8000c96:	bf1c      	itt	ne
 8000c98:	1a1b      	subne	r3, r3, r0
 8000c9a:	50a3      	strne	r3, [r4, r2]
 8000c9c:	e7af      	b.n	8000bfe <_malloc_r+0x22>
 8000c9e:	6862      	ldr	r2, [r4, #4]
 8000ca0:	42a3      	cmp	r3, r4
 8000ca2:	bf0c      	ite	eq
 8000ca4:	f8c8 2000 	streq.w	r2, [r8]
 8000ca8:	605a      	strne	r2, [r3, #4]
 8000caa:	e7eb      	b.n	8000c84 <_malloc_r+0xa8>
 8000cac:	4623      	mov	r3, r4
 8000cae:	6864      	ldr	r4, [r4, #4]
 8000cb0:	e7ae      	b.n	8000c10 <_malloc_r+0x34>
 8000cb2:	463c      	mov	r4, r7
 8000cb4:	687f      	ldr	r7, [r7, #4]
 8000cb6:	e7b6      	b.n	8000c26 <_malloc_r+0x4a>
 8000cb8:	461a      	mov	r2, r3
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	d1fb      	bne.n	8000cb8 <_malloc_r+0xdc>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	6053      	str	r3, [r2, #4]
 8000cc4:	e7de      	b.n	8000c84 <_malloc_r+0xa8>
 8000cc6:	230c      	movs	r3, #12
 8000cc8:	6033      	str	r3, [r6, #0]
 8000cca:	4630      	mov	r0, r6
 8000ccc:	f000 f80c 	bl	8000ce8 <__malloc_unlock>
 8000cd0:	e794      	b.n	8000bfc <_malloc_r+0x20>
 8000cd2:	6005      	str	r5, [r0, #0]
 8000cd4:	e7d6      	b.n	8000c84 <_malloc_r+0xa8>
 8000cd6:	bf00      	nop
 8000cd8:	200001dc 	.word	0x200001dc

08000cdc <__malloc_lock>:
 8000cdc:	4801      	ldr	r0, [pc, #4]	@ (8000ce4 <__malloc_lock+0x8>)
 8000cde:	f7ff bf0e 	b.w	8000afe <__retarget_lock_acquire_recursive>
 8000ce2:	bf00      	nop
 8000ce4:	200001d4 	.word	0x200001d4

08000ce8 <__malloc_unlock>:
 8000ce8:	4801      	ldr	r0, [pc, #4]	@ (8000cf0 <__malloc_unlock+0x8>)
 8000cea:	f7ff bf09 	b.w	8000b00 <__retarget_lock_release_recursive>
 8000cee:	bf00      	nop
 8000cf0:	200001d4 	.word	0x200001d4

08000cf4 <__sfputc_r>:
 8000cf4:	6893      	ldr	r3, [r2, #8]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	b410      	push	{r4}
 8000cfc:	6093      	str	r3, [r2, #8]
 8000cfe:	da08      	bge.n	8000d12 <__sfputc_r+0x1e>
 8000d00:	6994      	ldr	r4, [r2, #24]
 8000d02:	42a3      	cmp	r3, r4
 8000d04:	db01      	blt.n	8000d0a <__sfputc_r+0x16>
 8000d06:	290a      	cmp	r1, #10
 8000d08:	d103      	bne.n	8000d12 <__sfputc_r+0x1e>
 8000d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d0e:	f000 bb6d 	b.w	80013ec <__swbuf_r>
 8000d12:	6813      	ldr	r3, [r2, #0]
 8000d14:	1c58      	adds	r0, r3, #1
 8000d16:	6010      	str	r0, [r2, #0]
 8000d18:	7019      	strb	r1, [r3, #0]
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <__sfputs_r>:
 8000d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d24:	4606      	mov	r6, r0
 8000d26:	460f      	mov	r7, r1
 8000d28:	4614      	mov	r4, r2
 8000d2a:	18d5      	adds	r5, r2, r3
 8000d2c:	42ac      	cmp	r4, r5
 8000d2e:	d101      	bne.n	8000d34 <__sfputs_r+0x12>
 8000d30:	2000      	movs	r0, #0
 8000d32:	e007      	b.n	8000d44 <__sfputs_r+0x22>
 8000d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d38:	463a      	mov	r2, r7
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	f7ff ffda 	bl	8000cf4 <__sfputc_r>
 8000d40:	1c43      	adds	r3, r0, #1
 8000d42:	d1f3      	bne.n	8000d2c <__sfputs_r+0xa>
 8000d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d48 <_vfiprintf_r>:
 8000d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d4c:	460d      	mov	r5, r1
 8000d4e:	b09d      	sub	sp, #116	@ 0x74
 8000d50:	4614      	mov	r4, r2
 8000d52:	4698      	mov	r8, r3
 8000d54:	4606      	mov	r6, r0
 8000d56:	b118      	cbz	r0, 8000d60 <_vfiprintf_r+0x18>
 8000d58:	6a03      	ldr	r3, [r0, #32]
 8000d5a:	b90b      	cbnz	r3, 8000d60 <_vfiprintf_r+0x18>
 8000d5c:	f7ff fdca 	bl	80008f4 <__sinit>
 8000d60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d62:	07d9      	lsls	r1, r3, #31
 8000d64:	d405      	bmi.n	8000d72 <_vfiprintf_r+0x2a>
 8000d66:	89ab      	ldrh	r3, [r5, #12]
 8000d68:	059a      	lsls	r2, r3, #22
 8000d6a:	d402      	bmi.n	8000d72 <_vfiprintf_r+0x2a>
 8000d6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d6e:	f7ff fec6 	bl	8000afe <__retarget_lock_acquire_recursive>
 8000d72:	89ab      	ldrh	r3, [r5, #12]
 8000d74:	071b      	lsls	r3, r3, #28
 8000d76:	d501      	bpl.n	8000d7c <_vfiprintf_r+0x34>
 8000d78:	692b      	ldr	r3, [r5, #16]
 8000d7a:	b99b      	cbnz	r3, 8000da4 <_vfiprintf_r+0x5c>
 8000d7c:	4629      	mov	r1, r5
 8000d7e:	4630      	mov	r0, r6
 8000d80:	f000 fb72 	bl	8001468 <__swsetup_r>
 8000d84:	b170      	cbz	r0, 8000da4 <_vfiprintf_r+0x5c>
 8000d86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d88:	07dc      	lsls	r4, r3, #31
 8000d8a:	d504      	bpl.n	8000d96 <_vfiprintf_r+0x4e>
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	b01d      	add	sp, #116	@ 0x74
 8000d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d96:	89ab      	ldrh	r3, [r5, #12]
 8000d98:	0598      	lsls	r0, r3, #22
 8000d9a:	d4f7      	bmi.n	8000d8c <_vfiprintf_r+0x44>
 8000d9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d9e:	f7ff feaf 	bl	8000b00 <__retarget_lock_release_recursive>
 8000da2:	e7f3      	b.n	8000d8c <_vfiprintf_r+0x44>
 8000da4:	2300      	movs	r3, #0
 8000da6:	9309      	str	r3, [sp, #36]	@ 0x24
 8000da8:	2320      	movs	r3, #32
 8000daa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000dae:	f8cd 800c 	str.w	r8, [sp, #12]
 8000db2:	2330      	movs	r3, #48	@ 0x30
 8000db4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000f64 <_vfiprintf_r+0x21c>
 8000db8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000dbc:	f04f 0901 	mov.w	r9, #1
 8000dc0:	4623      	mov	r3, r4
 8000dc2:	469a      	mov	sl, r3
 8000dc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000dc8:	b10a      	cbz	r2, 8000dce <_vfiprintf_r+0x86>
 8000dca:	2a25      	cmp	r2, #37	@ 0x25
 8000dcc:	d1f9      	bne.n	8000dc2 <_vfiprintf_r+0x7a>
 8000dce:	ebba 0b04 	subs.w	fp, sl, r4
 8000dd2:	d00b      	beq.n	8000dec <_vfiprintf_r+0xa4>
 8000dd4:	465b      	mov	r3, fp
 8000dd6:	4622      	mov	r2, r4
 8000dd8:	4629      	mov	r1, r5
 8000dda:	4630      	mov	r0, r6
 8000ddc:	f7ff ffa1 	bl	8000d22 <__sfputs_r>
 8000de0:	3001      	adds	r0, #1
 8000de2:	f000 80a7 	beq.w	8000f34 <_vfiprintf_r+0x1ec>
 8000de6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000de8:	445a      	add	r2, fp
 8000dea:	9209      	str	r2, [sp, #36]	@ 0x24
 8000dec:	f89a 3000 	ldrb.w	r3, [sl]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f000 809f 	beq.w	8000f34 <_vfiprintf_r+0x1ec>
 8000df6:	2300      	movs	r3, #0
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e00:	f10a 0a01 	add.w	sl, sl, #1
 8000e04:	9304      	str	r3, [sp, #16]
 8000e06:	9307      	str	r3, [sp, #28]
 8000e08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000e0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8000e0e:	4654      	mov	r4, sl
 8000e10:	2205      	movs	r2, #5
 8000e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e16:	4853      	ldr	r0, [pc, #332]	@ (8000f64 <_vfiprintf_r+0x21c>)
 8000e18:	f7ff f9fa 	bl	8000210 <memchr>
 8000e1c:	9a04      	ldr	r2, [sp, #16]
 8000e1e:	b9d8      	cbnz	r0, 8000e58 <_vfiprintf_r+0x110>
 8000e20:	06d1      	lsls	r1, r2, #27
 8000e22:	bf44      	itt	mi
 8000e24:	2320      	movmi	r3, #32
 8000e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e2a:	0713      	lsls	r3, r2, #28
 8000e2c:	bf44      	itt	mi
 8000e2e:	232b      	movmi	r3, #43	@ 0x2b
 8000e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e34:	f89a 3000 	ldrb.w	r3, [sl]
 8000e38:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e3a:	d015      	beq.n	8000e68 <_vfiprintf_r+0x120>
 8000e3c:	9a07      	ldr	r2, [sp, #28]
 8000e3e:	4654      	mov	r4, sl
 8000e40:	2000      	movs	r0, #0
 8000e42:	f04f 0c0a 	mov.w	ip, #10
 8000e46:	4621      	mov	r1, r4
 8000e48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e4c:	3b30      	subs	r3, #48	@ 0x30
 8000e4e:	2b09      	cmp	r3, #9
 8000e50:	d94b      	bls.n	8000eea <_vfiprintf_r+0x1a2>
 8000e52:	b1b0      	cbz	r0, 8000e82 <_vfiprintf_r+0x13a>
 8000e54:	9207      	str	r2, [sp, #28]
 8000e56:	e014      	b.n	8000e82 <_vfiprintf_r+0x13a>
 8000e58:	eba0 0308 	sub.w	r3, r0, r8
 8000e5c:	fa09 f303 	lsl.w	r3, r9, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	9304      	str	r3, [sp, #16]
 8000e64:	46a2      	mov	sl, r4
 8000e66:	e7d2      	b.n	8000e0e <_vfiprintf_r+0xc6>
 8000e68:	9b03      	ldr	r3, [sp, #12]
 8000e6a:	1d19      	adds	r1, r3, #4
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	9103      	str	r1, [sp, #12]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	bfbb      	ittet	lt
 8000e74:	425b      	neglt	r3, r3
 8000e76:	f042 0202 	orrlt.w	r2, r2, #2
 8000e7a:	9307      	strge	r3, [sp, #28]
 8000e7c:	9307      	strlt	r3, [sp, #28]
 8000e7e:	bfb8      	it	lt
 8000e80:	9204      	strlt	r2, [sp, #16]
 8000e82:	7823      	ldrb	r3, [r4, #0]
 8000e84:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e86:	d10a      	bne.n	8000e9e <_vfiprintf_r+0x156>
 8000e88:	7863      	ldrb	r3, [r4, #1]
 8000e8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e8c:	d132      	bne.n	8000ef4 <_vfiprintf_r+0x1ac>
 8000e8e:	9b03      	ldr	r3, [sp, #12]
 8000e90:	1d1a      	adds	r2, r3, #4
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	9203      	str	r2, [sp, #12]
 8000e96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e9a:	3402      	adds	r4, #2
 8000e9c:	9305      	str	r3, [sp, #20]
 8000e9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000f74 <_vfiprintf_r+0x22c>
 8000ea2:	7821      	ldrb	r1, [r4, #0]
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	f7ff f9b2 	bl	8000210 <memchr>
 8000eac:	b138      	cbz	r0, 8000ebe <_vfiprintf_r+0x176>
 8000eae:	9b04      	ldr	r3, [sp, #16]
 8000eb0:	eba0 000a 	sub.w	r0, r0, sl
 8000eb4:	2240      	movs	r2, #64	@ 0x40
 8000eb6:	4082      	lsls	r2, r0
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	3401      	adds	r4, #1
 8000ebc:	9304      	str	r3, [sp, #16]
 8000ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ec2:	4829      	ldr	r0, [pc, #164]	@ (8000f68 <_vfiprintf_r+0x220>)
 8000ec4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000ec8:	2206      	movs	r2, #6
 8000eca:	f7ff f9a1 	bl	8000210 <memchr>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d03f      	beq.n	8000f52 <_vfiprintf_r+0x20a>
 8000ed2:	4b26      	ldr	r3, [pc, #152]	@ (8000f6c <_vfiprintf_r+0x224>)
 8000ed4:	bb1b      	cbnz	r3, 8000f1e <_vfiprintf_r+0x1d6>
 8000ed6:	9b03      	ldr	r3, [sp, #12]
 8000ed8:	3307      	adds	r3, #7
 8000eda:	f023 0307 	bic.w	r3, r3, #7
 8000ede:	3308      	adds	r3, #8
 8000ee0:	9303      	str	r3, [sp, #12]
 8000ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000ee4:	443b      	add	r3, r7
 8000ee6:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ee8:	e76a      	b.n	8000dc0 <_vfiprintf_r+0x78>
 8000eea:	fb0c 3202 	mla	r2, ip, r2, r3
 8000eee:	460c      	mov	r4, r1
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	e7a8      	b.n	8000e46 <_vfiprintf_r+0xfe>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	3401      	adds	r4, #1
 8000ef8:	9305      	str	r3, [sp, #20]
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 0c0a 	mov.w	ip, #10
 8000f00:	4620      	mov	r0, r4
 8000f02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f06:	3a30      	subs	r2, #48	@ 0x30
 8000f08:	2a09      	cmp	r2, #9
 8000f0a:	d903      	bls.n	8000f14 <_vfiprintf_r+0x1cc>
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0c6      	beq.n	8000e9e <_vfiprintf_r+0x156>
 8000f10:	9105      	str	r1, [sp, #20]
 8000f12:	e7c4      	b.n	8000e9e <_vfiprintf_r+0x156>
 8000f14:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f18:	4604      	mov	r4, r0
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e7f0      	b.n	8000f00 <_vfiprintf_r+0x1b8>
 8000f1e:	ab03      	add	r3, sp, #12
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	462a      	mov	r2, r5
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <_vfiprintf_r+0x228>)
 8000f26:	a904      	add	r1, sp, #16
 8000f28:	4630      	mov	r0, r6
 8000f2a:	f3af 8000 	nop.w
 8000f2e:	4607      	mov	r7, r0
 8000f30:	1c78      	adds	r0, r7, #1
 8000f32:	d1d6      	bne.n	8000ee2 <_vfiprintf_r+0x19a>
 8000f34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f36:	07d9      	lsls	r1, r3, #31
 8000f38:	d405      	bmi.n	8000f46 <_vfiprintf_r+0x1fe>
 8000f3a:	89ab      	ldrh	r3, [r5, #12]
 8000f3c:	059a      	lsls	r2, r3, #22
 8000f3e:	d402      	bmi.n	8000f46 <_vfiprintf_r+0x1fe>
 8000f40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f42:	f7ff fddd 	bl	8000b00 <__retarget_lock_release_recursive>
 8000f46:	89ab      	ldrh	r3, [r5, #12]
 8000f48:	065b      	lsls	r3, r3, #25
 8000f4a:	f53f af1f 	bmi.w	8000d8c <_vfiprintf_r+0x44>
 8000f4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f50:	e71e      	b.n	8000d90 <_vfiprintf_r+0x48>
 8000f52:	ab03      	add	r3, sp, #12
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	462a      	mov	r2, r5
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <_vfiprintf_r+0x228>)
 8000f5a:	a904      	add	r1, sp, #16
 8000f5c:	4630      	mov	r0, r6
 8000f5e:	f000 f879 	bl	8001054 <_printf_i>
 8000f62:	e7e4      	b.n	8000f2e <_vfiprintf_r+0x1e6>
 8000f64:	0800166e 	.word	0x0800166e
 8000f68:	08001678 	.word	0x08001678
 8000f6c:	00000000 	.word	0x00000000
 8000f70:	08000d23 	.word	0x08000d23
 8000f74:	08001674 	.word	0x08001674

08000f78 <_printf_common>:
 8000f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f7c:	4616      	mov	r6, r2
 8000f7e:	4698      	mov	r8, r3
 8000f80:	688a      	ldr	r2, [r1, #8]
 8000f82:	690b      	ldr	r3, [r1, #16]
 8000f84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	bfb8      	it	lt
 8000f8c:	4613      	movlt	r3, r2
 8000f8e:	6033      	str	r3, [r6, #0]
 8000f90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f94:	4607      	mov	r7, r0
 8000f96:	460c      	mov	r4, r1
 8000f98:	b10a      	cbz	r2, 8000f9e <_printf_common+0x26>
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	6033      	str	r3, [r6, #0]
 8000f9e:	6823      	ldr	r3, [r4, #0]
 8000fa0:	0699      	lsls	r1, r3, #26
 8000fa2:	bf42      	ittt	mi
 8000fa4:	6833      	ldrmi	r3, [r6, #0]
 8000fa6:	3302      	addmi	r3, #2
 8000fa8:	6033      	strmi	r3, [r6, #0]
 8000faa:	6825      	ldr	r5, [r4, #0]
 8000fac:	f015 0506 	ands.w	r5, r5, #6
 8000fb0:	d106      	bne.n	8000fc0 <_printf_common+0x48>
 8000fb2:	f104 0a19 	add.w	sl, r4, #25
 8000fb6:	68e3      	ldr	r3, [r4, #12]
 8000fb8:	6832      	ldr	r2, [r6, #0]
 8000fba:	1a9b      	subs	r3, r3, r2
 8000fbc:	42ab      	cmp	r3, r5
 8000fbe:	dc26      	bgt.n	800100e <_printf_common+0x96>
 8000fc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000fc4:	6822      	ldr	r2, [r4, #0]
 8000fc6:	3b00      	subs	r3, #0
 8000fc8:	bf18      	it	ne
 8000fca:	2301      	movne	r3, #1
 8000fcc:	0692      	lsls	r2, r2, #26
 8000fce:	d42b      	bmi.n	8001028 <_printf_common+0xb0>
 8000fd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000fd4:	4641      	mov	r1, r8
 8000fd6:	4638      	mov	r0, r7
 8000fd8:	47c8      	blx	r9
 8000fda:	3001      	adds	r0, #1
 8000fdc:	d01e      	beq.n	800101c <_printf_common+0xa4>
 8000fde:	6823      	ldr	r3, [r4, #0]
 8000fe0:	6922      	ldr	r2, [r4, #16]
 8000fe2:	f003 0306 	and.w	r3, r3, #6
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf02      	ittt	eq
 8000fea:	68e5      	ldreq	r5, [r4, #12]
 8000fec:	6833      	ldreq	r3, [r6, #0]
 8000fee:	1aed      	subeq	r5, r5, r3
 8000ff0:	68a3      	ldr	r3, [r4, #8]
 8000ff2:	bf0c      	ite	eq
 8000ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ff8:	2500      	movne	r5, #0
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	bfc4      	itt	gt
 8000ffe:	1a9b      	subgt	r3, r3, r2
 8001000:	18ed      	addgt	r5, r5, r3
 8001002:	2600      	movs	r6, #0
 8001004:	341a      	adds	r4, #26
 8001006:	42b5      	cmp	r5, r6
 8001008:	d11a      	bne.n	8001040 <_printf_common+0xc8>
 800100a:	2000      	movs	r0, #0
 800100c:	e008      	b.n	8001020 <_printf_common+0xa8>
 800100e:	2301      	movs	r3, #1
 8001010:	4652      	mov	r2, sl
 8001012:	4641      	mov	r1, r8
 8001014:	4638      	mov	r0, r7
 8001016:	47c8      	blx	r9
 8001018:	3001      	adds	r0, #1
 800101a:	d103      	bne.n	8001024 <_printf_common+0xac>
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001024:	3501      	adds	r5, #1
 8001026:	e7c6      	b.n	8000fb6 <_printf_common+0x3e>
 8001028:	18e1      	adds	r1, r4, r3
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	2030      	movs	r0, #48	@ 0x30
 800102e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001032:	4422      	add	r2, r4
 8001034:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001038:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800103c:	3302      	adds	r3, #2
 800103e:	e7c7      	b.n	8000fd0 <_printf_common+0x58>
 8001040:	2301      	movs	r3, #1
 8001042:	4622      	mov	r2, r4
 8001044:	4641      	mov	r1, r8
 8001046:	4638      	mov	r0, r7
 8001048:	47c8      	blx	r9
 800104a:	3001      	adds	r0, #1
 800104c:	d0e6      	beq.n	800101c <_printf_common+0xa4>
 800104e:	3601      	adds	r6, #1
 8001050:	e7d9      	b.n	8001006 <_printf_common+0x8e>
	...

08001054 <_printf_i>:
 8001054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001058:	7e0f      	ldrb	r7, [r1, #24]
 800105a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800105c:	2f78      	cmp	r7, #120	@ 0x78
 800105e:	4691      	mov	r9, r2
 8001060:	4680      	mov	r8, r0
 8001062:	460c      	mov	r4, r1
 8001064:	469a      	mov	sl, r3
 8001066:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800106a:	d807      	bhi.n	800107c <_printf_i+0x28>
 800106c:	2f62      	cmp	r7, #98	@ 0x62
 800106e:	d80a      	bhi.n	8001086 <_printf_i+0x32>
 8001070:	2f00      	cmp	r7, #0
 8001072:	f000 80d2 	beq.w	800121a <_printf_i+0x1c6>
 8001076:	2f58      	cmp	r7, #88	@ 0x58
 8001078:	f000 80b9 	beq.w	80011ee <_printf_i+0x19a>
 800107c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001080:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001084:	e03a      	b.n	80010fc <_printf_i+0xa8>
 8001086:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800108a:	2b15      	cmp	r3, #21
 800108c:	d8f6      	bhi.n	800107c <_printf_i+0x28>
 800108e:	a101      	add	r1, pc, #4	@ (adr r1, 8001094 <_printf_i+0x40>)
 8001090:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001094:	080010ed 	.word	0x080010ed
 8001098:	08001101 	.word	0x08001101
 800109c:	0800107d 	.word	0x0800107d
 80010a0:	0800107d 	.word	0x0800107d
 80010a4:	0800107d 	.word	0x0800107d
 80010a8:	0800107d 	.word	0x0800107d
 80010ac:	08001101 	.word	0x08001101
 80010b0:	0800107d 	.word	0x0800107d
 80010b4:	0800107d 	.word	0x0800107d
 80010b8:	0800107d 	.word	0x0800107d
 80010bc:	0800107d 	.word	0x0800107d
 80010c0:	08001201 	.word	0x08001201
 80010c4:	0800112b 	.word	0x0800112b
 80010c8:	080011bb 	.word	0x080011bb
 80010cc:	0800107d 	.word	0x0800107d
 80010d0:	0800107d 	.word	0x0800107d
 80010d4:	08001223 	.word	0x08001223
 80010d8:	0800107d 	.word	0x0800107d
 80010dc:	0800112b 	.word	0x0800112b
 80010e0:	0800107d 	.word	0x0800107d
 80010e4:	0800107d 	.word	0x0800107d
 80010e8:	080011c3 	.word	0x080011c3
 80010ec:	6833      	ldr	r3, [r6, #0]
 80010ee:	1d1a      	adds	r2, r3, #4
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6032      	str	r2, [r6, #0]
 80010f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80010f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80010fc:	2301      	movs	r3, #1
 80010fe:	e09d      	b.n	800123c <_printf_i+0x1e8>
 8001100:	6833      	ldr	r3, [r6, #0]
 8001102:	6820      	ldr	r0, [r4, #0]
 8001104:	1d19      	adds	r1, r3, #4
 8001106:	6031      	str	r1, [r6, #0]
 8001108:	0606      	lsls	r6, r0, #24
 800110a:	d501      	bpl.n	8001110 <_printf_i+0xbc>
 800110c:	681d      	ldr	r5, [r3, #0]
 800110e:	e003      	b.n	8001118 <_printf_i+0xc4>
 8001110:	0645      	lsls	r5, r0, #25
 8001112:	d5fb      	bpl.n	800110c <_printf_i+0xb8>
 8001114:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001118:	2d00      	cmp	r5, #0
 800111a:	da03      	bge.n	8001124 <_printf_i+0xd0>
 800111c:	232d      	movs	r3, #45	@ 0x2d
 800111e:	426d      	negs	r5, r5
 8001120:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001124:	4859      	ldr	r0, [pc, #356]	@ (800128c <_printf_i+0x238>)
 8001126:	230a      	movs	r3, #10
 8001128:	e011      	b.n	800114e <_printf_i+0xfa>
 800112a:	6821      	ldr	r1, [r4, #0]
 800112c:	6833      	ldr	r3, [r6, #0]
 800112e:	0608      	lsls	r0, r1, #24
 8001130:	f853 5b04 	ldr.w	r5, [r3], #4
 8001134:	d402      	bmi.n	800113c <_printf_i+0xe8>
 8001136:	0649      	lsls	r1, r1, #25
 8001138:	bf48      	it	mi
 800113a:	b2ad      	uxthmi	r5, r5
 800113c:	2f6f      	cmp	r7, #111	@ 0x6f
 800113e:	4853      	ldr	r0, [pc, #332]	@ (800128c <_printf_i+0x238>)
 8001140:	6033      	str	r3, [r6, #0]
 8001142:	bf14      	ite	ne
 8001144:	230a      	movne	r3, #10
 8001146:	2308      	moveq	r3, #8
 8001148:	2100      	movs	r1, #0
 800114a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800114e:	6866      	ldr	r6, [r4, #4]
 8001150:	60a6      	str	r6, [r4, #8]
 8001152:	2e00      	cmp	r6, #0
 8001154:	bfa2      	ittt	ge
 8001156:	6821      	ldrge	r1, [r4, #0]
 8001158:	f021 0104 	bicge.w	r1, r1, #4
 800115c:	6021      	strge	r1, [r4, #0]
 800115e:	b90d      	cbnz	r5, 8001164 <_printf_i+0x110>
 8001160:	2e00      	cmp	r6, #0
 8001162:	d04b      	beq.n	80011fc <_printf_i+0x1a8>
 8001164:	4616      	mov	r6, r2
 8001166:	fbb5 f1f3 	udiv	r1, r5, r3
 800116a:	fb03 5711 	mls	r7, r3, r1, r5
 800116e:	5dc7      	ldrb	r7, [r0, r7]
 8001170:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001174:	462f      	mov	r7, r5
 8001176:	42bb      	cmp	r3, r7
 8001178:	460d      	mov	r5, r1
 800117a:	d9f4      	bls.n	8001166 <_printf_i+0x112>
 800117c:	2b08      	cmp	r3, #8
 800117e:	d10b      	bne.n	8001198 <_printf_i+0x144>
 8001180:	6823      	ldr	r3, [r4, #0]
 8001182:	07df      	lsls	r7, r3, #31
 8001184:	d508      	bpl.n	8001198 <_printf_i+0x144>
 8001186:	6923      	ldr	r3, [r4, #16]
 8001188:	6861      	ldr	r1, [r4, #4]
 800118a:	4299      	cmp	r1, r3
 800118c:	bfde      	ittt	le
 800118e:	2330      	movle	r3, #48	@ 0x30
 8001190:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001194:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001198:	1b92      	subs	r2, r2, r6
 800119a:	6122      	str	r2, [r4, #16]
 800119c:	f8cd a000 	str.w	sl, [sp]
 80011a0:	464b      	mov	r3, r9
 80011a2:	aa03      	add	r2, sp, #12
 80011a4:	4621      	mov	r1, r4
 80011a6:	4640      	mov	r0, r8
 80011a8:	f7ff fee6 	bl	8000f78 <_printf_common>
 80011ac:	3001      	adds	r0, #1
 80011ae:	d14a      	bne.n	8001246 <_printf_i+0x1f2>
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	b004      	add	sp, #16
 80011b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	f043 0320 	orr.w	r3, r3, #32
 80011c0:	6023      	str	r3, [r4, #0]
 80011c2:	4833      	ldr	r0, [pc, #204]	@ (8001290 <_printf_i+0x23c>)
 80011c4:	2778      	movs	r7, #120	@ 0x78
 80011c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80011ca:	6823      	ldr	r3, [r4, #0]
 80011cc:	6831      	ldr	r1, [r6, #0]
 80011ce:	061f      	lsls	r7, r3, #24
 80011d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80011d4:	d402      	bmi.n	80011dc <_printf_i+0x188>
 80011d6:	065f      	lsls	r7, r3, #25
 80011d8:	bf48      	it	mi
 80011da:	b2ad      	uxthmi	r5, r5
 80011dc:	6031      	str	r1, [r6, #0]
 80011de:	07d9      	lsls	r1, r3, #31
 80011e0:	bf44      	itt	mi
 80011e2:	f043 0320 	orrmi.w	r3, r3, #32
 80011e6:	6023      	strmi	r3, [r4, #0]
 80011e8:	b11d      	cbz	r5, 80011f2 <_printf_i+0x19e>
 80011ea:	2310      	movs	r3, #16
 80011ec:	e7ac      	b.n	8001148 <_printf_i+0xf4>
 80011ee:	4827      	ldr	r0, [pc, #156]	@ (800128c <_printf_i+0x238>)
 80011f0:	e7e9      	b.n	80011c6 <_printf_i+0x172>
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	f023 0320 	bic.w	r3, r3, #32
 80011f8:	6023      	str	r3, [r4, #0]
 80011fa:	e7f6      	b.n	80011ea <_printf_i+0x196>
 80011fc:	4616      	mov	r6, r2
 80011fe:	e7bd      	b.n	800117c <_printf_i+0x128>
 8001200:	6833      	ldr	r3, [r6, #0]
 8001202:	6825      	ldr	r5, [r4, #0]
 8001204:	6961      	ldr	r1, [r4, #20]
 8001206:	1d18      	adds	r0, r3, #4
 8001208:	6030      	str	r0, [r6, #0]
 800120a:	062e      	lsls	r6, r5, #24
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	d501      	bpl.n	8001214 <_printf_i+0x1c0>
 8001210:	6019      	str	r1, [r3, #0]
 8001212:	e002      	b.n	800121a <_printf_i+0x1c6>
 8001214:	0668      	lsls	r0, r5, #25
 8001216:	d5fb      	bpl.n	8001210 <_printf_i+0x1bc>
 8001218:	8019      	strh	r1, [r3, #0]
 800121a:	2300      	movs	r3, #0
 800121c:	6123      	str	r3, [r4, #16]
 800121e:	4616      	mov	r6, r2
 8001220:	e7bc      	b.n	800119c <_printf_i+0x148>
 8001222:	6833      	ldr	r3, [r6, #0]
 8001224:	1d1a      	adds	r2, r3, #4
 8001226:	6032      	str	r2, [r6, #0]
 8001228:	681e      	ldr	r6, [r3, #0]
 800122a:	6862      	ldr	r2, [r4, #4]
 800122c:	2100      	movs	r1, #0
 800122e:	4630      	mov	r0, r6
 8001230:	f7fe ffee 	bl	8000210 <memchr>
 8001234:	b108      	cbz	r0, 800123a <_printf_i+0x1e6>
 8001236:	1b80      	subs	r0, r0, r6
 8001238:	6060      	str	r0, [r4, #4]
 800123a:	6863      	ldr	r3, [r4, #4]
 800123c:	6123      	str	r3, [r4, #16]
 800123e:	2300      	movs	r3, #0
 8001240:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001244:	e7aa      	b.n	800119c <_printf_i+0x148>
 8001246:	6923      	ldr	r3, [r4, #16]
 8001248:	4632      	mov	r2, r6
 800124a:	4649      	mov	r1, r9
 800124c:	4640      	mov	r0, r8
 800124e:	47d0      	blx	sl
 8001250:	3001      	adds	r0, #1
 8001252:	d0ad      	beq.n	80011b0 <_printf_i+0x15c>
 8001254:	6823      	ldr	r3, [r4, #0]
 8001256:	079b      	lsls	r3, r3, #30
 8001258:	d413      	bmi.n	8001282 <_printf_i+0x22e>
 800125a:	68e0      	ldr	r0, [r4, #12]
 800125c:	9b03      	ldr	r3, [sp, #12]
 800125e:	4298      	cmp	r0, r3
 8001260:	bfb8      	it	lt
 8001262:	4618      	movlt	r0, r3
 8001264:	e7a6      	b.n	80011b4 <_printf_i+0x160>
 8001266:	2301      	movs	r3, #1
 8001268:	4632      	mov	r2, r6
 800126a:	4649      	mov	r1, r9
 800126c:	4640      	mov	r0, r8
 800126e:	47d0      	blx	sl
 8001270:	3001      	adds	r0, #1
 8001272:	d09d      	beq.n	80011b0 <_printf_i+0x15c>
 8001274:	3501      	adds	r5, #1
 8001276:	68e3      	ldr	r3, [r4, #12]
 8001278:	9903      	ldr	r1, [sp, #12]
 800127a:	1a5b      	subs	r3, r3, r1
 800127c:	42ab      	cmp	r3, r5
 800127e:	dcf2      	bgt.n	8001266 <_printf_i+0x212>
 8001280:	e7eb      	b.n	800125a <_printf_i+0x206>
 8001282:	2500      	movs	r5, #0
 8001284:	f104 0619 	add.w	r6, r4, #25
 8001288:	e7f5      	b.n	8001276 <_printf_i+0x222>
 800128a:	bf00      	nop
 800128c:	0800167f 	.word	0x0800167f
 8001290:	08001690 	.word	0x08001690

08001294 <__sflush_r>:
 8001294:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800129c:	0716      	lsls	r6, r2, #28
 800129e:	4605      	mov	r5, r0
 80012a0:	460c      	mov	r4, r1
 80012a2:	d454      	bmi.n	800134e <__sflush_r+0xba>
 80012a4:	684b      	ldr	r3, [r1, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	dc02      	bgt.n	80012b0 <__sflush_r+0x1c>
 80012aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	dd48      	ble.n	8001342 <__sflush_r+0xae>
 80012b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012b2:	2e00      	cmp	r6, #0
 80012b4:	d045      	beq.n	8001342 <__sflush_r+0xae>
 80012b6:	2300      	movs	r3, #0
 80012b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80012bc:	682f      	ldr	r7, [r5, #0]
 80012be:	6a21      	ldr	r1, [r4, #32]
 80012c0:	602b      	str	r3, [r5, #0]
 80012c2:	d030      	beq.n	8001326 <__sflush_r+0x92>
 80012c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80012c6:	89a3      	ldrh	r3, [r4, #12]
 80012c8:	0759      	lsls	r1, r3, #29
 80012ca:	d505      	bpl.n	80012d8 <__sflush_r+0x44>
 80012cc:	6863      	ldr	r3, [r4, #4]
 80012ce:	1ad2      	subs	r2, r2, r3
 80012d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80012d2:	b10b      	cbz	r3, 80012d8 <__sflush_r+0x44>
 80012d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012d6:	1ad2      	subs	r2, r2, r3
 80012d8:	2300      	movs	r3, #0
 80012da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012dc:	6a21      	ldr	r1, [r4, #32]
 80012de:	4628      	mov	r0, r5
 80012e0:	47b0      	blx	r6
 80012e2:	1c43      	adds	r3, r0, #1
 80012e4:	89a3      	ldrh	r3, [r4, #12]
 80012e6:	d106      	bne.n	80012f6 <__sflush_r+0x62>
 80012e8:	6829      	ldr	r1, [r5, #0]
 80012ea:	291d      	cmp	r1, #29
 80012ec:	d82b      	bhi.n	8001346 <__sflush_r+0xb2>
 80012ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001398 <__sflush_r+0x104>)
 80012f0:	410a      	asrs	r2, r1
 80012f2:	07d6      	lsls	r6, r2, #31
 80012f4:	d427      	bmi.n	8001346 <__sflush_r+0xb2>
 80012f6:	2200      	movs	r2, #0
 80012f8:	6062      	str	r2, [r4, #4]
 80012fa:	04d9      	lsls	r1, r3, #19
 80012fc:	6922      	ldr	r2, [r4, #16]
 80012fe:	6022      	str	r2, [r4, #0]
 8001300:	d504      	bpl.n	800130c <__sflush_r+0x78>
 8001302:	1c42      	adds	r2, r0, #1
 8001304:	d101      	bne.n	800130a <__sflush_r+0x76>
 8001306:	682b      	ldr	r3, [r5, #0]
 8001308:	b903      	cbnz	r3, 800130c <__sflush_r+0x78>
 800130a:	6560      	str	r0, [r4, #84]	@ 0x54
 800130c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800130e:	602f      	str	r7, [r5, #0]
 8001310:	b1b9      	cbz	r1, 8001342 <__sflush_r+0xae>
 8001312:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001316:	4299      	cmp	r1, r3
 8001318:	d002      	beq.n	8001320 <__sflush_r+0x8c>
 800131a:	4628      	mov	r0, r5
 800131c:	f7ff fbf2 	bl	8000b04 <_free_r>
 8001320:	2300      	movs	r3, #0
 8001322:	6363      	str	r3, [r4, #52]	@ 0x34
 8001324:	e00d      	b.n	8001342 <__sflush_r+0xae>
 8001326:	2301      	movs	r3, #1
 8001328:	4628      	mov	r0, r5
 800132a:	47b0      	blx	r6
 800132c:	4602      	mov	r2, r0
 800132e:	1c50      	adds	r0, r2, #1
 8001330:	d1c9      	bne.n	80012c6 <__sflush_r+0x32>
 8001332:	682b      	ldr	r3, [r5, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0c6      	beq.n	80012c6 <__sflush_r+0x32>
 8001338:	2b1d      	cmp	r3, #29
 800133a:	d001      	beq.n	8001340 <__sflush_r+0xac>
 800133c:	2b16      	cmp	r3, #22
 800133e:	d11e      	bne.n	800137e <__sflush_r+0xea>
 8001340:	602f      	str	r7, [r5, #0]
 8001342:	2000      	movs	r0, #0
 8001344:	e022      	b.n	800138c <__sflush_r+0xf8>
 8001346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800134a:	b21b      	sxth	r3, r3
 800134c:	e01b      	b.n	8001386 <__sflush_r+0xf2>
 800134e:	690f      	ldr	r7, [r1, #16]
 8001350:	2f00      	cmp	r7, #0
 8001352:	d0f6      	beq.n	8001342 <__sflush_r+0xae>
 8001354:	0793      	lsls	r3, r2, #30
 8001356:	680e      	ldr	r6, [r1, #0]
 8001358:	bf08      	it	eq
 800135a:	694b      	ldreq	r3, [r1, #20]
 800135c:	600f      	str	r7, [r1, #0]
 800135e:	bf18      	it	ne
 8001360:	2300      	movne	r3, #0
 8001362:	eba6 0807 	sub.w	r8, r6, r7
 8001366:	608b      	str	r3, [r1, #8]
 8001368:	f1b8 0f00 	cmp.w	r8, #0
 800136c:	dde9      	ble.n	8001342 <__sflush_r+0xae>
 800136e:	6a21      	ldr	r1, [r4, #32]
 8001370:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001372:	4643      	mov	r3, r8
 8001374:	463a      	mov	r2, r7
 8001376:	4628      	mov	r0, r5
 8001378:	47b0      	blx	r6
 800137a:	2800      	cmp	r0, #0
 800137c:	dc08      	bgt.n	8001390 <__sflush_r+0xfc>
 800137e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001386:	81a3      	strh	r3, [r4, #12]
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001390:	4407      	add	r7, r0
 8001392:	eba8 0800 	sub.w	r8, r8, r0
 8001396:	e7e7      	b.n	8001368 <__sflush_r+0xd4>
 8001398:	dfbffffe 	.word	0xdfbffffe

0800139c <_fflush_r>:
 800139c:	b538      	push	{r3, r4, r5, lr}
 800139e:	690b      	ldr	r3, [r1, #16]
 80013a0:	4605      	mov	r5, r0
 80013a2:	460c      	mov	r4, r1
 80013a4:	b913      	cbnz	r3, 80013ac <_fflush_r+0x10>
 80013a6:	2500      	movs	r5, #0
 80013a8:	4628      	mov	r0, r5
 80013aa:	bd38      	pop	{r3, r4, r5, pc}
 80013ac:	b118      	cbz	r0, 80013b6 <_fflush_r+0x1a>
 80013ae:	6a03      	ldr	r3, [r0, #32]
 80013b0:	b90b      	cbnz	r3, 80013b6 <_fflush_r+0x1a>
 80013b2:	f7ff fa9f 	bl	80008f4 <__sinit>
 80013b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f3      	beq.n	80013a6 <_fflush_r+0xa>
 80013be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80013c0:	07d0      	lsls	r0, r2, #31
 80013c2:	d404      	bmi.n	80013ce <_fflush_r+0x32>
 80013c4:	0599      	lsls	r1, r3, #22
 80013c6:	d402      	bmi.n	80013ce <_fflush_r+0x32>
 80013c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013ca:	f7ff fb98 	bl	8000afe <__retarget_lock_acquire_recursive>
 80013ce:	4628      	mov	r0, r5
 80013d0:	4621      	mov	r1, r4
 80013d2:	f7ff ff5f 	bl	8001294 <__sflush_r>
 80013d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80013d8:	07da      	lsls	r2, r3, #31
 80013da:	4605      	mov	r5, r0
 80013dc:	d4e4      	bmi.n	80013a8 <_fflush_r+0xc>
 80013de:	89a3      	ldrh	r3, [r4, #12]
 80013e0:	059b      	lsls	r3, r3, #22
 80013e2:	d4e1      	bmi.n	80013a8 <_fflush_r+0xc>
 80013e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013e6:	f7ff fb8b 	bl	8000b00 <__retarget_lock_release_recursive>
 80013ea:	e7dd      	b.n	80013a8 <_fflush_r+0xc>

080013ec <__swbuf_r>:
 80013ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ee:	460e      	mov	r6, r1
 80013f0:	4614      	mov	r4, r2
 80013f2:	4605      	mov	r5, r0
 80013f4:	b118      	cbz	r0, 80013fe <__swbuf_r+0x12>
 80013f6:	6a03      	ldr	r3, [r0, #32]
 80013f8:	b90b      	cbnz	r3, 80013fe <__swbuf_r+0x12>
 80013fa:	f7ff fa7b 	bl	80008f4 <__sinit>
 80013fe:	69a3      	ldr	r3, [r4, #24]
 8001400:	60a3      	str	r3, [r4, #8]
 8001402:	89a3      	ldrh	r3, [r4, #12]
 8001404:	071a      	lsls	r2, r3, #28
 8001406:	d501      	bpl.n	800140c <__swbuf_r+0x20>
 8001408:	6923      	ldr	r3, [r4, #16]
 800140a:	b943      	cbnz	r3, 800141e <__swbuf_r+0x32>
 800140c:	4621      	mov	r1, r4
 800140e:	4628      	mov	r0, r5
 8001410:	f000 f82a 	bl	8001468 <__swsetup_r>
 8001414:	b118      	cbz	r0, 800141e <__swbuf_r+0x32>
 8001416:	f04f 37ff 	mov.w	r7, #4294967295
 800141a:	4638      	mov	r0, r7
 800141c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800141e:	6823      	ldr	r3, [r4, #0]
 8001420:	6922      	ldr	r2, [r4, #16]
 8001422:	1a98      	subs	r0, r3, r2
 8001424:	6963      	ldr	r3, [r4, #20]
 8001426:	b2f6      	uxtb	r6, r6
 8001428:	4283      	cmp	r3, r0
 800142a:	4637      	mov	r7, r6
 800142c:	dc05      	bgt.n	800143a <__swbuf_r+0x4e>
 800142e:	4621      	mov	r1, r4
 8001430:	4628      	mov	r0, r5
 8001432:	f7ff ffb3 	bl	800139c <_fflush_r>
 8001436:	2800      	cmp	r0, #0
 8001438:	d1ed      	bne.n	8001416 <__swbuf_r+0x2a>
 800143a:	68a3      	ldr	r3, [r4, #8]
 800143c:	3b01      	subs	r3, #1
 800143e:	60a3      	str	r3, [r4, #8]
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	6022      	str	r2, [r4, #0]
 8001446:	701e      	strb	r6, [r3, #0]
 8001448:	6962      	ldr	r2, [r4, #20]
 800144a:	1c43      	adds	r3, r0, #1
 800144c:	429a      	cmp	r2, r3
 800144e:	d004      	beq.n	800145a <__swbuf_r+0x6e>
 8001450:	89a3      	ldrh	r3, [r4, #12]
 8001452:	07db      	lsls	r3, r3, #31
 8001454:	d5e1      	bpl.n	800141a <__swbuf_r+0x2e>
 8001456:	2e0a      	cmp	r6, #10
 8001458:	d1df      	bne.n	800141a <__swbuf_r+0x2e>
 800145a:	4621      	mov	r1, r4
 800145c:	4628      	mov	r0, r5
 800145e:	f7ff ff9d 	bl	800139c <_fflush_r>
 8001462:	2800      	cmp	r0, #0
 8001464:	d0d9      	beq.n	800141a <__swbuf_r+0x2e>
 8001466:	e7d6      	b.n	8001416 <__swbuf_r+0x2a>

08001468 <__swsetup_r>:
 8001468:	b538      	push	{r3, r4, r5, lr}
 800146a:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <__swsetup_r+0xa8>)
 800146c:	4605      	mov	r5, r0
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	460c      	mov	r4, r1
 8001472:	b118      	cbz	r0, 800147c <__swsetup_r+0x14>
 8001474:	6a03      	ldr	r3, [r0, #32]
 8001476:	b90b      	cbnz	r3, 800147c <__swsetup_r+0x14>
 8001478:	f7ff fa3c 	bl	80008f4 <__sinit>
 800147c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001480:	0719      	lsls	r1, r3, #28
 8001482:	d422      	bmi.n	80014ca <__swsetup_r+0x62>
 8001484:	06da      	lsls	r2, r3, #27
 8001486:	d407      	bmi.n	8001498 <__swsetup_r+0x30>
 8001488:	2209      	movs	r2, #9
 800148a:	602a      	str	r2, [r5, #0]
 800148c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001490:	81a3      	strh	r3, [r4, #12]
 8001492:	f04f 30ff 	mov.w	r0, #4294967295
 8001496:	e033      	b.n	8001500 <__swsetup_r+0x98>
 8001498:	0758      	lsls	r0, r3, #29
 800149a:	d512      	bpl.n	80014c2 <__swsetup_r+0x5a>
 800149c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800149e:	b141      	cbz	r1, 80014b2 <__swsetup_r+0x4a>
 80014a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80014a4:	4299      	cmp	r1, r3
 80014a6:	d002      	beq.n	80014ae <__swsetup_r+0x46>
 80014a8:	4628      	mov	r0, r5
 80014aa:	f7ff fb2b 	bl	8000b04 <_free_r>
 80014ae:	2300      	movs	r3, #0
 80014b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80014b2:	89a3      	ldrh	r3, [r4, #12]
 80014b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80014b8:	81a3      	strh	r3, [r4, #12]
 80014ba:	2300      	movs	r3, #0
 80014bc:	6063      	str	r3, [r4, #4]
 80014be:	6923      	ldr	r3, [r4, #16]
 80014c0:	6023      	str	r3, [r4, #0]
 80014c2:	89a3      	ldrh	r3, [r4, #12]
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	81a3      	strh	r3, [r4, #12]
 80014ca:	6923      	ldr	r3, [r4, #16]
 80014cc:	b94b      	cbnz	r3, 80014e2 <__swsetup_r+0x7a>
 80014ce:	89a3      	ldrh	r3, [r4, #12]
 80014d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80014d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014d8:	d003      	beq.n	80014e2 <__swsetup_r+0x7a>
 80014da:	4621      	mov	r1, r4
 80014dc:	4628      	mov	r0, r5
 80014de:	f000 f84f 	bl	8001580 <__smakebuf_r>
 80014e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014e6:	f013 0201 	ands.w	r2, r3, #1
 80014ea:	d00a      	beq.n	8001502 <__swsetup_r+0x9a>
 80014ec:	2200      	movs	r2, #0
 80014ee:	60a2      	str	r2, [r4, #8]
 80014f0:	6962      	ldr	r2, [r4, #20]
 80014f2:	4252      	negs	r2, r2
 80014f4:	61a2      	str	r2, [r4, #24]
 80014f6:	6922      	ldr	r2, [r4, #16]
 80014f8:	b942      	cbnz	r2, 800150c <__swsetup_r+0xa4>
 80014fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80014fe:	d1c5      	bne.n	800148c <__swsetup_r+0x24>
 8001500:	bd38      	pop	{r3, r4, r5, pc}
 8001502:	0799      	lsls	r1, r3, #30
 8001504:	bf58      	it	pl
 8001506:	6962      	ldrpl	r2, [r4, #20]
 8001508:	60a2      	str	r2, [r4, #8]
 800150a:	e7f4      	b.n	80014f6 <__swsetup_r+0x8e>
 800150c:	2000      	movs	r0, #0
 800150e:	e7f7      	b.n	8001500 <__swsetup_r+0x98>
 8001510:	2000000c 	.word	0x2000000c

08001514 <_sbrk_r>:
 8001514:	b538      	push	{r3, r4, r5, lr}
 8001516:	4d06      	ldr	r5, [pc, #24]	@ (8001530 <_sbrk_r+0x1c>)
 8001518:	2300      	movs	r3, #0
 800151a:	4604      	mov	r4, r0
 800151c:	4608      	mov	r0, r1
 800151e:	602b      	str	r3, [r5, #0]
 8001520:	f7ff f866 	bl	80005f0 <_sbrk>
 8001524:	1c43      	adds	r3, r0, #1
 8001526:	d102      	bne.n	800152e <_sbrk_r+0x1a>
 8001528:	682b      	ldr	r3, [r5, #0]
 800152a:	b103      	cbz	r3, 800152e <_sbrk_r+0x1a>
 800152c:	6023      	str	r3, [r4, #0]
 800152e:	bd38      	pop	{r3, r4, r5, pc}
 8001530:	200001d0 	.word	0x200001d0

08001534 <__swhatbuf_r>:
 8001534:	b570      	push	{r4, r5, r6, lr}
 8001536:	460c      	mov	r4, r1
 8001538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800153c:	2900      	cmp	r1, #0
 800153e:	b096      	sub	sp, #88	@ 0x58
 8001540:	4615      	mov	r5, r2
 8001542:	461e      	mov	r6, r3
 8001544:	da0d      	bge.n	8001562 <__swhatbuf_r+0x2e>
 8001546:	89a3      	ldrh	r3, [r4, #12]
 8001548:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800154c:	f04f 0100 	mov.w	r1, #0
 8001550:	bf14      	ite	ne
 8001552:	2340      	movne	r3, #64	@ 0x40
 8001554:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001558:	2000      	movs	r0, #0
 800155a:	6031      	str	r1, [r6, #0]
 800155c:	602b      	str	r3, [r5, #0]
 800155e:	b016      	add	sp, #88	@ 0x58
 8001560:	bd70      	pop	{r4, r5, r6, pc}
 8001562:	466a      	mov	r2, sp
 8001564:	f000 f848 	bl	80015f8 <_fstat_r>
 8001568:	2800      	cmp	r0, #0
 800156a:	dbec      	blt.n	8001546 <__swhatbuf_r+0x12>
 800156c:	9901      	ldr	r1, [sp, #4]
 800156e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001572:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001576:	4259      	negs	r1, r3
 8001578:	4159      	adcs	r1, r3
 800157a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800157e:	e7eb      	b.n	8001558 <__swhatbuf_r+0x24>

08001580 <__smakebuf_r>:
 8001580:	898b      	ldrh	r3, [r1, #12]
 8001582:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001584:	079d      	lsls	r5, r3, #30
 8001586:	4606      	mov	r6, r0
 8001588:	460c      	mov	r4, r1
 800158a:	d507      	bpl.n	800159c <__smakebuf_r+0x1c>
 800158c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001590:	6023      	str	r3, [r4, #0]
 8001592:	6123      	str	r3, [r4, #16]
 8001594:	2301      	movs	r3, #1
 8001596:	6163      	str	r3, [r4, #20]
 8001598:	b003      	add	sp, #12
 800159a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800159c:	ab01      	add	r3, sp, #4
 800159e:	466a      	mov	r2, sp
 80015a0:	f7ff ffc8 	bl	8001534 <__swhatbuf_r>
 80015a4:	9f00      	ldr	r7, [sp, #0]
 80015a6:	4605      	mov	r5, r0
 80015a8:	4639      	mov	r1, r7
 80015aa:	4630      	mov	r0, r6
 80015ac:	f7ff fb16 	bl	8000bdc <_malloc_r>
 80015b0:	b948      	cbnz	r0, 80015c6 <__smakebuf_r+0x46>
 80015b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015b6:	059a      	lsls	r2, r3, #22
 80015b8:	d4ee      	bmi.n	8001598 <__smakebuf_r+0x18>
 80015ba:	f023 0303 	bic.w	r3, r3, #3
 80015be:	f043 0302 	orr.w	r3, r3, #2
 80015c2:	81a3      	strh	r3, [r4, #12]
 80015c4:	e7e2      	b.n	800158c <__smakebuf_r+0xc>
 80015c6:	89a3      	ldrh	r3, [r4, #12]
 80015c8:	6020      	str	r0, [r4, #0]
 80015ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015ce:	81a3      	strh	r3, [r4, #12]
 80015d0:	9b01      	ldr	r3, [sp, #4]
 80015d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80015d6:	b15b      	cbz	r3, 80015f0 <__smakebuf_r+0x70>
 80015d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015dc:	4630      	mov	r0, r6
 80015de:	f000 f81d 	bl	800161c <_isatty_r>
 80015e2:	b128      	cbz	r0, 80015f0 <__smakebuf_r+0x70>
 80015e4:	89a3      	ldrh	r3, [r4, #12]
 80015e6:	f023 0303 	bic.w	r3, r3, #3
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	81a3      	strh	r3, [r4, #12]
 80015f0:	89a3      	ldrh	r3, [r4, #12]
 80015f2:	431d      	orrs	r5, r3
 80015f4:	81a5      	strh	r5, [r4, #12]
 80015f6:	e7cf      	b.n	8001598 <__smakebuf_r+0x18>

080015f8 <_fstat_r>:
 80015f8:	b538      	push	{r3, r4, r5, lr}
 80015fa:	4d07      	ldr	r5, [pc, #28]	@ (8001618 <_fstat_r+0x20>)
 80015fc:	2300      	movs	r3, #0
 80015fe:	4604      	mov	r4, r0
 8001600:	4608      	mov	r0, r1
 8001602:	4611      	mov	r1, r2
 8001604:	602b      	str	r3, [r5, #0]
 8001606:	f7fe ffca 	bl	800059e <_fstat>
 800160a:	1c43      	adds	r3, r0, #1
 800160c:	d102      	bne.n	8001614 <_fstat_r+0x1c>
 800160e:	682b      	ldr	r3, [r5, #0]
 8001610:	b103      	cbz	r3, 8001614 <_fstat_r+0x1c>
 8001612:	6023      	str	r3, [r4, #0]
 8001614:	bd38      	pop	{r3, r4, r5, pc}
 8001616:	bf00      	nop
 8001618:	200001d0 	.word	0x200001d0

0800161c <_isatty_r>:
 800161c:	b538      	push	{r3, r4, r5, lr}
 800161e:	4d06      	ldr	r5, [pc, #24]	@ (8001638 <_isatty_r+0x1c>)
 8001620:	2300      	movs	r3, #0
 8001622:	4604      	mov	r4, r0
 8001624:	4608      	mov	r0, r1
 8001626:	602b      	str	r3, [r5, #0]
 8001628:	f7fe ffc9 	bl	80005be <_isatty>
 800162c:	1c43      	adds	r3, r0, #1
 800162e:	d102      	bne.n	8001636 <_isatty_r+0x1a>
 8001630:	682b      	ldr	r3, [r5, #0]
 8001632:	b103      	cbz	r3, 8001636 <_isatty_r+0x1a>
 8001634:	6023      	str	r3, [r4, #0]
 8001636:	bd38      	pop	{r3, r4, r5, pc}
 8001638:	200001d0 	.word	0x200001d0

0800163c <_init>:
 800163c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800163e:	bf00      	nop
 8001640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001642:	bc08      	pop	{r3}
 8001644:	469e      	mov	lr, r3
 8001646:	4770      	bx	lr

08001648 <_fini>:
 8001648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164a:	bf00      	nop
 800164c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800164e:	bc08      	pop	{r3}
 8001650:	469e      	mov	lr, r3
 8001652:	4770      	bx	lr
