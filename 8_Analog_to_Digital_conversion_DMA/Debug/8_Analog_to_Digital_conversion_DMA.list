
8_Analog_to_Digital_conversion_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08001578  08001578  00002578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015e4  080015e4  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  080015e4  080015e4  000025e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080015ec  080015ec  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015ec  080015ec  000025ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015f0  080015f0  000025f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080015f4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001650  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001650  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011dc  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005b0  00000000  00000000  00004268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  00004818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000f8  00000000  00000000  00004988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a964  00000000  00000000  00004a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000271b  00000000  00000000  0001f3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000907da  00000000  00000000  00021aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b22d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bd8  00000000  00000000  000b231c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  000b2ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001560 	.word	0x08001560

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08001560 	.word	0x08001560

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <adc_dma_init>:


uint16_t adc_raw_data[NUM_OF_CHANNELS];

void adc_dma_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/******************************************************* GPIO CONFIGURATION *******************************************************/
	// Enable Clock access to the ADC GPIO pin's port
	RCC->AHB1ENR |= GPIOAEN;
 80002b4:	4b47      	ldr	r3, [pc, #284]	@ (80003d4 <adc_dma_init+0x124>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b8:	4a46      	ldr	r2, [pc, #280]	@ (80003d4 <adc_dma_init+0x124>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	@ 0x30

	// Set PA0 and PA1 mode to analog mode
	GPIOA->MODER = GPIOA->MODER | (1U<<0) | (1U<<1);	//PIN 0
 80002c0:	4b45      	ldr	r3, [pc, #276]	@ (80003d8 <adc_dma_init+0x128>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a44      	ldr	r2, [pc, #272]	@ (80003d8 <adc_dma_init+0x128>)
 80002c6:	f043 0303 	orr.w	r3, r3, #3
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER = GPIOA->MODER | (1U<<2) | (1U<<3);	//PIN 1
 80002cc:	4b42      	ldr	r3, [pc, #264]	@ (80003d8 <adc_dma_init+0x128>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a41      	ldr	r2, [pc, #260]	@ (80003d8 <adc_dma_init+0x128>)
 80002d2:	f043 030c 	orr.w	r3, r3, #12
 80002d6:	6013      	str	r3, [r2, #0]

	/******************************************************* ADC CONFIGURATION *******************************************************/
	// Enable Clock access to the ADC
	RCC->APB2ENR |= ADC1EN;
 80002d8:	4b3e      	ldr	r3, [pc, #248]	@ (80003d4 <adc_dma_init+0x124>)
 80002da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002dc:	4a3d      	ldr	r2, [pc, #244]	@ (80003d4 <adc_dma_init+0x124>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002e2:	6453      	str	r3, [r2, #68]	@ 0x44

	// Set sequence length
	ADC1->SQR1 |= (1U<<20);
 80002e4:	4b3d      	ldr	r3, [pc, #244]	@ (80003dc <adc_dma_init+0x12c>)
 80002e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002e8:	4a3c      	ldr	r2, [pc, #240]	@ (80003dc <adc_dma_init+0x12c>)
 80002ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR1  = ADC1->SQR1 & (~(1U<<21)) & (~(1U<<22)) & (~(1U<<23));
 80002f0:	4b3a      	ldr	r3, [pc, #232]	@ (80003dc <adc_dma_init+0x12c>)
 80002f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002f4:	4a39      	ldr	r2, [pc, #228]	@ (80003dc <adc_dma_init+0x12c>)
 80002f6:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 80002fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// Set sequence
	ADC1->SQR3 = ADC1->SQR3 | (0U<<0) | (1U<<5);
 80002fc:	4b37      	ldr	r3, [pc, #220]	@ (80003dc <adc_dma_init+0x12c>)
 80002fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000300:	4a36      	ldr	r2, [pc, #216]	@ (80003dc <adc_dma_init+0x12c>)
 8000302:	f043 0320 	orr.w	r3, r3, #32
 8000306:	6353      	str	r3, [r2, #52]	@ 0x34

	// Enable scan mode
	ADC1->CR1 |= CR1_SCAN;
 8000308:	4b34      	ldr	r3, [pc, #208]	@ (80003dc <adc_dma_init+0x12c>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	4a33      	ldr	r2, [pc, #204]	@ (80003dc <adc_dma_init+0x12c>)
 800030e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000312:	6053      	str	r3, [r2, #4]

	// Select to use DMA
	ADC1->CR2 = ADC1->CR2 | CR2_DMA | CR2_DDS | CR2_CONT;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <adc_dma_init+0x12c>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <adc_dma_init+0x12c>)
 800031a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800031e:	f043 0302 	orr.w	r3, r3, #2
 8000322:	6093      	str	r3, [r2, #8]

	/******************************************************* DMA CONFIGURATION *******************************************************/
	// Enable clock access to DMA
	RCC->AHB1ENR |= DMA2EN;
 8000324:	4b2b      	ldr	r3, [pc, #172]	@ (80003d4 <adc_dma_init+0x124>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000328:	4a2a      	ldr	r2, [pc, #168]	@ (80003d4 <adc_dma_init+0x124>)
 800032a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800032e:	6313      	str	r3, [r2, #48]	@ 0x30

	// Disable DMA
	DMA2_Stream0->CR &= ~DMA_SCR_EN;
 8000330:	4b2b      	ldr	r3, [pc, #172]	@ (80003e0 <adc_dma_init+0x130>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a2a      	ldr	r2, [pc, #168]	@ (80003e0 <adc_dma_init+0x130>)
 8000336:	f023 0301 	bic.w	r3, r3, #1
 800033a:	6013      	str	r3, [r2, #0]

	// Wait till DMA is disabled
	while((DMA2_Stream0->CR & DMA_SCR_EN)){}
 800033c:	bf00      	nop
 800033e:	4b28      	ldr	r3, [pc, #160]	@ (80003e0 <adc_dma_init+0x130>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d1f9      	bne.n	800033e <adc_dma_init+0x8e>

	// Enable Circular mode
	DMA2_Stream0->CR |= DMA_SCR_CIRC;
 800034a:	4b25      	ldr	r3, [pc, #148]	@ (80003e0 <adc_dma_init+0x130>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a24      	ldr	r2, [pc, #144]	@ (80003e0 <adc_dma_init+0x130>)
 8000350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000354:	6013      	str	r3, [r2, #0]

	// Set Memory transfer size
	DMA2_Stream0->CR |=  (1U<<13);
 8000356:	4b22      	ldr	r3, [pc, #136]	@ (80003e0 <adc_dma_init+0x130>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a21      	ldr	r2, [pc, #132]	@ (80003e0 <adc_dma_init+0x130>)
 800035c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000360:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~(1U<<14);
 8000362:	4b1f      	ldr	r3, [pc, #124]	@ (80003e0 <adc_dma_init+0x130>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a1e      	ldr	r2, [pc, #120]	@ (80003e0 <adc_dma_init+0x130>)
 8000368:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800036c:	6013      	str	r3, [r2, #0]

	// Set Peripheral transfer size
	DMA2_Stream0->CR |=	 (1U<<11);
 800036e:	4b1c      	ldr	r3, [pc, #112]	@ (80003e0 <adc_dma_init+0x130>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a1b      	ldr	r2, [pc, #108]	@ (80003e0 <adc_dma_init+0x130>)
 8000374:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000378:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~(1U<<12);
 800037a:	4b19      	ldr	r3, [pc, #100]	@ (80003e0 <adc_dma_init+0x130>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a18      	ldr	r2, [pc, #96]	@ (80003e0 <adc_dma_init+0x130>)
 8000380:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000384:	6013      	str	r3, [r2, #0]

	// Enable Memory increment
	DMA2_Stream0->CR |= DMA_SCR_MINC;
 8000386:	4b16      	ldr	r3, [pc, #88]	@ (80003e0 <adc_dma_init+0x130>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a15      	ldr	r2, [pc, #84]	@ (80003e0 <adc_dma_init+0x130>)
 800038c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000390:	6013      	str	r3, [r2, #0]

	// Set peripheral address
	DMA2_Stream0->PAR = (uint32_t)(&(ADC1->DR));
 8000392:	4b13      	ldr	r3, [pc, #76]	@ (80003e0 <adc_dma_init+0x130>)
 8000394:	4a13      	ldr	r2, [pc, #76]	@ (80003e4 <adc_dma_init+0x134>)
 8000396:	609a      	str	r2, [r3, #8]

	// Set Memory address
	DMA2_Stream0->M0AR = (uint32_t)(&adc_raw_data);
 8000398:	4b11      	ldr	r3, [pc, #68]	@ (80003e0 <adc_dma_init+0x130>)
 800039a:	4a13      	ldr	r2, [pc, #76]	@ (80003e8 <adc_dma_init+0x138>)
 800039c:	60da      	str	r2, [r3, #12]

	// Set number of transfer
	DMA2_Stream0->NDTR  = (uint16_t)(NUM_OF_CHANNELS);
 800039e:	4b10      	ldr	r3, [pc, #64]	@ (80003e0 <adc_dma_init+0x130>)
 80003a0:	2202      	movs	r2, #2
 80003a2:	605a      	str	r2, [r3, #4]

	// Enable DMA Stream
	DMA2_Stream0->CR |= DMA_SCR_EN;
 80003a4:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <adc_dma_init+0x130>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a0d      	ldr	r2, [pc, #52]	@ (80003e0 <adc_dma_init+0x130>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	6013      	str	r3, [r2, #0]

	/******************************************************* ADC CONFIGURATION *******************************************************/
	// Enable ADC
	ADC1->CR2 |= CR2_ADCON;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	@ (80003dc <adc_dma_init+0x12c>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	4a09      	ldr	r2, [pc, #36]	@ (80003dc <adc_dma_init+0x12c>)
 80003b6:	f043 0301 	orr.w	r3, r3, #1
 80003ba:	6093      	str	r3, [r2, #8]

	// Start ADC
	ADC1->CR2 |= CR2_SWSTART;
 80003bc:	4b07      	ldr	r3, [pc, #28]	@ (80003dc <adc_dma_init+0x12c>)
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	4a06      	ldr	r2, [pc, #24]	@ (80003dc <adc_dma_init+0x12c>)
 80003c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80003c6:	6093      	str	r3, [r2, #8]
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40023800 	.word	0x40023800
 80003d8:	40020000 	.word	0x40020000
 80003dc:	40012000 	.word	0x40012000
 80003e0:	40026410 	.word	0x40026410
 80003e4:	4001204c 	.word	0x4001204c
 80003e8:	20000078 	.word	0x20000078

080003ec <main>:
#include "dma.h"

extern uint16_t adc_raw_data[NUM_OF_CHANNELS];

int main()
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
	uart2_tx_init();
 80003f2:	f000 f8d1 	bl	8000598 <uart2_tx_init>
	adc_dma_init();
 80003f6:	f7ff ff5b 	bl	80002b0 <adc_dma_init>

	while(1)
	{
		printf("value from sensor 1: %d\n\r", adc_raw_data[0]);
 80003fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000428 <main+0x3c>)
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	4619      	mov	r1, r3
 8000400:	480a      	ldr	r0, [pc, #40]	@ (800042c <main+0x40>)
 8000402:	f000 fa3f 	bl	8000884 <iprintf>
		printf("value from sensor 2: %d\n\r", adc_raw_data[1]);
 8000406:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <main+0x3c>)
 8000408:	885b      	ldrh	r3, [r3, #2]
 800040a:	4619      	mov	r1, r3
 800040c:	4808      	ldr	r0, [pc, #32]	@ (8000430 <main+0x44>)
 800040e:	f000 fa39 	bl	8000884 <iprintf>

		for(int i=0; i<90000; i++){}
 8000412:	2300      	movs	r3, #0
 8000414:	607b      	str	r3, [r7, #4]
 8000416:	e002      	b.n	800041e <main+0x32>
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3301      	adds	r3, #1
 800041c:	607b      	str	r3, [r7, #4]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a04      	ldr	r2, [pc, #16]	@ (8000434 <main+0x48>)
 8000422:	4293      	cmp	r3, r2
 8000424:	ddf8      	ble.n	8000418 <main+0x2c>
		printf("value from sensor 1: %d\n\r", adc_raw_data[0]);
 8000426:	e7e8      	b.n	80003fa <main+0xe>
 8000428:	20000078 	.word	0x20000078
 800042c:	08001578 	.word	0x08001578
 8000430:	08001594 	.word	0x08001594
 8000434:	00015f8f 	.word	0x00015f8f

08000438 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	60b9      	str	r1, [r7, #8]
 8000442:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]
 8000448:	e00a      	b.n	8000460 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800044a:	f3af 8000 	nop.w
 800044e:	4601      	mov	r1, r0
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	1c5a      	adds	r2, r3, #1
 8000454:	60ba      	str	r2, [r7, #8]
 8000456:	b2ca      	uxtb	r2, r1
 8000458:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	3301      	adds	r3, #1
 800045e:	617b      	str	r3, [r7, #20]
 8000460:	697a      	ldr	r2, [r7, #20]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	429a      	cmp	r2, r3
 8000466:	dbf0      	blt.n	800044a <_read+0x12>
  }

  return len;
 8000468:	687b      	ldr	r3, [r7, #4]
}
 800046a:	4618      	mov	r0, r3
 800046c:	3718      	adds	r7, #24
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	b086      	sub	sp, #24
 8000476:	af00      	add	r7, sp, #0
 8000478:	60f8      	str	r0, [r7, #12]
 800047a:	60b9      	str	r1, [r7, #8]
 800047c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
 8000482:	e009      	b.n	8000498 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	60ba      	str	r2, [r7, #8]
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	4618      	mov	r0, r3
 800048e:	f000 f877 	bl	8000580 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	3301      	adds	r3, #1
 8000496:	617b      	str	r3, [r7, #20]
 8000498:	697a      	ldr	r2, [r7, #20]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	429a      	cmp	r2, r3
 800049e:	dbf1      	blt.n	8000484 <_write+0x12>
  }
  return len;
 80004a0:	687b      	ldr	r3, [r7, #4]
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3718      	adds	r7, #24
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <_close>:

int _close(int file)
{
 80004aa:	b480      	push	{r7}
 80004ac:	b083      	sub	sp, #12
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr

080004c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004c2:	b480      	push	{r7}
 80004c4:	b083      	sub	sp, #12
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004d2:	605a      	str	r2, [r3, #4]
  return 0;
 80004d4:	2300      	movs	r3, #0
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <_isatty>:

int _isatty(int file)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004ea:	2301      	movs	r3, #1
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000504:	2300      	movs	r3, #0
}
 8000506:	4618      	mov	r0, r3
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800051c:	4a14      	ldr	r2, [pc, #80]	@ (8000570 <_sbrk+0x5c>)
 800051e:	4b15      	ldr	r3, [pc, #84]	@ (8000574 <_sbrk+0x60>)
 8000520:	1ad3      	subs	r3, r2, r3
 8000522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000528:	4b13      	ldr	r3, [pc, #76]	@ (8000578 <_sbrk+0x64>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d102      	bne.n	8000536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000530:	4b11      	ldr	r3, [pc, #68]	@ (8000578 <_sbrk+0x64>)
 8000532:	4a12      	ldr	r2, [pc, #72]	@ (800057c <_sbrk+0x68>)
 8000534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000536:	4b10      	ldr	r3, [pc, #64]	@ (8000578 <_sbrk+0x64>)
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4413      	add	r3, r2
 800053e:	693a      	ldr	r2, [r7, #16]
 8000540:	429a      	cmp	r2, r3
 8000542:	d207      	bcs.n	8000554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000544:	f000 fa42 	bl	80009cc <__errno>
 8000548:	4603      	mov	r3, r0
 800054a:	220c      	movs	r2, #12
 800054c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
 8000552:	e009      	b.n	8000568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000554:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <_sbrk+0x64>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800055a:	4b07      	ldr	r3, [pc, #28]	@ (8000578 <_sbrk+0x64>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	4a05      	ldr	r2, [pc, #20]	@ (8000578 <_sbrk+0x64>)
 8000564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000566:	68fb      	ldr	r3, [r7, #12]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3718      	adds	r7, #24
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20020000 	.word	0x20020000
 8000574:	00000400 	.word	0x00000400
 8000578:	2000007c 	.word	0x2000007c
 800057c:	200001d0 	.word	0x200001d0

08000580 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart2_write(int ch);

int __io_putchar(int ch)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f000 f84f 	bl	800062c <uart2_write>
	return ch;
 800058e:	687b      	ldr	r3, [r7, #4]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <uart2_tx_init>:


void uart2_tx_init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0

	/************Configure UART GPIO pin************/
	// 1. Enable clock access
	RCC->AHB1ENR |= GPIOAEN;
 800059c:	4b1f      	ldr	r3, [pc, #124]	@ (800061c <uart2_tx_init+0x84>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a0:	4a1e      	ldr	r2, [pc, #120]	@ (800061c <uart2_tx_init+0x84>)
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	6313      	str	r3, [r2, #48]	@ 0x30

	// 2. Set PA2 mode to Alternate Function mode
	GPIOA->MODER &= ~(1U<<4);
 80005a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000620 <uart2_tx_init+0x88>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000620 <uart2_tx_init+0x88>)
 80005ae:	f023 0310 	bic.w	r3, r3, #16
 80005b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<5);
 80005b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000620 <uart2_tx_init+0x88>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a19      	ldr	r2, [pc, #100]	@ (8000620 <uart2_tx_init+0x88>)
 80005ba:	f043 0320 	orr.w	r3, r3, #32
 80005be:	6013      	str	r3, [r2, #0]

	// 3. Set PA2 Alternate Function type to AF7 (UART_TX)
	GPIOA->AFR[0] |=  (1U<<8);
 80005c0:	4b17      	ldr	r3, [pc, #92]	@ (8000620 <uart2_tx_init+0x88>)
 80005c2:	6a1b      	ldr	r3, [r3, #32]
 80005c4:	4a16      	ldr	r2, [pc, #88]	@ (8000620 <uart2_tx_init+0x88>)
 80005c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<9);
 80005cc:	4b14      	ldr	r3, [pc, #80]	@ (8000620 <uart2_tx_init+0x88>)
 80005ce:	6a1b      	ldr	r3, [r3, #32]
 80005d0:	4a13      	ldr	r2, [pc, #76]	@ (8000620 <uart2_tx_init+0x88>)
 80005d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<10);
 80005d8:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <uart2_tx_init+0x88>)
 80005da:	6a1b      	ldr	r3, [r3, #32]
 80005dc:	4a10      	ldr	r2, [pc, #64]	@ (8000620 <uart2_tx_init+0x88>)
 80005de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80005e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <uart2_tx_init+0x88>)
 80005e6:	6a1b      	ldr	r3, [r3, #32]
 80005e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000620 <uart2_tx_init+0x88>)
 80005ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80005ee:	6213      	str	r3, [r2, #32]

	/************CONFIGURE UART MODULE************/
	// 4. ENABLE CLOCK ACCESS TO UART2
	RCC->APB1ENR |= UART2EN;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <uart2_tx_init+0x84>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	4a09      	ldr	r2, [pc, #36]	@ (800061c <uart2_tx_init+0x84>)
 80005f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005fa:	6413      	str	r3, [r2, #64]	@ 0x40

	// 5. Set Baudrate
	uart_set_baudrate(CLK, UART_BAUDRATE);
 80005fc:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000600:	4808      	ldr	r0, [pc, #32]	@ (8000624 <uart2_tx_init+0x8c>)
 8000602:	f000 f83f 	bl	8000684 <uart_set_baudrate>

	// 6. Set transfer direction
	USART2->CR1 = CR1_TE;
 8000606:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <uart2_tx_init+0x90>)
 8000608:	2208      	movs	r2, #8
 800060a:	60da      	str	r2, [r3, #12]

	// 7. Enable UART modeule
	USART2->CR1 |= CR1_UE;
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <uart2_tx_init+0x90>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	4a05      	ldr	r2, [pc, #20]	@ (8000628 <uart2_tx_init+0x90>)
 8000612:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000616:	60d3      	str	r3, [r2, #12]

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	40020000 	.word	0x40020000
 8000624:	00f42400 	.word	0x00f42400
 8000628:	40004400 	.word	0x40004400

0800062c <uart2_write>:

static void uart2_write(int ch)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	// make sure the transmit data register is empty
	while(!(USART2->SR & SR_TXE)){}
 8000634:	bf00      	nop
 8000636:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <uart2_write+0x2c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0f9      	beq.n	8000636 <uart2_write+0xa>

	// write to transmit data register
	USART2->DR = (ch & 0xFF);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a04      	ldr	r2, [pc, #16]	@ (8000658 <uart2_write+0x2c>)
 8000646:	b2db      	uxtb	r3, r3
 8000648:	6053      	str	r3, [r2, #4]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40004400 	.word	0x40004400

0800065c <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
	return ((periph_clk +(baudrate/2U))/baudrate);
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	085a      	lsrs	r2, r3, #1
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	441a      	add	r2, r3
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	fbb2 f3f3 	udiv	r3, r2, r3
 8000674:	b29b      	uxth	r3, r3
}
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 800068e:	6839      	ldr	r1, [r7, #0]
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f7ff ffe3 	bl	800065c <compute_uart_bd>
 8000696:	4603      	mov	r3, r0
 8000698:	461a      	mov	r2, r3
 800069a:	4b03      	ldr	r3, [pc, #12]	@ (80006a8 <uart_set_baudrate+0x24>)
 800069c:	609a      	str	r2, [r3, #8]
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40004400 	.word	0x40004400

080006ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006ac:	480d      	ldr	r0, [pc, #52]	@ (80006e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480c      	ldr	r0, [pc, #48]	@ (80006e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b6:	490d      	ldr	r1, [pc, #52]	@ (80006ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b8:	4a0d      	ldr	r2, [pc, #52]	@ (80006f0 <LoopForever+0xe>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0a      	ldr	r2, [pc, #40]	@ (80006f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006cc:	4c0a      	ldr	r4, [pc, #40]	@ (80006f8 <LoopForever+0x16>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006da:	f000 f97d 	bl	80009d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006de:	f7ff fe85 	bl	80003ec <main>

080006e2 <LoopForever>:

LoopForever:
  b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
  ldr   r0, =_estack
 80006e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006f0:	080015f4 	.word	0x080015f4
  ldr r2, =_sbss
 80006f4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006f8:	200001cc 	.word	0x200001cc

080006fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC_IRQHandler>
	...

08000700 <std>:
 8000700:	2300      	movs	r3, #0
 8000702:	b510      	push	{r4, lr}
 8000704:	4604      	mov	r4, r0
 8000706:	e9c0 3300 	strd	r3, r3, [r0]
 800070a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800070e:	6083      	str	r3, [r0, #8]
 8000710:	8181      	strh	r1, [r0, #12]
 8000712:	6643      	str	r3, [r0, #100]	@ 0x64
 8000714:	81c2      	strh	r2, [r0, #14]
 8000716:	6183      	str	r3, [r0, #24]
 8000718:	4619      	mov	r1, r3
 800071a:	2208      	movs	r2, #8
 800071c:	305c      	adds	r0, #92	@ 0x5c
 800071e:	f000 f906 	bl	800092e <memset>
 8000722:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <std+0x58>)
 8000724:	6263      	str	r3, [r4, #36]	@ 0x24
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <std+0x5c>)
 8000728:	62a3      	str	r3, [r4, #40]	@ 0x28
 800072a:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <std+0x60>)
 800072c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800072e:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <std+0x64>)
 8000730:	6323      	str	r3, [r4, #48]	@ 0x30
 8000732:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <std+0x68>)
 8000734:	6224      	str	r4, [r4, #32]
 8000736:	429c      	cmp	r4, r3
 8000738:	d006      	beq.n	8000748 <std+0x48>
 800073a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800073e:	4294      	cmp	r4, r2
 8000740:	d002      	beq.n	8000748 <std+0x48>
 8000742:	33d0      	adds	r3, #208	@ 0xd0
 8000744:	429c      	cmp	r4, r3
 8000746:	d105      	bne.n	8000754 <std+0x54>
 8000748:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800074c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000750:	f000 b966 	b.w	8000a20 <__retarget_lock_init_recursive>
 8000754:	bd10      	pop	{r4, pc}
 8000756:	bf00      	nop
 8000758:	080008a9 	.word	0x080008a9
 800075c:	080008cb 	.word	0x080008cb
 8000760:	08000903 	.word	0x08000903
 8000764:	08000927 	.word	0x08000927
 8000768:	20000080 	.word	0x20000080

0800076c <stdio_exit_handler>:
 800076c:	4a02      	ldr	r2, [pc, #8]	@ (8000778 <stdio_exit_handler+0xc>)
 800076e:	4903      	ldr	r1, [pc, #12]	@ (800077c <stdio_exit_handler+0x10>)
 8000770:	4803      	ldr	r0, [pc, #12]	@ (8000780 <stdio_exit_handler+0x14>)
 8000772:	f000 b869 	b.w	8000848 <_fwalk_sglue>
 8000776:	bf00      	nop
 8000778:	20000000 	.word	0x20000000
 800077c:	080012c1 	.word	0x080012c1
 8000780:	20000010 	.word	0x20000010

08000784 <cleanup_stdio>:
 8000784:	6841      	ldr	r1, [r0, #4]
 8000786:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <cleanup_stdio+0x34>)
 8000788:	4299      	cmp	r1, r3
 800078a:	b510      	push	{r4, lr}
 800078c:	4604      	mov	r4, r0
 800078e:	d001      	beq.n	8000794 <cleanup_stdio+0x10>
 8000790:	f000 fd96 	bl	80012c0 <_fflush_r>
 8000794:	68a1      	ldr	r1, [r4, #8]
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <cleanup_stdio+0x38>)
 8000798:	4299      	cmp	r1, r3
 800079a:	d002      	beq.n	80007a2 <cleanup_stdio+0x1e>
 800079c:	4620      	mov	r0, r4
 800079e:	f000 fd8f 	bl	80012c0 <_fflush_r>
 80007a2:	68e1      	ldr	r1, [r4, #12]
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <cleanup_stdio+0x3c>)
 80007a6:	4299      	cmp	r1, r3
 80007a8:	d004      	beq.n	80007b4 <cleanup_stdio+0x30>
 80007aa:	4620      	mov	r0, r4
 80007ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007b0:	f000 bd86 	b.w	80012c0 <_fflush_r>
 80007b4:	bd10      	pop	{r4, pc}
 80007b6:	bf00      	nop
 80007b8:	20000080 	.word	0x20000080
 80007bc:	200000e8 	.word	0x200000e8
 80007c0:	20000150 	.word	0x20000150

080007c4 <global_stdio_init.part.0>:
 80007c4:	b510      	push	{r4, lr}
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <global_stdio_init.part.0+0x30>)
 80007c8:	4c0b      	ldr	r4, [pc, #44]	@ (80007f8 <global_stdio_init.part.0+0x34>)
 80007ca:	4a0c      	ldr	r2, [pc, #48]	@ (80007fc <global_stdio_init.part.0+0x38>)
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	4620      	mov	r0, r4
 80007d0:	2200      	movs	r2, #0
 80007d2:	2104      	movs	r1, #4
 80007d4:	f7ff ff94 	bl	8000700 <std>
 80007d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007dc:	2201      	movs	r2, #1
 80007de:	2109      	movs	r1, #9
 80007e0:	f7ff ff8e 	bl	8000700 <std>
 80007e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80007e8:	2202      	movs	r2, #2
 80007ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ee:	2112      	movs	r1, #18
 80007f0:	f7ff bf86 	b.w	8000700 <std>
 80007f4:	200001b8 	.word	0x200001b8
 80007f8:	20000080 	.word	0x20000080
 80007fc:	0800076d 	.word	0x0800076d

08000800 <__sfp_lock_acquire>:
 8000800:	4801      	ldr	r0, [pc, #4]	@ (8000808 <__sfp_lock_acquire+0x8>)
 8000802:	f000 b90e 	b.w	8000a22 <__retarget_lock_acquire_recursive>
 8000806:	bf00      	nop
 8000808:	200001c1 	.word	0x200001c1

0800080c <__sfp_lock_release>:
 800080c:	4801      	ldr	r0, [pc, #4]	@ (8000814 <__sfp_lock_release+0x8>)
 800080e:	f000 b909 	b.w	8000a24 <__retarget_lock_release_recursive>
 8000812:	bf00      	nop
 8000814:	200001c1 	.word	0x200001c1

08000818 <__sinit>:
 8000818:	b510      	push	{r4, lr}
 800081a:	4604      	mov	r4, r0
 800081c:	f7ff fff0 	bl	8000800 <__sfp_lock_acquire>
 8000820:	6a23      	ldr	r3, [r4, #32]
 8000822:	b11b      	cbz	r3, 800082c <__sinit+0x14>
 8000824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000828:	f7ff bff0 	b.w	800080c <__sfp_lock_release>
 800082c:	4b04      	ldr	r3, [pc, #16]	@ (8000840 <__sinit+0x28>)
 800082e:	6223      	str	r3, [r4, #32]
 8000830:	4b04      	ldr	r3, [pc, #16]	@ (8000844 <__sinit+0x2c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d1f5      	bne.n	8000824 <__sinit+0xc>
 8000838:	f7ff ffc4 	bl	80007c4 <global_stdio_init.part.0>
 800083c:	e7f2      	b.n	8000824 <__sinit+0xc>
 800083e:	bf00      	nop
 8000840:	08000785 	.word	0x08000785
 8000844:	200001b8 	.word	0x200001b8

08000848 <_fwalk_sglue>:
 8000848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800084c:	4607      	mov	r7, r0
 800084e:	4688      	mov	r8, r1
 8000850:	4614      	mov	r4, r2
 8000852:	2600      	movs	r6, #0
 8000854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000858:	f1b9 0901 	subs.w	r9, r9, #1
 800085c:	d505      	bpl.n	800086a <_fwalk_sglue+0x22>
 800085e:	6824      	ldr	r4, [r4, #0]
 8000860:	2c00      	cmp	r4, #0
 8000862:	d1f7      	bne.n	8000854 <_fwalk_sglue+0xc>
 8000864:	4630      	mov	r0, r6
 8000866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800086a:	89ab      	ldrh	r3, [r5, #12]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d907      	bls.n	8000880 <_fwalk_sglue+0x38>
 8000870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000874:	3301      	adds	r3, #1
 8000876:	d003      	beq.n	8000880 <_fwalk_sglue+0x38>
 8000878:	4629      	mov	r1, r5
 800087a:	4638      	mov	r0, r7
 800087c:	47c0      	blx	r8
 800087e:	4306      	orrs	r6, r0
 8000880:	3568      	adds	r5, #104	@ 0x68
 8000882:	e7e9      	b.n	8000858 <_fwalk_sglue+0x10>

08000884 <iprintf>:
 8000884:	b40f      	push	{r0, r1, r2, r3}
 8000886:	b507      	push	{r0, r1, r2, lr}
 8000888:	4906      	ldr	r1, [pc, #24]	@ (80008a4 <iprintf+0x20>)
 800088a:	ab04      	add	r3, sp, #16
 800088c:	6808      	ldr	r0, [r1, #0]
 800088e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000892:	6881      	ldr	r1, [r0, #8]
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	f000 f9e9 	bl	8000c6c <_vfiprintf_r>
 800089a:	b003      	add	sp, #12
 800089c:	f85d eb04 	ldr.w	lr, [sp], #4
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr
 80008a4:	2000000c 	.word	0x2000000c

080008a8 <__sread>:
 80008a8:	b510      	push	{r4, lr}
 80008aa:	460c      	mov	r4, r1
 80008ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008b0:	f000 f868 	bl	8000984 <_read_r>
 80008b4:	2800      	cmp	r0, #0
 80008b6:	bfab      	itete	ge
 80008b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80008ba:	89a3      	ldrhlt	r3, [r4, #12]
 80008bc:	181b      	addge	r3, r3, r0
 80008be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80008c2:	bfac      	ite	ge
 80008c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80008c6:	81a3      	strhlt	r3, [r4, #12]
 80008c8:	bd10      	pop	{r4, pc}

080008ca <__swrite>:
 80008ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008ce:	461f      	mov	r7, r3
 80008d0:	898b      	ldrh	r3, [r1, #12]
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	4605      	mov	r5, r0
 80008d6:	460c      	mov	r4, r1
 80008d8:	4616      	mov	r6, r2
 80008da:	d505      	bpl.n	80008e8 <__swrite+0x1e>
 80008dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008e0:	2302      	movs	r3, #2
 80008e2:	2200      	movs	r2, #0
 80008e4:	f000 f83c 	bl	8000960 <_lseek_r>
 80008e8:	89a3      	ldrh	r3, [r4, #12]
 80008ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008f2:	81a3      	strh	r3, [r4, #12]
 80008f4:	4632      	mov	r2, r6
 80008f6:	463b      	mov	r3, r7
 80008f8:	4628      	mov	r0, r5
 80008fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008fe:	f000 b853 	b.w	80009a8 <_write_r>

08000902 <__sseek>:
 8000902:	b510      	push	{r4, lr}
 8000904:	460c      	mov	r4, r1
 8000906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800090a:	f000 f829 	bl	8000960 <_lseek_r>
 800090e:	1c43      	adds	r3, r0, #1
 8000910:	89a3      	ldrh	r3, [r4, #12]
 8000912:	bf15      	itete	ne
 8000914:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000916:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800091a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800091e:	81a3      	strheq	r3, [r4, #12]
 8000920:	bf18      	it	ne
 8000922:	81a3      	strhne	r3, [r4, #12]
 8000924:	bd10      	pop	{r4, pc}

08000926 <__sclose>:
 8000926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800092a:	f000 b809 	b.w	8000940 <_close_r>

0800092e <memset>:
 800092e:	4402      	add	r2, r0
 8000930:	4603      	mov	r3, r0
 8000932:	4293      	cmp	r3, r2
 8000934:	d100      	bne.n	8000938 <memset+0xa>
 8000936:	4770      	bx	lr
 8000938:	f803 1b01 	strb.w	r1, [r3], #1
 800093c:	e7f9      	b.n	8000932 <memset+0x4>
	...

08000940 <_close_r>:
 8000940:	b538      	push	{r3, r4, r5, lr}
 8000942:	4d06      	ldr	r5, [pc, #24]	@ (800095c <_close_r+0x1c>)
 8000944:	2300      	movs	r3, #0
 8000946:	4604      	mov	r4, r0
 8000948:	4608      	mov	r0, r1
 800094a:	602b      	str	r3, [r5, #0]
 800094c:	f7ff fdad 	bl	80004aa <_close>
 8000950:	1c43      	adds	r3, r0, #1
 8000952:	d102      	bne.n	800095a <_close_r+0x1a>
 8000954:	682b      	ldr	r3, [r5, #0]
 8000956:	b103      	cbz	r3, 800095a <_close_r+0x1a>
 8000958:	6023      	str	r3, [r4, #0]
 800095a:	bd38      	pop	{r3, r4, r5, pc}
 800095c:	200001bc 	.word	0x200001bc

08000960 <_lseek_r>:
 8000960:	b538      	push	{r3, r4, r5, lr}
 8000962:	4d07      	ldr	r5, [pc, #28]	@ (8000980 <_lseek_r+0x20>)
 8000964:	4604      	mov	r4, r0
 8000966:	4608      	mov	r0, r1
 8000968:	4611      	mov	r1, r2
 800096a:	2200      	movs	r2, #0
 800096c:	602a      	str	r2, [r5, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	f7ff fdc2 	bl	80004f8 <_lseek>
 8000974:	1c43      	adds	r3, r0, #1
 8000976:	d102      	bne.n	800097e <_lseek_r+0x1e>
 8000978:	682b      	ldr	r3, [r5, #0]
 800097a:	b103      	cbz	r3, 800097e <_lseek_r+0x1e>
 800097c:	6023      	str	r3, [r4, #0]
 800097e:	bd38      	pop	{r3, r4, r5, pc}
 8000980:	200001bc 	.word	0x200001bc

08000984 <_read_r>:
 8000984:	b538      	push	{r3, r4, r5, lr}
 8000986:	4d07      	ldr	r5, [pc, #28]	@ (80009a4 <_read_r+0x20>)
 8000988:	4604      	mov	r4, r0
 800098a:	4608      	mov	r0, r1
 800098c:	4611      	mov	r1, r2
 800098e:	2200      	movs	r2, #0
 8000990:	602a      	str	r2, [r5, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	f7ff fd50 	bl	8000438 <_read>
 8000998:	1c43      	adds	r3, r0, #1
 800099a:	d102      	bne.n	80009a2 <_read_r+0x1e>
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	b103      	cbz	r3, 80009a2 <_read_r+0x1e>
 80009a0:	6023      	str	r3, [r4, #0]
 80009a2:	bd38      	pop	{r3, r4, r5, pc}
 80009a4:	200001bc 	.word	0x200001bc

080009a8 <_write_r>:
 80009a8:	b538      	push	{r3, r4, r5, lr}
 80009aa:	4d07      	ldr	r5, [pc, #28]	@ (80009c8 <_write_r+0x20>)
 80009ac:	4604      	mov	r4, r0
 80009ae:	4608      	mov	r0, r1
 80009b0:	4611      	mov	r1, r2
 80009b2:	2200      	movs	r2, #0
 80009b4:	602a      	str	r2, [r5, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	f7ff fd5b 	bl	8000472 <_write>
 80009bc:	1c43      	adds	r3, r0, #1
 80009be:	d102      	bne.n	80009c6 <_write_r+0x1e>
 80009c0:	682b      	ldr	r3, [r5, #0]
 80009c2:	b103      	cbz	r3, 80009c6 <_write_r+0x1e>
 80009c4:	6023      	str	r3, [r4, #0]
 80009c6:	bd38      	pop	{r3, r4, r5, pc}
 80009c8:	200001bc 	.word	0x200001bc

080009cc <__errno>:
 80009cc:	4b01      	ldr	r3, [pc, #4]	@ (80009d4 <__errno+0x8>)
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	2000000c 	.word	0x2000000c

080009d8 <__libc_init_array>:
 80009d8:	b570      	push	{r4, r5, r6, lr}
 80009da:	4d0d      	ldr	r5, [pc, #52]	@ (8000a10 <__libc_init_array+0x38>)
 80009dc:	4c0d      	ldr	r4, [pc, #52]	@ (8000a14 <__libc_init_array+0x3c>)
 80009de:	1b64      	subs	r4, r4, r5
 80009e0:	10a4      	asrs	r4, r4, #2
 80009e2:	2600      	movs	r6, #0
 80009e4:	42a6      	cmp	r6, r4
 80009e6:	d109      	bne.n	80009fc <__libc_init_array+0x24>
 80009e8:	4d0b      	ldr	r5, [pc, #44]	@ (8000a18 <__libc_init_array+0x40>)
 80009ea:	4c0c      	ldr	r4, [pc, #48]	@ (8000a1c <__libc_init_array+0x44>)
 80009ec:	f000 fdb8 	bl	8001560 <_init>
 80009f0:	1b64      	subs	r4, r4, r5
 80009f2:	10a4      	asrs	r4, r4, #2
 80009f4:	2600      	movs	r6, #0
 80009f6:	42a6      	cmp	r6, r4
 80009f8:	d105      	bne.n	8000a06 <__libc_init_array+0x2e>
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
 80009fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a00:	4798      	blx	r3
 8000a02:	3601      	adds	r6, #1
 8000a04:	e7ee      	b.n	80009e4 <__libc_init_array+0xc>
 8000a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a0a:	4798      	blx	r3
 8000a0c:	3601      	adds	r6, #1
 8000a0e:	e7f2      	b.n	80009f6 <__libc_init_array+0x1e>
 8000a10:	080015ec 	.word	0x080015ec
 8000a14:	080015ec 	.word	0x080015ec
 8000a18:	080015ec 	.word	0x080015ec
 8000a1c:	080015f0 	.word	0x080015f0

08000a20 <__retarget_lock_init_recursive>:
 8000a20:	4770      	bx	lr

08000a22 <__retarget_lock_acquire_recursive>:
 8000a22:	4770      	bx	lr

08000a24 <__retarget_lock_release_recursive>:
 8000a24:	4770      	bx	lr
	...

08000a28 <_free_r>:
 8000a28:	b538      	push	{r3, r4, r5, lr}
 8000a2a:	4605      	mov	r5, r0
 8000a2c:	2900      	cmp	r1, #0
 8000a2e:	d041      	beq.n	8000ab4 <_free_r+0x8c>
 8000a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a34:	1f0c      	subs	r4, r1, #4
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	bfb8      	it	lt
 8000a3a:	18e4      	addlt	r4, r4, r3
 8000a3c:	f000 f8e0 	bl	8000c00 <__malloc_lock>
 8000a40:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab8 <_free_r+0x90>)
 8000a42:	6813      	ldr	r3, [r2, #0]
 8000a44:	b933      	cbnz	r3, 8000a54 <_free_r+0x2c>
 8000a46:	6063      	str	r3, [r4, #4]
 8000a48:	6014      	str	r4, [r2, #0]
 8000a4a:	4628      	mov	r0, r5
 8000a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a50:	f000 b8dc 	b.w	8000c0c <__malloc_unlock>
 8000a54:	42a3      	cmp	r3, r4
 8000a56:	d908      	bls.n	8000a6a <_free_r+0x42>
 8000a58:	6820      	ldr	r0, [r4, #0]
 8000a5a:	1821      	adds	r1, r4, r0
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	bf01      	itttt	eq
 8000a60:	6819      	ldreq	r1, [r3, #0]
 8000a62:	685b      	ldreq	r3, [r3, #4]
 8000a64:	1809      	addeq	r1, r1, r0
 8000a66:	6021      	streq	r1, [r4, #0]
 8000a68:	e7ed      	b.n	8000a46 <_free_r+0x1e>
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	b10b      	cbz	r3, 8000a74 <_free_r+0x4c>
 8000a70:	42a3      	cmp	r3, r4
 8000a72:	d9fa      	bls.n	8000a6a <_free_r+0x42>
 8000a74:	6811      	ldr	r1, [r2, #0]
 8000a76:	1850      	adds	r0, r2, r1
 8000a78:	42a0      	cmp	r0, r4
 8000a7a:	d10b      	bne.n	8000a94 <_free_r+0x6c>
 8000a7c:	6820      	ldr	r0, [r4, #0]
 8000a7e:	4401      	add	r1, r0
 8000a80:	1850      	adds	r0, r2, r1
 8000a82:	4283      	cmp	r3, r0
 8000a84:	6011      	str	r1, [r2, #0]
 8000a86:	d1e0      	bne.n	8000a4a <_free_r+0x22>
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	6053      	str	r3, [r2, #4]
 8000a8e:	4408      	add	r0, r1
 8000a90:	6010      	str	r0, [r2, #0]
 8000a92:	e7da      	b.n	8000a4a <_free_r+0x22>
 8000a94:	d902      	bls.n	8000a9c <_free_r+0x74>
 8000a96:	230c      	movs	r3, #12
 8000a98:	602b      	str	r3, [r5, #0]
 8000a9a:	e7d6      	b.n	8000a4a <_free_r+0x22>
 8000a9c:	6820      	ldr	r0, [r4, #0]
 8000a9e:	1821      	adds	r1, r4, r0
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	bf04      	itt	eq
 8000aa4:	6819      	ldreq	r1, [r3, #0]
 8000aa6:	685b      	ldreq	r3, [r3, #4]
 8000aa8:	6063      	str	r3, [r4, #4]
 8000aaa:	bf04      	itt	eq
 8000aac:	1809      	addeq	r1, r1, r0
 8000aae:	6021      	streq	r1, [r4, #0]
 8000ab0:	6054      	str	r4, [r2, #4]
 8000ab2:	e7ca      	b.n	8000a4a <_free_r+0x22>
 8000ab4:	bd38      	pop	{r3, r4, r5, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200001c8 	.word	0x200001c8

08000abc <sbrk_aligned>:
 8000abc:	b570      	push	{r4, r5, r6, lr}
 8000abe:	4e0f      	ldr	r6, [pc, #60]	@ (8000afc <sbrk_aligned+0x40>)
 8000ac0:	460c      	mov	r4, r1
 8000ac2:	6831      	ldr	r1, [r6, #0]
 8000ac4:	4605      	mov	r5, r0
 8000ac6:	b911      	cbnz	r1, 8000ace <sbrk_aligned+0x12>
 8000ac8:	f000 fcb6 	bl	8001438 <_sbrk_r>
 8000acc:	6030      	str	r0, [r6, #0]
 8000ace:	4621      	mov	r1, r4
 8000ad0:	4628      	mov	r0, r5
 8000ad2:	f000 fcb1 	bl	8001438 <_sbrk_r>
 8000ad6:	1c43      	adds	r3, r0, #1
 8000ad8:	d103      	bne.n	8000ae2 <sbrk_aligned+0x26>
 8000ada:	f04f 34ff 	mov.w	r4, #4294967295
 8000ade:	4620      	mov	r0, r4
 8000ae0:	bd70      	pop	{r4, r5, r6, pc}
 8000ae2:	1cc4      	adds	r4, r0, #3
 8000ae4:	f024 0403 	bic.w	r4, r4, #3
 8000ae8:	42a0      	cmp	r0, r4
 8000aea:	d0f8      	beq.n	8000ade <sbrk_aligned+0x22>
 8000aec:	1a21      	subs	r1, r4, r0
 8000aee:	4628      	mov	r0, r5
 8000af0:	f000 fca2 	bl	8001438 <_sbrk_r>
 8000af4:	3001      	adds	r0, #1
 8000af6:	d1f2      	bne.n	8000ade <sbrk_aligned+0x22>
 8000af8:	e7ef      	b.n	8000ada <sbrk_aligned+0x1e>
 8000afa:	bf00      	nop
 8000afc:	200001c4 	.word	0x200001c4

08000b00 <_malloc_r>:
 8000b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b04:	1ccd      	adds	r5, r1, #3
 8000b06:	f025 0503 	bic.w	r5, r5, #3
 8000b0a:	3508      	adds	r5, #8
 8000b0c:	2d0c      	cmp	r5, #12
 8000b0e:	bf38      	it	cc
 8000b10:	250c      	movcc	r5, #12
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	4606      	mov	r6, r0
 8000b16:	db01      	blt.n	8000b1c <_malloc_r+0x1c>
 8000b18:	42a9      	cmp	r1, r5
 8000b1a:	d904      	bls.n	8000b26 <_malloc_r+0x26>
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	6033      	str	r3, [r6, #0]
 8000b20:	2000      	movs	r0, #0
 8000b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bfc <_malloc_r+0xfc>
 8000b2a:	f000 f869 	bl	8000c00 <__malloc_lock>
 8000b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8000b32:	461c      	mov	r4, r3
 8000b34:	bb44      	cbnz	r4, 8000b88 <_malloc_r+0x88>
 8000b36:	4629      	mov	r1, r5
 8000b38:	4630      	mov	r0, r6
 8000b3a:	f7ff ffbf 	bl	8000abc <sbrk_aligned>
 8000b3e:	1c43      	adds	r3, r0, #1
 8000b40:	4604      	mov	r4, r0
 8000b42:	d158      	bne.n	8000bf6 <_malloc_r+0xf6>
 8000b44:	f8d8 4000 	ldr.w	r4, [r8]
 8000b48:	4627      	mov	r7, r4
 8000b4a:	2f00      	cmp	r7, #0
 8000b4c:	d143      	bne.n	8000bd6 <_malloc_r+0xd6>
 8000b4e:	2c00      	cmp	r4, #0
 8000b50:	d04b      	beq.n	8000bea <_malloc_r+0xea>
 8000b52:	6823      	ldr	r3, [r4, #0]
 8000b54:	4639      	mov	r1, r7
 8000b56:	4630      	mov	r0, r6
 8000b58:	eb04 0903 	add.w	r9, r4, r3
 8000b5c:	f000 fc6c 	bl	8001438 <_sbrk_r>
 8000b60:	4581      	cmp	r9, r0
 8000b62:	d142      	bne.n	8000bea <_malloc_r+0xea>
 8000b64:	6821      	ldr	r1, [r4, #0]
 8000b66:	1a6d      	subs	r5, r5, r1
 8000b68:	4629      	mov	r1, r5
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	f7ff ffa6 	bl	8000abc <sbrk_aligned>
 8000b70:	3001      	adds	r0, #1
 8000b72:	d03a      	beq.n	8000bea <_malloc_r+0xea>
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	442b      	add	r3, r5
 8000b78:	6023      	str	r3, [r4, #0]
 8000b7a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	bb62      	cbnz	r2, 8000bdc <_malloc_r+0xdc>
 8000b82:	f8c8 7000 	str.w	r7, [r8]
 8000b86:	e00f      	b.n	8000ba8 <_malloc_r+0xa8>
 8000b88:	6822      	ldr	r2, [r4, #0]
 8000b8a:	1b52      	subs	r2, r2, r5
 8000b8c:	d420      	bmi.n	8000bd0 <_malloc_r+0xd0>
 8000b8e:	2a0b      	cmp	r2, #11
 8000b90:	d917      	bls.n	8000bc2 <_malloc_r+0xc2>
 8000b92:	1961      	adds	r1, r4, r5
 8000b94:	42a3      	cmp	r3, r4
 8000b96:	6025      	str	r5, [r4, #0]
 8000b98:	bf18      	it	ne
 8000b9a:	6059      	strne	r1, [r3, #4]
 8000b9c:	6863      	ldr	r3, [r4, #4]
 8000b9e:	bf08      	it	eq
 8000ba0:	f8c8 1000 	streq.w	r1, [r8]
 8000ba4:	5162      	str	r2, [r4, r5]
 8000ba6:	604b      	str	r3, [r1, #4]
 8000ba8:	4630      	mov	r0, r6
 8000baa:	f000 f82f 	bl	8000c0c <__malloc_unlock>
 8000bae:	f104 000b 	add.w	r0, r4, #11
 8000bb2:	1d23      	adds	r3, r4, #4
 8000bb4:	f020 0007 	bic.w	r0, r0, #7
 8000bb8:	1ac2      	subs	r2, r0, r3
 8000bba:	bf1c      	itt	ne
 8000bbc:	1a1b      	subne	r3, r3, r0
 8000bbe:	50a3      	strne	r3, [r4, r2]
 8000bc0:	e7af      	b.n	8000b22 <_malloc_r+0x22>
 8000bc2:	6862      	ldr	r2, [r4, #4]
 8000bc4:	42a3      	cmp	r3, r4
 8000bc6:	bf0c      	ite	eq
 8000bc8:	f8c8 2000 	streq.w	r2, [r8]
 8000bcc:	605a      	strne	r2, [r3, #4]
 8000bce:	e7eb      	b.n	8000ba8 <_malloc_r+0xa8>
 8000bd0:	4623      	mov	r3, r4
 8000bd2:	6864      	ldr	r4, [r4, #4]
 8000bd4:	e7ae      	b.n	8000b34 <_malloc_r+0x34>
 8000bd6:	463c      	mov	r4, r7
 8000bd8:	687f      	ldr	r7, [r7, #4]
 8000bda:	e7b6      	b.n	8000b4a <_malloc_r+0x4a>
 8000bdc:	461a      	mov	r2, r3
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	42a3      	cmp	r3, r4
 8000be2:	d1fb      	bne.n	8000bdc <_malloc_r+0xdc>
 8000be4:	2300      	movs	r3, #0
 8000be6:	6053      	str	r3, [r2, #4]
 8000be8:	e7de      	b.n	8000ba8 <_malloc_r+0xa8>
 8000bea:	230c      	movs	r3, #12
 8000bec:	6033      	str	r3, [r6, #0]
 8000bee:	4630      	mov	r0, r6
 8000bf0:	f000 f80c 	bl	8000c0c <__malloc_unlock>
 8000bf4:	e794      	b.n	8000b20 <_malloc_r+0x20>
 8000bf6:	6005      	str	r5, [r0, #0]
 8000bf8:	e7d6      	b.n	8000ba8 <_malloc_r+0xa8>
 8000bfa:	bf00      	nop
 8000bfc:	200001c8 	.word	0x200001c8

08000c00 <__malloc_lock>:
 8000c00:	4801      	ldr	r0, [pc, #4]	@ (8000c08 <__malloc_lock+0x8>)
 8000c02:	f7ff bf0e 	b.w	8000a22 <__retarget_lock_acquire_recursive>
 8000c06:	bf00      	nop
 8000c08:	200001c0 	.word	0x200001c0

08000c0c <__malloc_unlock>:
 8000c0c:	4801      	ldr	r0, [pc, #4]	@ (8000c14 <__malloc_unlock+0x8>)
 8000c0e:	f7ff bf09 	b.w	8000a24 <__retarget_lock_release_recursive>
 8000c12:	bf00      	nop
 8000c14:	200001c0 	.word	0x200001c0

08000c18 <__sfputc_r>:
 8000c18:	6893      	ldr	r3, [r2, #8]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	b410      	push	{r4}
 8000c20:	6093      	str	r3, [r2, #8]
 8000c22:	da08      	bge.n	8000c36 <__sfputc_r+0x1e>
 8000c24:	6994      	ldr	r4, [r2, #24]
 8000c26:	42a3      	cmp	r3, r4
 8000c28:	db01      	blt.n	8000c2e <__sfputc_r+0x16>
 8000c2a:	290a      	cmp	r1, #10
 8000c2c:	d103      	bne.n	8000c36 <__sfputc_r+0x1e>
 8000c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c32:	f000 bb6d 	b.w	8001310 <__swbuf_r>
 8000c36:	6813      	ldr	r3, [r2, #0]
 8000c38:	1c58      	adds	r0, r3, #1
 8000c3a:	6010      	str	r0, [r2, #0]
 8000c3c:	7019      	strb	r1, [r3, #0]
 8000c3e:	4608      	mov	r0, r1
 8000c40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <__sfputs_r>:
 8000c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c48:	4606      	mov	r6, r0
 8000c4a:	460f      	mov	r7, r1
 8000c4c:	4614      	mov	r4, r2
 8000c4e:	18d5      	adds	r5, r2, r3
 8000c50:	42ac      	cmp	r4, r5
 8000c52:	d101      	bne.n	8000c58 <__sfputs_r+0x12>
 8000c54:	2000      	movs	r0, #0
 8000c56:	e007      	b.n	8000c68 <__sfputs_r+0x22>
 8000c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c5c:	463a      	mov	r2, r7
 8000c5e:	4630      	mov	r0, r6
 8000c60:	f7ff ffda 	bl	8000c18 <__sfputc_r>
 8000c64:	1c43      	adds	r3, r0, #1
 8000c66:	d1f3      	bne.n	8000c50 <__sfputs_r+0xa>
 8000c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c6c <_vfiprintf_r>:
 8000c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c70:	460d      	mov	r5, r1
 8000c72:	b09d      	sub	sp, #116	@ 0x74
 8000c74:	4614      	mov	r4, r2
 8000c76:	4698      	mov	r8, r3
 8000c78:	4606      	mov	r6, r0
 8000c7a:	b118      	cbz	r0, 8000c84 <_vfiprintf_r+0x18>
 8000c7c:	6a03      	ldr	r3, [r0, #32]
 8000c7e:	b90b      	cbnz	r3, 8000c84 <_vfiprintf_r+0x18>
 8000c80:	f7ff fdca 	bl	8000818 <__sinit>
 8000c84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c86:	07d9      	lsls	r1, r3, #31
 8000c88:	d405      	bmi.n	8000c96 <_vfiprintf_r+0x2a>
 8000c8a:	89ab      	ldrh	r3, [r5, #12]
 8000c8c:	059a      	lsls	r2, r3, #22
 8000c8e:	d402      	bmi.n	8000c96 <_vfiprintf_r+0x2a>
 8000c90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c92:	f7ff fec6 	bl	8000a22 <__retarget_lock_acquire_recursive>
 8000c96:	89ab      	ldrh	r3, [r5, #12]
 8000c98:	071b      	lsls	r3, r3, #28
 8000c9a:	d501      	bpl.n	8000ca0 <_vfiprintf_r+0x34>
 8000c9c:	692b      	ldr	r3, [r5, #16]
 8000c9e:	b99b      	cbnz	r3, 8000cc8 <_vfiprintf_r+0x5c>
 8000ca0:	4629      	mov	r1, r5
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	f000 fb72 	bl	800138c <__swsetup_r>
 8000ca8:	b170      	cbz	r0, 8000cc8 <_vfiprintf_r+0x5c>
 8000caa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000cac:	07dc      	lsls	r4, r3, #31
 8000cae:	d504      	bpl.n	8000cba <_vfiprintf_r+0x4e>
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	b01d      	add	sp, #116	@ 0x74
 8000cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cba:	89ab      	ldrh	r3, [r5, #12]
 8000cbc:	0598      	lsls	r0, r3, #22
 8000cbe:	d4f7      	bmi.n	8000cb0 <_vfiprintf_r+0x44>
 8000cc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000cc2:	f7ff feaf 	bl	8000a24 <__retarget_lock_release_recursive>
 8000cc6:	e7f3      	b.n	8000cb0 <_vfiprintf_r+0x44>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ccc:	2320      	movs	r3, #32
 8000cce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000cd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cd6:	2330      	movs	r3, #48	@ 0x30
 8000cd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000e88 <_vfiprintf_r+0x21c>
 8000cdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000ce0:	f04f 0901 	mov.w	r9, #1
 8000ce4:	4623      	mov	r3, r4
 8000ce6:	469a      	mov	sl, r3
 8000ce8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cec:	b10a      	cbz	r2, 8000cf2 <_vfiprintf_r+0x86>
 8000cee:	2a25      	cmp	r2, #37	@ 0x25
 8000cf0:	d1f9      	bne.n	8000ce6 <_vfiprintf_r+0x7a>
 8000cf2:	ebba 0b04 	subs.w	fp, sl, r4
 8000cf6:	d00b      	beq.n	8000d10 <_vfiprintf_r+0xa4>
 8000cf8:	465b      	mov	r3, fp
 8000cfa:	4622      	mov	r2, r4
 8000cfc:	4629      	mov	r1, r5
 8000cfe:	4630      	mov	r0, r6
 8000d00:	f7ff ffa1 	bl	8000c46 <__sfputs_r>
 8000d04:	3001      	adds	r0, #1
 8000d06:	f000 80a7 	beq.w	8000e58 <_vfiprintf_r+0x1ec>
 8000d0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d0c:	445a      	add	r2, fp
 8000d0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d10:	f89a 3000 	ldrb.w	r3, [sl]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	f000 809f 	beq.w	8000e58 <_vfiprintf_r+0x1ec>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d24:	f10a 0a01 	add.w	sl, sl, #1
 8000d28:	9304      	str	r3, [sp, #16]
 8000d2a:	9307      	str	r3, [sp, #28]
 8000d2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d30:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d32:	4654      	mov	r4, sl
 8000d34:	2205      	movs	r2, #5
 8000d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d3a:	4853      	ldr	r0, [pc, #332]	@ (8000e88 <_vfiprintf_r+0x21c>)
 8000d3c:	f7ff fa68 	bl	8000210 <memchr>
 8000d40:	9a04      	ldr	r2, [sp, #16]
 8000d42:	b9d8      	cbnz	r0, 8000d7c <_vfiprintf_r+0x110>
 8000d44:	06d1      	lsls	r1, r2, #27
 8000d46:	bf44      	itt	mi
 8000d48:	2320      	movmi	r3, #32
 8000d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d4e:	0713      	lsls	r3, r2, #28
 8000d50:	bf44      	itt	mi
 8000d52:	232b      	movmi	r3, #43	@ 0x2b
 8000d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d58:	f89a 3000 	ldrb.w	r3, [sl]
 8000d5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d5e:	d015      	beq.n	8000d8c <_vfiprintf_r+0x120>
 8000d60:	9a07      	ldr	r2, [sp, #28]
 8000d62:	4654      	mov	r4, sl
 8000d64:	2000      	movs	r0, #0
 8000d66:	f04f 0c0a 	mov.w	ip, #10
 8000d6a:	4621      	mov	r1, r4
 8000d6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d70:	3b30      	subs	r3, #48	@ 0x30
 8000d72:	2b09      	cmp	r3, #9
 8000d74:	d94b      	bls.n	8000e0e <_vfiprintf_r+0x1a2>
 8000d76:	b1b0      	cbz	r0, 8000da6 <_vfiprintf_r+0x13a>
 8000d78:	9207      	str	r2, [sp, #28]
 8000d7a:	e014      	b.n	8000da6 <_vfiprintf_r+0x13a>
 8000d7c:	eba0 0308 	sub.w	r3, r0, r8
 8000d80:	fa09 f303 	lsl.w	r3, r9, r3
 8000d84:	4313      	orrs	r3, r2
 8000d86:	9304      	str	r3, [sp, #16]
 8000d88:	46a2      	mov	sl, r4
 8000d8a:	e7d2      	b.n	8000d32 <_vfiprintf_r+0xc6>
 8000d8c:	9b03      	ldr	r3, [sp, #12]
 8000d8e:	1d19      	adds	r1, r3, #4
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	9103      	str	r1, [sp, #12]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	bfbb      	ittet	lt
 8000d98:	425b      	neglt	r3, r3
 8000d9a:	f042 0202 	orrlt.w	r2, r2, #2
 8000d9e:	9307      	strge	r3, [sp, #28]
 8000da0:	9307      	strlt	r3, [sp, #28]
 8000da2:	bfb8      	it	lt
 8000da4:	9204      	strlt	r2, [sp, #16]
 8000da6:	7823      	ldrb	r3, [r4, #0]
 8000da8:	2b2e      	cmp	r3, #46	@ 0x2e
 8000daa:	d10a      	bne.n	8000dc2 <_vfiprintf_r+0x156>
 8000dac:	7863      	ldrb	r3, [r4, #1]
 8000dae:	2b2a      	cmp	r3, #42	@ 0x2a
 8000db0:	d132      	bne.n	8000e18 <_vfiprintf_r+0x1ac>
 8000db2:	9b03      	ldr	r3, [sp, #12]
 8000db4:	1d1a      	adds	r2, r3, #4
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	9203      	str	r2, [sp, #12]
 8000dba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000dbe:	3402      	adds	r4, #2
 8000dc0:	9305      	str	r3, [sp, #20]
 8000dc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000e98 <_vfiprintf_r+0x22c>
 8000dc6:	7821      	ldrb	r1, [r4, #0]
 8000dc8:	2203      	movs	r2, #3
 8000dca:	4650      	mov	r0, sl
 8000dcc:	f7ff fa20 	bl	8000210 <memchr>
 8000dd0:	b138      	cbz	r0, 8000de2 <_vfiprintf_r+0x176>
 8000dd2:	9b04      	ldr	r3, [sp, #16]
 8000dd4:	eba0 000a 	sub.w	r0, r0, sl
 8000dd8:	2240      	movs	r2, #64	@ 0x40
 8000dda:	4082      	lsls	r2, r0
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	3401      	adds	r4, #1
 8000de0:	9304      	str	r3, [sp, #16]
 8000de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000de6:	4829      	ldr	r0, [pc, #164]	@ (8000e8c <_vfiprintf_r+0x220>)
 8000de8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000dec:	2206      	movs	r2, #6
 8000dee:	f7ff fa0f 	bl	8000210 <memchr>
 8000df2:	2800      	cmp	r0, #0
 8000df4:	d03f      	beq.n	8000e76 <_vfiprintf_r+0x20a>
 8000df6:	4b26      	ldr	r3, [pc, #152]	@ (8000e90 <_vfiprintf_r+0x224>)
 8000df8:	bb1b      	cbnz	r3, 8000e42 <_vfiprintf_r+0x1d6>
 8000dfa:	9b03      	ldr	r3, [sp, #12]
 8000dfc:	3307      	adds	r3, #7
 8000dfe:	f023 0307 	bic.w	r3, r3, #7
 8000e02:	3308      	adds	r3, #8
 8000e04:	9303      	str	r3, [sp, #12]
 8000e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e08:	443b      	add	r3, r7
 8000e0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e0c:	e76a      	b.n	8000ce4 <_vfiprintf_r+0x78>
 8000e0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e12:	460c      	mov	r4, r1
 8000e14:	2001      	movs	r0, #1
 8000e16:	e7a8      	b.n	8000d6a <_vfiprintf_r+0xfe>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	3401      	adds	r4, #1
 8000e1c:	9305      	str	r3, [sp, #20]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 0c0a 	mov.w	ip, #10
 8000e24:	4620      	mov	r0, r4
 8000e26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e2a:	3a30      	subs	r2, #48	@ 0x30
 8000e2c:	2a09      	cmp	r2, #9
 8000e2e:	d903      	bls.n	8000e38 <_vfiprintf_r+0x1cc>
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d0c6      	beq.n	8000dc2 <_vfiprintf_r+0x156>
 8000e34:	9105      	str	r1, [sp, #20]
 8000e36:	e7c4      	b.n	8000dc2 <_vfiprintf_r+0x156>
 8000e38:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e3c:	4604      	mov	r4, r0
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e7f0      	b.n	8000e24 <_vfiprintf_r+0x1b8>
 8000e42:	ab03      	add	r3, sp, #12
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	462a      	mov	r2, r5
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <_vfiprintf_r+0x228>)
 8000e4a:	a904      	add	r1, sp, #16
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	f3af 8000 	nop.w
 8000e52:	4607      	mov	r7, r0
 8000e54:	1c78      	adds	r0, r7, #1
 8000e56:	d1d6      	bne.n	8000e06 <_vfiprintf_r+0x19a>
 8000e58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e5a:	07d9      	lsls	r1, r3, #31
 8000e5c:	d405      	bmi.n	8000e6a <_vfiprintf_r+0x1fe>
 8000e5e:	89ab      	ldrh	r3, [r5, #12]
 8000e60:	059a      	lsls	r2, r3, #22
 8000e62:	d402      	bmi.n	8000e6a <_vfiprintf_r+0x1fe>
 8000e64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e66:	f7ff fddd 	bl	8000a24 <__retarget_lock_release_recursive>
 8000e6a:	89ab      	ldrh	r3, [r5, #12]
 8000e6c:	065b      	lsls	r3, r3, #25
 8000e6e:	f53f af1f 	bmi.w	8000cb0 <_vfiprintf_r+0x44>
 8000e72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e74:	e71e      	b.n	8000cb4 <_vfiprintf_r+0x48>
 8000e76:	ab03      	add	r3, sp, #12
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	462a      	mov	r2, r5
 8000e7c:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <_vfiprintf_r+0x228>)
 8000e7e:	a904      	add	r1, sp, #16
 8000e80:	4630      	mov	r0, r6
 8000e82:	f000 f879 	bl	8000f78 <_printf_i>
 8000e86:	e7e4      	b.n	8000e52 <_vfiprintf_r+0x1e6>
 8000e88:	080015ae 	.word	0x080015ae
 8000e8c:	080015b8 	.word	0x080015b8
 8000e90:	00000000 	.word	0x00000000
 8000e94:	08000c47 	.word	0x08000c47
 8000e98:	080015b4 	.word	0x080015b4

08000e9c <_printf_common>:
 8000e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea0:	4616      	mov	r6, r2
 8000ea2:	4698      	mov	r8, r3
 8000ea4:	688a      	ldr	r2, [r1, #8]
 8000ea6:	690b      	ldr	r3, [r1, #16]
 8000ea8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000eac:	4293      	cmp	r3, r2
 8000eae:	bfb8      	it	lt
 8000eb0:	4613      	movlt	r3, r2
 8000eb2:	6033      	str	r3, [r6, #0]
 8000eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000eb8:	4607      	mov	r7, r0
 8000eba:	460c      	mov	r4, r1
 8000ebc:	b10a      	cbz	r2, 8000ec2 <_printf_common+0x26>
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	6033      	str	r3, [r6, #0]
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	0699      	lsls	r1, r3, #26
 8000ec6:	bf42      	ittt	mi
 8000ec8:	6833      	ldrmi	r3, [r6, #0]
 8000eca:	3302      	addmi	r3, #2
 8000ecc:	6033      	strmi	r3, [r6, #0]
 8000ece:	6825      	ldr	r5, [r4, #0]
 8000ed0:	f015 0506 	ands.w	r5, r5, #6
 8000ed4:	d106      	bne.n	8000ee4 <_printf_common+0x48>
 8000ed6:	f104 0a19 	add.w	sl, r4, #25
 8000eda:	68e3      	ldr	r3, [r4, #12]
 8000edc:	6832      	ldr	r2, [r6, #0]
 8000ede:	1a9b      	subs	r3, r3, r2
 8000ee0:	42ab      	cmp	r3, r5
 8000ee2:	dc26      	bgt.n	8000f32 <_printf_common+0x96>
 8000ee4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000ee8:	6822      	ldr	r2, [r4, #0]
 8000eea:	3b00      	subs	r3, #0
 8000eec:	bf18      	it	ne
 8000eee:	2301      	movne	r3, #1
 8000ef0:	0692      	lsls	r2, r2, #26
 8000ef2:	d42b      	bmi.n	8000f4c <_printf_common+0xb0>
 8000ef4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ef8:	4641      	mov	r1, r8
 8000efa:	4638      	mov	r0, r7
 8000efc:	47c8      	blx	r9
 8000efe:	3001      	adds	r0, #1
 8000f00:	d01e      	beq.n	8000f40 <_printf_common+0xa4>
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	6922      	ldr	r2, [r4, #16]
 8000f06:	f003 0306 	and.w	r3, r3, #6
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf02      	ittt	eq
 8000f0e:	68e5      	ldreq	r5, [r4, #12]
 8000f10:	6833      	ldreq	r3, [r6, #0]
 8000f12:	1aed      	subeq	r5, r5, r3
 8000f14:	68a3      	ldr	r3, [r4, #8]
 8000f16:	bf0c      	ite	eq
 8000f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f1c:	2500      	movne	r5, #0
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	bfc4      	itt	gt
 8000f22:	1a9b      	subgt	r3, r3, r2
 8000f24:	18ed      	addgt	r5, r5, r3
 8000f26:	2600      	movs	r6, #0
 8000f28:	341a      	adds	r4, #26
 8000f2a:	42b5      	cmp	r5, r6
 8000f2c:	d11a      	bne.n	8000f64 <_printf_common+0xc8>
 8000f2e:	2000      	movs	r0, #0
 8000f30:	e008      	b.n	8000f44 <_printf_common+0xa8>
 8000f32:	2301      	movs	r3, #1
 8000f34:	4652      	mov	r2, sl
 8000f36:	4641      	mov	r1, r8
 8000f38:	4638      	mov	r0, r7
 8000f3a:	47c8      	blx	r9
 8000f3c:	3001      	adds	r0, #1
 8000f3e:	d103      	bne.n	8000f48 <_printf_common+0xac>
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f48:	3501      	adds	r5, #1
 8000f4a:	e7c6      	b.n	8000eda <_printf_common+0x3e>
 8000f4c:	18e1      	adds	r1, r4, r3
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	2030      	movs	r0, #48	@ 0x30
 8000f52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f56:	4422      	add	r2, r4
 8000f58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f60:	3302      	adds	r3, #2
 8000f62:	e7c7      	b.n	8000ef4 <_printf_common+0x58>
 8000f64:	2301      	movs	r3, #1
 8000f66:	4622      	mov	r2, r4
 8000f68:	4641      	mov	r1, r8
 8000f6a:	4638      	mov	r0, r7
 8000f6c:	47c8      	blx	r9
 8000f6e:	3001      	adds	r0, #1
 8000f70:	d0e6      	beq.n	8000f40 <_printf_common+0xa4>
 8000f72:	3601      	adds	r6, #1
 8000f74:	e7d9      	b.n	8000f2a <_printf_common+0x8e>
	...

08000f78 <_printf_i>:
 8000f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f7c:	7e0f      	ldrb	r7, [r1, #24]
 8000f7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f80:	2f78      	cmp	r7, #120	@ 0x78
 8000f82:	4691      	mov	r9, r2
 8000f84:	4680      	mov	r8, r0
 8000f86:	460c      	mov	r4, r1
 8000f88:	469a      	mov	sl, r3
 8000f8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f8e:	d807      	bhi.n	8000fa0 <_printf_i+0x28>
 8000f90:	2f62      	cmp	r7, #98	@ 0x62
 8000f92:	d80a      	bhi.n	8000faa <_printf_i+0x32>
 8000f94:	2f00      	cmp	r7, #0
 8000f96:	f000 80d2 	beq.w	800113e <_printf_i+0x1c6>
 8000f9a:	2f58      	cmp	r7, #88	@ 0x58
 8000f9c:	f000 80b9 	beq.w	8001112 <_printf_i+0x19a>
 8000fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000fa8:	e03a      	b.n	8001020 <_printf_i+0xa8>
 8000faa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000fae:	2b15      	cmp	r3, #21
 8000fb0:	d8f6      	bhi.n	8000fa0 <_printf_i+0x28>
 8000fb2:	a101      	add	r1, pc, #4	@ (adr r1, 8000fb8 <_printf_i+0x40>)
 8000fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000fb8:	08001011 	.word	0x08001011
 8000fbc:	08001025 	.word	0x08001025
 8000fc0:	08000fa1 	.word	0x08000fa1
 8000fc4:	08000fa1 	.word	0x08000fa1
 8000fc8:	08000fa1 	.word	0x08000fa1
 8000fcc:	08000fa1 	.word	0x08000fa1
 8000fd0:	08001025 	.word	0x08001025
 8000fd4:	08000fa1 	.word	0x08000fa1
 8000fd8:	08000fa1 	.word	0x08000fa1
 8000fdc:	08000fa1 	.word	0x08000fa1
 8000fe0:	08000fa1 	.word	0x08000fa1
 8000fe4:	08001125 	.word	0x08001125
 8000fe8:	0800104f 	.word	0x0800104f
 8000fec:	080010df 	.word	0x080010df
 8000ff0:	08000fa1 	.word	0x08000fa1
 8000ff4:	08000fa1 	.word	0x08000fa1
 8000ff8:	08001147 	.word	0x08001147
 8000ffc:	08000fa1 	.word	0x08000fa1
 8001000:	0800104f 	.word	0x0800104f
 8001004:	08000fa1 	.word	0x08000fa1
 8001008:	08000fa1 	.word	0x08000fa1
 800100c:	080010e7 	.word	0x080010e7
 8001010:	6833      	ldr	r3, [r6, #0]
 8001012:	1d1a      	adds	r2, r3, #4
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6032      	str	r2, [r6, #0]
 8001018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800101c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001020:	2301      	movs	r3, #1
 8001022:	e09d      	b.n	8001160 <_printf_i+0x1e8>
 8001024:	6833      	ldr	r3, [r6, #0]
 8001026:	6820      	ldr	r0, [r4, #0]
 8001028:	1d19      	adds	r1, r3, #4
 800102a:	6031      	str	r1, [r6, #0]
 800102c:	0606      	lsls	r6, r0, #24
 800102e:	d501      	bpl.n	8001034 <_printf_i+0xbc>
 8001030:	681d      	ldr	r5, [r3, #0]
 8001032:	e003      	b.n	800103c <_printf_i+0xc4>
 8001034:	0645      	lsls	r5, r0, #25
 8001036:	d5fb      	bpl.n	8001030 <_printf_i+0xb8>
 8001038:	f9b3 5000 	ldrsh.w	r5, [r3]
 800103c:	2d00      	cmp	r5, #0
 800103e:	da03      	bge.n	8001048 <_printf_i+0xd0>
 8001040:	232d      	movs	r3, #45	@ 0x2d
 8001042:	426d      	negs	r5, r5
 8001044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001048:	4859      	ldr	r0, [pc, #356]	@ (80011b0 <_printf_i+0x238>)
 800104a:	230a      	movs	r3, #10
 800104c:	e011      	b.n	8001072 <_printf_i+0xfa>
 800104e:	6821      	ldr	r1, [r4, #0]
 8001050:	6833      	ldr	r3, [r6, #0]
 8001052:	0608      	lsls	r0, r1, #24
 8001054:	f853 5b04 	ldr.w	r5, [r3], #4
 8001058:	d402      	bmi.n	8001060 <_printf_i+0xe8>
 800105a:	0649      	lsls	r1, r1, #25
 800105c:	bf48      	it	mi
 800105e:	b2ad      	uxthmi	r5, r5
 8001060:	2f6f      	cmp	r7, #111	@ 0x6f
 8001062:	4853      	ldr	r0, [pc, #332]	@ (80011b0 <_printf_i+0x238>)
 8001064:	6033      	str	r3, [r6, #0]
 8001066:	bf14      	ite	ne
 8001068:	230a      	movne	r3, #10
 800106a:	2308      	moveq	r3, #8
 800106c:	2100      	movs	r1, #0
 800106e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001072:	6866      	ldr	r6, [r4, #4]
 8001074:	60a6      	str	r6, [r4, #8]
 8001076:	2e00      	cmp	r6, #0
 8001078:	bfa2      	ittt	ge
 800107a:	6821      	ldrge	r1, [r4, #0]
 800107c:	f021 0104 	bicge.w	r1, r1, #4
 8001080:	6021      	strge	r1, [r4, #0]
 8001082:	b90d      	cbnz	r5, 8001088 <_printf_i+0x110>
 8001084:	2e00      	cmp	r6, #0
 8001086:	d04b      	beq.n	8001120 <_printf_i+0x1a8>
 8001088:	4616      	mov	r6, r2
 800108a:	fbb5 f1f3 	udiv	r1, r5, r3
 800108e:	fb03 5711 	mls	r7, r3, r1, r5
 8001092:	5dc7      	ldrb	r7, [r0, r7]
 8001094:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001098:	462f      	mov	r7, r5
 800109a:	42bb      	cmp	r3, r7
 800109c:	460d      	mov	r5, r1
 800109e:	d9f4      	bls.n	800108a <_printf_i+0x112>
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d10b      	bne.n	80010bc <_printf_i+0x144>
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	07df      	lsls	r7, r3, #31
 80010a8:	d508      	bpl.n	80010bc <_printf_i+0x144>
 80010aa:	6923      	ldr	r3, [r4, #16]
 80010ac:	6861      	ldr	r1, [r4, #4]
 80010ae:	4299      	cmp	r1, r3
 80010b0:	bfde      	ittt	le
 80010b2:	2330      	movle	r3, #48	@ 0x30
 80010b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80010b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80010bc:	1b92      	subs	r2, r2, r6
 80010be:	6122      	str	r2, [r4, #16]
 80010c0:	f8cd a000 	str.w	sl, [sp]
 80010c4:	464b      	mov	r3, r9
 80010c6:	aa03      	add	r2, sp, #12
 80010c8:	4621      	mov	r1, r4
 80010ca:	4640      	mov	r0, r8
 80010cc:	f7ff fee6 	bl	8000e9c <_printf_common>
 80010d0:	3001      	adds	r0, #1
 80010d2:	d14a      	bne.n	800116a <_printf_i+0x1f2>
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	b004      	add	sp, #16
 80010da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	f043 0320 	orr.w	r3, r3, #32
 80010e4:	6023      	str	r3, [r4, #0]
 80010e6:	4833      	ldr	r0, [pc, #204]	@ (80011b4 <_printf_i+0x23c>)
 80010e8:	2778      	movs	r7, #120	@ 0x78
 80010ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	6831      	ldr	r1, [r6, #0]
 80010f2:	061f      	lsls	r7, r3, #24
 80010f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80010f8:	d402      	bmi.n	8001100 <_printf_i+0x188>
 80010fa:	065f      	lsls	r7, r3, #25
 80010fc:	bf48      	it	mi
 80010fe:	b2ad      	uxthmi	r5, r5
 8001100:	6031      	str	r1, [r6, #0]
 8001102:	07d9      	lsls	r1, r3, #31
 8001104:	bf44      	itt	mi
 8001106:	f043 0320 	orrmi.w	r3, r3, #32
 800110a:	6023      	strmi	r3, [r4, #0]
 800110c:	b11d      	cbz	r5, 8001116 <_printf_i+0x19e>
 800110e:	2310      	movs	r3, #16
 8001110:	e7ac      	b.n	800106c <_printf_i+0xf4>
 8001112:	4827      	ldr	r0, [pc, #156]	@ (80011b0 <_printf_i+0x238>)
 8001114:	e7e9      	b.n	80010ea <_printf_i+0x172>
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	f023 0320 	bic.w	r3, r3, #32
 800111c:	6023      	str	r3, [r4, #0]
 800111e:	e7f6      	b.n	800110e <_printf_i+0x196>
 8001120:	4616      	mov	r6, r2
 8001122:	e7bd      	b.n	80010a0 <_printf_i+0x128>
 8001124:	6833      	ldr	r3, [r6, #0]
 8001126:	6825      	ldr	r5, [r4, #0]
 8001128:	6961      	ldr	r1, [r4, #20]
 800112a:	1d18      	adds	r0, r3, #4
 800112c:	6030      	str	r0, [r6, #0]
 800112e:	062e      	lsls	r6, r5, #24
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	d501      	bpl.n	8001138 <_printf_i+0x1c0>
 8001134:	6019      	str	r1, [r3, #0]
 8001136:	e002      	b.n	800113e <_printf_i+0x1c6>
 8001138:	0668      	lsls	r0, r5, #25
 800113a:	d5fb      	bpl.n	8001134 <_printf_i+0x1bc>
 800113c:	8019      	strh	r1, [r3, #0]
 800113e:	2300      	movs	r3, #0
 8001140:	6123      	str	r3, [r4, #16]
 8001142:	4616      	mov	r6, r2
 8001144:	e7bc      	b.n	80010c0 <_printf_i+0x148>
 8001146:	6833      	ldr	r3, [r6, #0]
 8001148:	1d1a      	adds	r2, r3, #4
 800114a:	6032      	str	r2, [r6, #0]
 800114c:	681e      	ldr	r6, [r3, #0]
 800114e:	6862      	ldr	r2, [r4, #4]
 8001150:	2100      	movs	r1, #0
 8001152:	4630      	mov	r0, r6
 8001154:	f7ff f85c 	bl	8000210 <memchr>
 8001158:	b108      	cbz	r0, 800115e <_printf_i+0x1e6>
 800115a:	1b80      	subs	r0, r0, r6
 800115c:	6060      	str	r0, [r4, #4]
 800115e:	6863      	ldr	r3, [r4, #4]
 8001160:	6123      	str	r3, [r4, #16]
 8001162:	2300      	movs	r3, #0
 8001164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001168:	e7aa      	b.n	80010c0 <_printf_i+0x148>
 800116a:	6923      	ldr	r3, [r4, #16]
 800116c:	4632      	mov	r2, r6
 800116e:	4649      	mov	r1, r9
 8001170:	4640      	mov	r0, r8
 8001172:	47d0      	blx	sl
 8001174:	3001      	adds	r0, #1
 8001176:	d0ad      	beq.n	80010d4 <_printf_i+0x15c>
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	079b      	lsls	r3, r3, #30
 800117c:	d413      	bmi.n	80011a6 <_printf_i+0x22e>
 800117e:	68e0      	ldr	r0, [r4, #12]
 8001180:	9b03      	ldr	r3, [sp, #12]
 8001182:	4298      	cmp	r0, r3
 8001184:	bfb8      	it	lt
 8001186:	4618      	movlt	r0, r3
 8001188:	e7a6      	b.n	80010d8 <_printf_i+0x160>
 800118a:	2301      	movs	r3, #1
 800118c:	4632      	mov	r2, r6
 800118e:	4649      	mov	r1, r9
 8001190:	4640      	mov	r0, r8
 8001192:	47d0      	blx	sl
 8001194:	3001      	adds	r0, #1
 8001196:	d09d      	beq.n	80010d4 <_printf_i+0x15c>
 8001198:	3501      	adds	r5, #1
 800119a:	68e3      	ldr	r3, [r4, #12]
 800119c:	9903      	ldr	r1, [sp, #12]
 800119e:	1a5b      	subs	r3, r3, r1
 80011a0:	42ab      	cmp	r3, r5
 80011a2:	dcf2      	bgt.n	800118a <_printf_i+0x212>
 80011a4:	e7eb      	b.n	800117e <_printf_i+0x206>
 80011a6:	2500      	movs	r5, #0
 80011a8:	f104 0619 	add.w	r6, r4, #25
 80011ac:	e7f5      	b.n	800119a <_printf_i+0x222>
 80011ae:	bf00      	nop
 80011b0:	080015bf 	.word	0x080015bf
 80011b4:	080015d0 	.word	0x080015d0

080011b8 <__sflush_r>:
 80011b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80011bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011c0:	0716      	lsls	r6, r2, #28
 80011c2:	4605      	mov	r5, r0
 80011c4:	460c      	mov	r4, r1
 80011c6:	d454      	bmi.n	8001272 <__sflush_r+0xba>
 80011c8:	684b      	ldr	r3, [r1, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	dc02      	bgt.n	80011d4 <__sflush_r+0x1c>
 80011ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	dd48      	ble.n	8001266 <__sflush_r+0xae>
 80011d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011d6:	2e00      	cmp	r6, #0
 80011d8:	d045      	beq.n	8001266 <__sflush_r+0xae>
 80011da:	2300      	movs	r3, #0
 80011dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80011e0:	682f      	ldr	r7, [r5, #0]
 80011e2:	6a21      	ldr	r1, [r4, #32]
 80011e4:	602b      	str	r3, [r5, #0]
 80011e6:	d030      	beq.n	800124a <__sflush_r+0x92>
 80011e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80011ea:	89a3      	ldrh	r3, [r4, #12]
 80011ec:	0759      	lsls	r1, r3, #29
 80011ee:	d505      	bpl.n	80011fc <__sflush_r+0x44>
 80011f0:	6863      	ldr	r3, [r4, #4]
 80011f2:	1ad2      	subs	r2, r2, r3
 80011f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80011f6:	b10b      	cbz	r3, 80011fc <__sflush_r+0x44>
 80011f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011fa:	1ad2      	subs	r2, r2, r3
 80011fc:	2300      	movs	r3, #0
 80011fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001200:	6a21      	ldr	r1, [r4, #32]
 8001202:	4628      	mov	r0, r5
 8001204:	47b0      	blx	r6
 8001206:	1c43      	adds	r3, r0, #1
 8001208:	89a3      	ldrh	r3, [r4, #12]
 800120a:	d106      	bne.n	800121a <__sflush_r+0x62>
 800120c:	6829      	ldr	r1, [r5, #0]
 800120e:	291d      	cmp	r1, #29
 8001210:	d82b      	bhi.n	800126a <__sflush_r+0xb2>
 8001212:	4a2a      	ldr	r2, [pc, #168]	@ (80012bc <__sflush_r+0x104>)
 8001214:	410a      	asrs	r2, r1
 8001216:	07d6      	lsls	r6, r2, #31
 8001218:	d427      	bmi.n	800126a <__sflush_r+0xb2>
 800121a:	2200      	movs	r2, #0
 800121c:	6062      	str	r2, [r4, #4]
 800121e:	04d9      	lsls	r1, r3, #19
 8001220:	6922      	ldr	r2, [r4, #16]
 8001222:	6022      	str	r2, [r4, #0]
 8001224:	d504      	bpl.n	8001230 <__sflush_r+0x78>
 8001226:	1c42      	adds	r2, r0, #1
 8001228:	d101      	bne.n	800122e <__sflush_r+0x76>
 800122a:	682b      	ldr	r3, [r5, #0]
 800122c:	b903      	cbnz	r3, 8001230 <__sflush_r+0x78>
 800122e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001232:	602f      	str	r7, [r5, #0]
 8001234:	b1b9      	cbz	r1, 8001266 <__sflush_r+0xae>
 8001236:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800123a:	4299      	cmp	r1, r3
 800123c:	d002      	beq.n	8001244 <__sflush_r+0x8c>
 800123e:	4628      	mov	r0, r5
 8001240:	f7ff fbf2 	bl	8000a28 <_free_r>
 8001244:	2300      	movs	r3, #0
 8001246:	6363      	str	r3, [r4, #52]	@ 0x34
 8001248:	e00d      	b.n	8001266 <__sflush_r+0xae>
 800124a:	2301      	movs	r3, #1
 800124c:	4628      	mov	r0, r5
 800124e:	47b0      	blx	r6
 8001250:	4602      	mov	r2, r0
 8001252:	1c50      	adds	r0, r2, #1
 8001254:	d1c9      	bne.n	80011ea <__sflush_r+0x32>
 8001256:	682b      	ldr	r3, [r5, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0c6      	beq.n	80011ea <__sflush_r+0x32>
 800125c:	2b1d      	cmp	r3, #29
 800125e:	d001      	beq.n	8001264 <__sflush_r+0xac>
 8001260:	2b16      	cmp	r3, #22
 8001262:	d11e      	bne.n	80012a2 <__sflush_r+0xea>
 8001264:	602f      	str	r7, [r5, #0]
 8001266:	2000      	movs	r0, #0
 8001268:	e022      	b.n	80012b0 <__sflush_r+0xf8>
 800126a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800126e:	b21b      	sxth	r3, r3
 8001270:	e01b      	b.n	80012aa <__sflush_r+0xf2>
 8001272:	690f      	ldr	r7, [r1, #16]
 8001274:	2f00      	cmp	r7, #0
 8001276:	d0f6      	beq.n	8001266 <__sflush_r+0xae>
 8001278:	0793      	lsls	r3, r2, #30
 800127a:	680e      	ldr	r6, [r1, #0]
 800127c:	bf08      	it	eq
 800127e:	694b      	ldreq	r3, [r1, #20]
 8001280:	600f      	str	r7, [r1, #0]
 8001282:	bf18      	it	ne
 8001284:	2300      	movne	r3, #0
 8001286:	eba6 0807 	sub.w	r8, r6, r7
 800128a:	608b      	str	r3, [r1, #8]
 800128c:	f1b8 0f00 	cmp.w	r8, #0
 8001290:	dde9      	ble.n	8001266 <__sflush_r+0xae>
 8001292:	6a21      	ldr	r1, [r4, #32]
 8001294:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001296:	4643      	mov	r3, r8
 8001298:	463a      	mov	r2, r7
 800129a:	4628      	mov	r0, r5
 800129c:	47b0      	blx	r6
 800129e:	2800      	cmp	r0, #0
 80012a0:	dc08      	bgt.n	80012b4 <__sflush_r+0xfc>
 80012a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012aa:	81a3      	strh	r3, [r4, #12]
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012b4:	4407      	add	r7, r0
 80012b6:	eba8 0800 	sub.w	r8, r8, r0
 80012ba:	e7e7      	b.n	800128c <__sflush_r+0xd4>
 80012bc:	dfbffffe 	.word	0xdfbffffe

080012c0 <_fflush_r>:
 80012c0:	b538      	push	{r3, r4, r5, lr}
 80012c2:	690b      	ldr	r3, [r1, #16]
 80012c4:	4605      	mov	r5, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	b913      	cbnz	r3, 80012d0 <_fflush_r+0x10>
 80012ca:	2500      	movs	r5, #0
 80012cc:	4628      	mov	r0, r5
 80012ce:	bd38      	pop	{r3, r4, r5, pc}
 80012d0:	b118      	cbz	r0, 80012da <_fflush_r+0x1a>
 80012d2:	6a03      	ldr	r3, [r0, #32]
 80012d4:	b90b      	cbnz	r3, 80012da <_fflush_r+0x1a>
 80012d6:	f7ff fa9f 	bl	8000818 <__sinit>
 80012da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f3      	beq.n	80012ca <_fflush_r+0xa>
 80012e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80012e4:	07d0      	lsls	r0, r2, #31
 80012e6:	d404      	bmi.n	80012f2 <_fflush_r+0x32>
 80012e8:	0599      	lsls	r1, r3, #22
 80012ea:	d402      	bmi.n	80012f2 <_fflush_r+0x32>
 80012ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012ee:	f7ff fb98 	bl	8000a22 <__retarget_lock_acquire_recursive>
 80012f2:	4628      	mov	r0, r5
 80012f4:	4621      	mov	r1, r4
 80012f6:	f7ff ff5f 	bl	80011b8 <__sflush_r>
 80012fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012fc:	07da      	lsls	r2, r3, #31
 80012fe:	4605      	mov	r5, r0
 8001300:	d4e4      	bmi.n	80012cc <_fflush_r+0xc>
 8001302:	89a3      	ldrh	r3, [r4, #12]
 8001304:	059b      	lsls	r3, r3, #22
 8001306:	d4e1      	bmi.n	80012cc <_fflush_r+0xc>
 8001308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800130a:	f7ff fb8b 	bl	8000a24 <__retarget_lock_release_recursive>
 800130e:	e7dd      	b.n	80012cc <_fflush_r+0xc>

08001310 <__swbuf_r>:
 8001310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001312:	460e      	mov	r6, r1
 8001314:	4614      	mov	r4, r2
 8001316:	4605      	mov	r5, r0
 8001318:	b118      	cbz	r0, 8001322 <__swbuf_r+0x12>
 800131a:	6a03      	ldr	r3, [r0, #32]
 800131c:	b90b      	cbnz	r3, 8001322 <__swbuf_r+0x12>
 800131e:	f7ff fa7b 	bl	8000818 <__sinit>
 8001322:	69a3      	ldr	r3, [r4, #24]
 8001324:	60a3      	str	r3, [r4, #8]
 8001326:	89a3      	ldrh	r3, [r4, #12]
 8001328:	071a      	lsls	r2, r3, #28
 800132a:	d501      	bpl.n	8001330 <__swbuf_r+0x20>
 800132c:	6923      	ldr	r3, [r4, #16]
 800132e:	b943      	cbnz	r3, 8001342 <__swbuf_r+0x32>
 8001330:	4621      	mov	r1, r4
 8001332:	4628      	mov	r0, r5
 8001334:	f000 f82a 	bl	800138c <__swsetup_r>
 8001338:	b118      	cbz	r0, 8001342 <__swbuf_r+0x32>
 800133a:	f04f 37ff 	mov.w	r7, #4294967295
 800133e:	4638      	mov	r0, r7
 8001340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001342:	6823      	ldr	r3, [r4, #0]
 8001344:	6922      	ldr	r2, [r4, #16]
 8001346:	1a98      	subs	r0, r3, r2
 8001348:	6963      	ldr	r3, [r4, #20]
 800134a:	b2f6      	uxtb	r6, r6
 800134c:	4283      	cmp	r3, r0
 800134e:	4637      	mov	r7, r6
 8001350:	dc05      	bgt.n	800135e <__swbuf_r+0x4e>
 8001352:	4621      	mov	r1, r4
 8001354:	4628      	mov	r0, r5
 8001356:	f7ff ffb3 	bl	80012c0 <_fflush_r>
 800135a:	2800      	cmp	r0, #0
 800135c:	d1ed      	bne.n	800133a <__swbuf_r+0x2a>
 800135e:	68a3      	ldr	r3, [r4, #8]
 8001360:	3b01      	subs	r3, #1
 8001362:	60a3      	str	r3, [r4, #8]
 8001364:	6823      	ldr	r3, [r4, #0]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	6022      	str	r2, [r4, #0]
 800136a:	701e      	strb	r6, [r3, #0]
 800136c:	6962      	ldr	r2, [r4, #20]
 800136e:	1c43      	adds	r3, r0, #1
 8001370:	429a      	cmp	r2, r3
 8001372:	d004      	beq.n	800137e <__swbuf_r+0x6e>
 8001374:	89a3      	ldrh	r3, [r4, #12]
 8001376:	07db      	lsls	r3, r3, #31
 8001378:	d5e1      	bpl.n	800133e <__swbuf_r+0x2e>
 800137a:	2e0a      	cmp	r6, #10
 800137c:	d1df      	bne.n	800133e <__swbuf_r+0x2e>
 800137e:	4621      	mov	r1, r4
 8001380:	4628      	mov	r0, r5
 8001382:	f7ff ff9d 	bl	80012c0 <_fflush_r>
 8001386:	2800      	cmp	r0, #0
 8001388:	d0d9      	beq.n	800133e <__swbuf_r+0x2e>
 800138a:	e7d6      	b.n	800133a <__swbuf_r+0x2a>

0800138c <__swsetup_r>:
 800138c:	b538      	push	{r3, r4, r5, lr}
 800138e:	4b29      	ldr	r3, [pc, #164]	@ (8001434 <__swsetup_r+0xa8>)
 8001390:	4605      	mov	r5, r0
 8001392:	6818      	ldr	r0, [r3, #0]
 8001394:	460c      	mov	r4, r1
 8001396:	b118      	cbz	r0, 80013a0 <__swsetup_r+0x14>
 8001398:	6a03      	ldr	r3, [r0, #32]
 800139a:	b90b      	cbnz	r3, 80013a0 <__swsetup_r+0x14>
 800139c:	f7ff fa3c 	bl	8000818 <__sinit>
 80013a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013a4:	0719      	lsls	r1, r3, #28
 80013a6:	d422      	bmi.n	80013ee <__swsetup_r+0x62>
 80013a8:	06da      	lsls	r2, r3, #27
 80013aa:	d407      	bmi.n	80013bc <__swsetup_r+0x30>
 80013ac:	2209      	movs	r2, #9
 80013ae:	602a      	str	r2, [r5, #0]
 80013b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013b4:	81a3      	strh	r3, [r4, #12]
 80013b6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ba:	e033      	b.n	8001424 <__swsetup_r+0x98>
 80013bc:	0758      	lsls	r0, r3, #29
 80013be:	d512      	bpl.n	80013e6 <__swsetup_r+0x5a>
 80013c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80013c2:	b141      	cbz	r1, 80013d6 <__swsetup_r+0x4a>
 80013c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80013c8:	4299      	cmp	r1, r3
 80013ca:	d002      	beq.n	80013d2 <__swsetup_r+0x46>
 80013cc:	4628      	mov	r0, r5
 80013ce:	f7ff fb2b 	bl	8000a28 <_free_r>
 80013d2:	2300      	movs	r3, #0
 80013d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80013d6:	89a3      	ldrh	r3, [r4, #12]
 80013d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80013dc:	81a3      	strh	r3, [r4, #12]
 80013de:	2300      	movs	r3, #0
 80013e0:	6063      	str	r3, [r4, #4]
 80013e2:	6923      	ldr	r3, [r4, #16]
 80013e4:	6023      	str	r3, [r4, #0]
 80013e6:	89a3      	ldrh	r3, [r4, #12]
 80013e8:	f043 0308 	orr.w	r3, r3, #8
 80013ec:	81a3      	strh	r3, [r4, #12]
 80013ee:	6923      	ldr	r3, [r4, #16]
 80013f0:	b94b      	cbnz	r3, 8001406 <__swsetup_r+0x7a>
 80013f2:	89a3      	ldrh	r3, [r4, #12]
 80013f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80013f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013fc:	d003      	beq.n	8001406 <__swsetup_r+0x7a>
 80013fe:	4621      	mov	r1, r4
 8001400:	4628      	mov	r0, r5
 8001402:	f000 f84f 	bl	80014a4 <__smakebuf_r>
 8001406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800140a:	f013 0201 	ands.w	r2, r3, #1
 800140e:	d00a      	beq.n	8001426 <__swsetup_r+0x9a>
 8001410:	2200      	movs	r2, #0
 8001412:	60a2      	str	r2, [r4, #8]
 8001414:	6962      	ldr	r2, [r4, #20]
 8001416:	4252      	negs	r2, r2
 8001418:	61a2      	str	r2, [r4, #24]
 800141a:	6922      	ldr	r2, [r4, #16]
 800141c:	b942      	cbnz	r2, 8001430 <__swsetup_r+0xa4>
 800141e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001422:	d1c5      	bne.n	80013b0 <__swsetup_r+0x24>
 8001424:	bd38      	pop	{r3, r4, r5, pc}
 8001426:	0799      	lsls	r1, r3, #30
 8001428:	bf58      	it	pl
 800142a:	6962      	ldrpl	r2, [r4, #20]
 800142c:	60a2      	str	r2, [r4, #8]
 800142e:	e7f4      	b.n	800141a <__swsetup_r+0x8e>
 8001430:	2000      	movs	r0, #0
 8001432:	e7f7      	b.n	8001424 <__swsetup_r+0x98>
 8001434:	2000000c 	.word	0x2000000c

08001438 <_sbrk_r>:
 8001438:	b538      	push	{r3, r4, r5, lr}
 800143a:	4d06      	ldr	r5, [pc, #24]	@ (8001454 <_sbrk_r+0x1c>)
 800143c:	2300      	movs	r3, #0
 800143e:	4604      	mov	r4, r0
 8001440:	4608      	mov	r0, r1
 8001442:	602b      	str	r3, [r5, #0]
 8001444:	f7ff f866 	bl	8000514 <_sbrk>
 8001448:	1c43      	adds	r3, r0, #1
 800144a:	d102      	bne.n	8001452 <_sbrk_r+0x1a>
 800144c:	682b      	ldr	r3, [r5, #0]
 800144e:	b103      	cbz	r3, 8001452 <_sbrk_r+0x1a>
 8001450:	6023      	str	r3, [r4, #0]
 8001452:	bd38      	pop	{r3, r4, r5, pc}
 8001454:	200001bc 	.word	0x200001bc

08001458 <__swhatbuf_r>:
 8001458:	b570      	push	{r4, r5, r6, lr}
 800145a:	460c      	mov	r4, r1
 800145c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001460:	2900      	cmp	r1, #0
 8001462:	b096      	sub	sp, #88	@ 0x58
 8001464:	4615      	mov	r5, r2
 8001466:	461e      	mov	r6, r3
 8001468:	da0d      	bge.n	8001486 <__swhatbuf_r+0x2e>
 800146a:	89a3      	ldrh	r3, [r4, #12]
 800146c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001470:	f04f 0100 	mov.w	r1, #0
 8001474:	bf14      	ite	ne
 8001476:	2340      	movne	r3, #64	@ 0x40
 8001478:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800147c:	2000      	movs	r0, #0
 800147e:	6031      	str	r1, [r6, #0]
 8001480:	602b      	str	r3, [r5, #0]
 8001482:	b016      	add	sp, #88	@ 0x58
 8001484:	bd70      	pop	{r4, r5, r6, pc}
 8001486:	466a      	mov	r2, sp
 8001488:	f000 f848 	bl	800151c <_fstat_r>
 800148c:	2800      	cmp	r0, #0
 800148e:	dbec      	blt.n	800146a <__swhatbuf_r+0x12>
 8001490:	9901      	ldr	r1, [sp, #4]
 8001492:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001496:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800149a:	4259      	negs	r1, r3
 800149c:	4159      	adcs	r1, r3
 800149e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014a2:	e7eb      	b.n	800147c <__swhatbuf_r+0x24>

080014a4 <__smakebuf_r>:
 80014a4:	898b      	ldrh	r3, [r1, #12]
 80014a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014a8:	079d      	lsls	r5, r3, #30
 80014aa:	4606      	mov	r6, r0
 80014ac:	460c      	mov	r4, r1
 80014ae:	d507      	bpl.n	80014c0 <__smakebuf_r+0x1c>
 80014b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80014b4:	6023      	str	r3, [r4, #0]
 80014b6:	6123      	str	r3, [r4, #16]
 80014b8:	2301      	movs	r3, #1
 80014ba:	6163      	str	r3, [r4, #20]
 80014bc:	b003      	add	sp, #12
 80014be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c0:	ab01      	add	r3, sp, #4
 80014c2:	466a      	mov	r2, sp
 80014c4:	f7ff ffc8 	bl	8001458 <__swhatbuf_r>
 80014c8:	9f00      	ldr	r7, [sp, #0]
 80014ca:	4605      	mov	r5, r0
 80014cc:	4639      	mov	r1, r7
 80014ce:	4630      	mov	r0, r6
 80014d0:	f7ff fb16 	bl	8000b00 <_malloc_r>
 80014d4:	b948      	cbnz	r0, 80014ea <__smakebuf_r+0x46>
 80014d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014da:	059a      	lsls	r2, r3, #22
 80014dc:	d4ee      	bmi.n	80014bc <__smakebuf_r+0x18>
 80014de:	f023 0303 	bic.w	r3, r3, #3
 80014e2:	f043 0302 	orr.w	r3, r3, #2
 80014e6:	81a3      	strh	r3, [r4, #12]
 80014e8:	e7e2      	b.n	80014b0 <__smakebuf_r+0xc>
 80014ea:	89a3      	ldrh	r3, [r4, #12]
 80014ec:	6020      	str	r0, [r4, #0]
 80014ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f2:	81a3      	strh	r3, [r4, #12]
 80014f4:	9b01      	ldr	r3, [sp, #4]
 80014f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80014fa:	b15b      	cbz	r3, 8001514 <__smakebuf_r+0x70>
 80014fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001500:	4630      	mov	r0, r6
 8001502:	f000 f81d 	bl	8001540 <_isatty_r>
 8001506:	b128      	cbz	r0, 8001514 <__smakebuf_r+0x70>
 8001508:	89a3      	ldrh	r3, [r4, #12]
 800150a:	f023 0303 	bic.w	r3, r3, #3
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	81a3      	strh	r3, [r4, #12]
 8001514:	89a3      	ldrh	r3, [r4, #12]
 8001516:	431d      	orrs	r5, r3
 8001518:	81a5      	strh	r5, [r4, #12]
 800151a:	e7cf      	b.n	80014bc <__smakebuf_r+0x18>

0800151c <_fstat_r>:
 800151c:	b538      	push	{r3, r4, r5, lr}
 800151e:	4d07      	ldr	r5, [pc, #28]	@ (800153c <_fstat_r+0x20>)
 8001520:	2300      	movs	r3, #0
 8001522:	4604      	mov	r4, r0
 8001524:	4608      	mov	r0, r1
 8001526:	4611      	mov	r1, r2
 8001528:	602b      	str	r3, [r5, #0]
 800152a:	f7fe ffca 	bl	80004c2 <_fstat>
 800152e:	1c43      	adds	r3, r0, #1
 8001530:	d102      	bne.n	8001538 <_fstat_r+0x1c>
 8001532:	682b      	ldr	r3, [r5, #0]
 8001534:	b103      	cbz	r3, 8001538 <_fstat_r+0x1c>
 8001536:	6023      	str	r3, [r4, #0]
 8001538:	bd38      	pop	{r3, r4, r5, pc}
 800153a:	bf00      	nop
 800153c:	200001bc 	.word	0x200001bc

08001540 <_isatty_r>:
 8001540:	b538      	push	{r3, r4, r5, lr}
 8001542:	4d06      	ldr	r5, [pc, #24]	@ (800155c <_isatty_r+0x1c>)
 8001544:	2300      	movs	r3, #0
 8001546:	4604      	mov	r4, r0
 8001548:	4608      	mov	r0, r1
 800154a:	602b      	str	r3, [r5, #0]
 800154c:	f7fe ffc9 	bl	80004e2 <_isatty>
 8001550:	1c43      	adds	r3, r0, #1
 8001552:	d102      	bne.n	800155a <_isatty_r+0x1a>
 8001554:	682b      	ldr	r3, [r5, #0]
 8001556:	b103      	cbz	r3, 800155a <_isatty_r+0x1a>
 8001558:	6023      	str	r3, [r4, #0]
 800155a:	bd38      	pop	{r3, r4, r5, pc}
 800155c:	200001bc 	.word	0x200001bc

08001560 <_init>:
 8001560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001562:	bf00      	nop
 8001564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001566:	bc08      	pop	{r3}
 8001568:	469e      	mov	lr, r3
 800156a:	4770      	bx	lr

0800156c <_fini>:
 800156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800156e:	bf00      	nop
 8001570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001572:	bc08      	pop	{r3}
 8001574:	469e      	mov	lr, r3
 8001576:	4770      	bx	lr
